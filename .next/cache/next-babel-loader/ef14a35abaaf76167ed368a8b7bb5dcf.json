{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport * as Yup from 'yup';\nimport { Fragment, useCallback, useContext, useState } from 'react';\nimport { AuthModal } from \"../common/AuthModal\";\nimport { AuthModalContext } from \"../../common/AuthModalContext\";\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport RecoverMutation from \"./graphql/recover.graphql\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { useTranslation } from \"../../../i18n\";\nexport function ForgotPassword() {\n  const {\n    0: isFormSubmitDone,\n    1: setIsFormSubmitDone\n  } = useState(false);\n  const {\n    0: submitErrors,\n    1: setSubmitErrors\n  } = useState([]);\n  const [recover] = useMutation(RecoverMutation);\n  const {\n    t\n  } = useTranslation();\n  const authModalCtx = useContext(AuthModalContext);\n  const close = useCallback(() => authModalCtx.setActive(null), [authModalCtx]);\n  const showSignUp = useCallback(() => authModalCtx.setActive('signup'), [authModalCtx]);\n  const submit = useCallback(async (values, actions) => {\n    try {\n      const r = await recover({\n        variables: values\n      });\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['customerUserErrors']))(r.data.customerRecover);\n      if (R.length(errors)) return setSubmitErrors(errors);\n      actions.resetForm();\n      setIsFormSubmitDone(true);\n    } catch (e) {\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['graphQLErrors']))(e);\n      setSubmitErrors(errors || [t('recoverFailed')]);\n    }\n  }, [recover, t]);\n  const initialValues = {\n    'email': ''\n  };\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email().required()\n  });\n  return __jsx(AuthModal, {\n    close: close\n  }, __jsx(\"div\", {\n    className: \"header\"\n  }, __jsx(\"h2\", {\n    className: \"title\"\n  }, t('forgotYourPassword'))), __jsx(\"div\", {\n    className: \"content\"\n  }, isFormSubmitDone ? __jsx(\"div\", {\n    className: \"form\"\n  }, __jsx(\"div\", {\n    className: \"note span--2\"\n  }, t('recoverPasswordEmailSent')), __jsx(\"button\", {\n    className: \"button span--2\",\n    onClick: close,\n    type: \"button\"\n  }, t('close'))) : __jsx(Fragment, null, __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: submit\n  }, __jsx(Form, {\n    showSignUp: showSignUp,\n    errorMessages: submitErrors\n  })), __jsx(\"button\", {\n    className: \"close-button\",\n    onClick: close,\n    type: \"button\"\n  }, t('cancel')))));\n}","map":null,"metadata":{},"sourceType":"module"}