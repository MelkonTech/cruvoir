{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as R from 'ramda';\nimport * as Yup from 'yup';\nimport { useCallback, useContext, useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport { ProfileLayout } from \"../common/ProfileLayout\";\nimport styles from \"./index.css\";\nimport UpdateCustomerMutation from \"./graphql/update-customer.graphql\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { UserContext } from \"../../common/UserContext\";\nimport { useTranslation } from \"../../../i18n\";\nexport function General(props) {\n  const {\n    t\n  } = useTranslation();\n  const userCtx = useContext(UserContext);\n  const {\n    0: submitErrors,\n    1: setSubmitErrors\n  } = useState([]);\n  const [update] = useMutation(UpdateCustomerMutation);\n  const submit = useCallback(async values => {\n    setSubmitErrors([]);\n\n    try {\n      const r = await update({\n        variables: {\n          customer: _objectSpread({\n            acceptsMarketing: values.acceptsMarketing,\n            email: values.email,\n            firstName: values.firstName,\n            lastName: values.lastName\n          }, values.phone ? {\n            phone: values.phone\n          } : {}),\n          customerAccessToken: userCtx.accessToken\n        }\n      });\n      setSubmitErrors(R.compose(R.pluck('message'), R.pathOr([], ['customerUserErrors']))(r.data.customerUpdate));\n    } catch (e) {\n      setSubmitErrors(R.compose(R.pluck('message'), R.pathOr([], ['graphQLErrors']))(e) || [t('profileUpdateFailed')]);\n    }\n  }, [t, update, userCtx.accessToken]);\n  const initialValues = useMemo(() => ({\n    acceptsMarketing: R.pathOr(false, ['user', 'acceptsMarketing'], userCtx),\n    email: R.pathOr('', ['user', 'email'], userCtx),\n    firstName: R.pathOr('', ['user', 'firstName'], userCtx),\n    lastName: R.pathOr('', ['user', 'lastName'], userCtx),\n    phone: R.pathOr('', ['user', 'phone'], userCtx)\n  }), [userCtx]);\n  const validationSchema = useMemo(() => Yup.object().shape({\n    email: Yup.string().email().required(),\n    phone: Yup.string().matches(/^[0-9\\+\\-\\(\\) ]*$/, t('phoneNumberIsNotValid'))\n  }), [t]);\n  return __jsx(ProfileLayout, {\n    className: cn(styles.general, props.className)\n  }, __jsx(\"div\", {\n    className: \"content\"\n  }, !R.isEmpty(submitErrors) && __jsx(\"div\", {\n    className: \"error-message\"\n  }, R.map(message => __jsx(\"div\", {\n    className: \"row\",\n    key: message\n  }, message), submitErrors)), __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: submit\n  }, __jsx(Form, {\n    className: \"form\"\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}