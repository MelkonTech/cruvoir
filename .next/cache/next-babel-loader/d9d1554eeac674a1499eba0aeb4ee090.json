{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useCallback, useContext, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nimport { isServer } from \"../helpers\";\nconst PortalContext = /*#__PURE__*/createContext({\n  createPortal: () => null\n});\n\nfunction Portal(props) {\n  const ctx = useContext(PortalContext); // WARN do not remove wrapper with suppressHydrationWarning\n\n  return __jsx(\"span\", {\n    suppressHydrationWarning: true\n  }, ctx.createPortal(props.children, props.selector));\n}\n\nclass PortalManager {\n  constructor() {\n    _defineProperty(this, \"portals\", []);\n  }\n\n  create(children) {\n    if (this.portals) this.portals.push(children);\n  }\n\n}\n\nfunction PortalProvider(props) {\n  const create = useCallback((children, selector = '#portals') => {\n    if (isServer()) return null;\n    if (props.manager) props.manager.create([children, selector]);\n    return /*#__PURE__*/createPortal(children, document.querySelector(selector));\n  }, [props.manager]);\n  const value = useMemo(() => ({\n    createPortal: create\n  }), [create]);\n  return __jsx(PortalContext.Provider, {\n    value: value\n  }, props.children);\n}\n\nexport { Portal, PortalManager, PortalProvider };","map":null,"metadata":{},"sourceType":"module"}