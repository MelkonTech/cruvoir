{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as R from 'ramda';\nimport { Fragment, useContext, useMemo } from 'react';\nimport cn from 'classnames';\nimport { ConvertCurrency } from \"../../../common/ConvertCurrency\";\nimport { CurrencyContext } from \"../../../common/CurrencyContext\";\nimport { EmptyMessage } from \"../../../common/EmptyMessage\";\nimport { Link } from \"../../../common/Link\";\nimport moment from 'moment';\nimport OrdersQuery from \"./graphql/orders.graphql\";\nimport { Paginator } from \"../../../common/Paginator\";\nimport { ProfileLayout } from \"../../common/ProfileLayout\";\nimport styles from \"./index.css\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { UserContext } from \"../../../common/UserContext\";\nimport { useTranslation } from \"../../../../i18n\";\nexport function List(props) {\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const currencyCtx = useContext(CurrencyContext);\n  const userCtx = useContext(UserContext);\n  const perPage = 10;\n  const {\n    data: ordersData,\n    loading\n  } = useQuery(OrdersQuery, {\n    variables: _objectSpread(_objectSpread(_objectSpread({\n      customerAccessToken: userCtx.accessToken\n    }, props.query.after ? {\n      after: props.query.after\n    } : {}), props.query.before ? {\n      before: props.query.before\n    } : {}), props.query.before ? {\n      last: perPage\n    } : {\n      first: perPage\n    })\n  });\n  const urlBaseAs = '/profile/orders';\n  const urlBaseHref = '/profile/orders';\n  const orders = useMemo(() => R.pathOr([], ['customer', 'orders', 'edges'], ordersData), [ordersData]);\n  const firstCursor = useMemo(() => R.compose(R.path(['cursor']), R.head)(orders), [orders]);\n  const lastCursor = useMemo(() => R.compose(R.path(['cursor']), R.last)(orders), [orders]);\n  const pageInfo = R.path(['orders', 'pageInfo'], ordersData);\n  const previousLinkAs = R.prop('hasPreviousPage', pageInfo) ? `${urlBaseAs}?before=${firstCursor}` : null;\n  const previousLinkHref = R.prop('hasPreviousPage', pageInfo) ? `${urlBaseHref}&before=${firstCursor}` : null;\n  const nextLinkAs = R.prop('hasNextPage', pageInfo) ? `${urlBaseAs}?after=${lastCursor}` : null;\n  const nextLinkHref = R.prop('hasNextPage', pageInfo) ? `${urlBaseHref}&after=${lastCursor}` : null;\n  const isEmpty = R.isEmpty(orders);\n  if (loading) return __jsx(\"div\", null, \"Loading...\");\n  return __jsx(ProfileLayout, {\n    className: cn(styles.list, props.className)\n  }, __jsx(\"div\", {\n    className: \"content\"\n  }, isEmpty && __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('noOrdersYet')), !isEmpty && __jsx(Fragment, null, __jsx(\"table\", {\n    className: \"table\"\n  }, __jsx(\"tbody\", {\n    className: \"head\"\n  }, __jsx(\"tr\", {\n    className: \"row\"\n  }, __jsx(\"th\", {\n    className: \"cell\"\n  }, t('orderNo')), __jsx(\"th\", {\n    className: \"cell\"\n  }, t('status')), __jsx(\"th\", {\n    className: \"cell\",\n    style: {\n      width: '50%'\n    }\n  }, t('content')), __jsx(\"th\", {\n    className: \"cell\"\n  }, t('total')))), __jsx(\"tbody\", {\n    className: \"body\"\n  }, R.map(order => __jsx(\"tr\", {\n    className: \"row\",\n    key: order.node.id\n  }, __jsx(\"td\", {\n    className: \"cell\",\n    \"data-label\": t('orderNo')\n  }, __jsx(\"span\", {\n    className: \"label\"\n  }, __jsx(Link, {\n    as: `/profile/orders/${order.node.id}`,\n    className: \"link\",\n    href: \"/profile/orders/[id]\"\n  }, \"#\", order.node.orderNumber), ` / ${moment(order.node.processedAt, moment.ISO_8601).locale(i18n.language || i18n.options['defaultLanguage']).format('MMMM D, YYYY')}`)), __jsx(\"td\", {\n    className: \"cell\",\n    \"data-label\": t('status')\n  }, __jsx(\"span\", {\n    className: \"label\"\n  }, order.node.financialStatus, \", \", order.node.fulfillmentStatus)), __jsx(\"td\", {\n    className: \"cell\",\n    \"data-label\": t('content')\n  }, __jsx(\"span\", {\n    className: \"label is-uppercased\"\n  }, R.map(edge => `${edge.node.title} X ${edge.node.currentQuantity}`, order.node.lineItems.edges).join(', '))), __jsx(\"td\", {\n    className: \"cell\",\n    \"data-label\": t('total')\n  }, __jsx(\"span\", {\n    className: \"important\"\n  }, __jsx(ConvertCurrency, {\n    from: \"USD\",\n    to: currencyCtx.active\n  }, order.node.totalPriceV2.amount)))), orders))), __jsx(Paginator, {\n    className: \"paginator\",\n    nextLinkAs: nextLinkAs,\n    nextLinkHref: nextLinkHref,\n    previousLinkAs: previousLinkAs,\n    previousLinkHref: previousLinkHref\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}