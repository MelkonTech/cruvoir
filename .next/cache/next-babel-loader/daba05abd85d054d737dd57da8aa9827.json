{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { Home as BlogHome } from \"../components/blog/Home\";\nimport getConfig from 'next/config';\nimport { isServer } from \"../components/common/helpers\";\nimport Prismic from 'prismic-javascript';\nimport { prismicClient } from \"../components/common/helpers\";\nimport { Women } from \"../components/home/Women\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nconst blogHost = () => publicRuntimeConfig.NEXT_PUBLIC_BLOG_URL.replace(/https?:\\/\\//, '');\n\nconst Home = props => {\n  if (props.host === blogHost()) return __jsx(BlogHome, props);else return __jsx(Women, props);\n};\n\nHome.getInitialProps = async params => {\n  // Blog and the main app are hosted on different domains\n  if ((isServer() ? params.req.headers.host : location.host) === blogHost()) return await BlogHome.getInitialProps(params);\n  const topPostsResponse = await prismicClient(params.req).query([Prismic.Predicates.at('document.type', 'post'), Prismic.Predicates.at('my.post.is_top', true)], {\n    orderings: '[my.post.date desc]'\n  });\n  return {\n    cmsContent: R.path(['results', '0', 'data'], await prismicClient(params.req).query([Prismic.Predicates.at('document.id', publicRuntimeConfig.NEXT_PUBLIC_PRISMIC_WOMENSHOMEPAGE_ID)], {})),\n    topPosts: R.map(result => R.mergeRight(result.data, {\n      tags: result && result.tags,\n      uid: result.uid\n    }), topPostsResponse.results)\n  };\n};\n\nexport default Home;","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/pages/index.tsx"],"names":["R","Home","BlogHome","getConfig","isServer","Prismic","prismicClient","Women","publicRuntimeConfig","blogHost","NEXT_PUBLIC_BLOG_URL","replace","props","host","getInitialProps","params","req","headers","location","topPostsResponse","query","Predicates","at","orderings","cmsContent","path","NEXT_PUBLIC_PRISMIC_WOMENSHOMEPAGE_ID","topPosts","map","result","mergeRight","data","tags","uid","results"],"mappings":";;AAAA,OAAO,KAAKA,CAAZ,MAAmB,OAAnB;AACA,SAAQC,IAAI,IAAIC,QAAhB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,QAAR;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAAQC,aAAR;AACA,SAAQC,KAAR;AACA,MAAM;AAACC,EAAAA;AAAD,IAAwBL,SAAS,EAAvC;;AACA,MAAMM,QAAQ,GAAG,MAAMD,mBAAmB,CAACE,oBAApB,CAAyCC,OAAzC,CAAiD,aAAjD,EAAgE,EAAhE,CAAvB;;AAEA,MAAMV,IAAI,GAAGW,KAAK,IAAI;AACpB,MAAGA,KAAK,CAACC,IAAN,KAAeJ,QAAQ,EAA1B,EACE,OAAO,MAAC,QAAD,EAAcG,KAAd,CAAP,CADF,KAGE,OAAO,MAAC,KAAD,EAAWA,KAAX,CAAP;AACH,CALD;;AAOAX,IAAI,CAACa,eAAL,GAAuB,MAAMC,MAAN,IAAgB;AACrC;AACA,MAAG,CAACX,QAAQ,KAAKW,MAAM,CAACC,GAAP,CAAWC,OAAX,CAAmBJ,IAAxB,GAA+BK,QAAQ,CAACL,IAAjD,MAA2DJ,QAAQ,EAAtE,EACE,OAAO,MAAMP,QAAQ,CAACY,eAAT,CAAyBC,MAAzB,CAAb;AAEF,QAAMI,gBAAgB,GAAG,MAAMb,aAAa,CAACS,MAAM,CAACC,GAAR,CAAb,CAA0BI,KAA1B,CAC7B,CAACf,OAAO,CAACgB,UAAR,CAAmBC,EAAnB,CAAsB,eAAtB,EAAuC,MAAvC,CAAD,EAAiDjB,OAAO,CAACgB,UAAR,CAAmBC,EAAnB,CAAsB,gBAAtB,EAAwC,IAAxC,CAAjD,CAD6B,EAE7B;AAACC,IAAAA,SAAS,EAAE;AAAZ,GAF6B,CAA/B;AAKA,SAAO;AACLC,IAAAA,UAAU,EAAExB,CAAC,CAACyB,IAAF,CAAO,CAAC,SAAD,EAAY,GAAZ,EAAiB,MAAjB,CAAP,EAAiC,MAAMnB,aAAa,CAACS,MAAM,CAACC,GAAR,CAAb,CAA0BI,KAA1B,CAAgC,CACjFf,OAAO,CAACgB,UAAR,CAAmBC,EAAnB,CAAsB,aAAtB,EAAqCd,mBAAmB,CAACkB,qCAAzD,CADiF,CAAhC,EAEhD,EAFgD,CAAvC,CADP;AAKLC,IAAAA,QAAQ,EAAE3B,CAAC,CAAC4B,GAAF,CACRC,MAAM,IAAI7B,CAAC,CAAC8B,UAAF,CAAaD,MAAM,CAACE,IAApB,EAA0B;AAACC,MAAAA,IAAI,EAAEH,MAAM,IAAIA,MAAM,CAACG,IAAxB;AAA8BC,MAAAA,GAAG,EAAEJ,MAAM,CAACI;AAA1C,KAA1B,CADF,EAERd,gBAAgB,CAACe,OAFT;AALL,GAAP;AAUD,CApBD;;AAsBA,eAAejC,IAAf","sourcesContent":["import * as R from 'ramda'\nimport {Home as BlogHome} from 'components/blog/Home'\nimport getConfig from 'next/config'\nimport {isServer} from 'components/common/helpers'\nimport Prismic from 'prismic-javascript'\nimport {prismicClient} from 'components/common/helpers'\nimport {Women} from 'components/home/Women'\nconst {publicRuntimeConfig} = getConfig()\nconst blogHost = () => publicRuntimeConfig.NEXT_PUBLIC_BLOG_URL.replace(/https?:\\/\\//, '')\n\nconst Home = props => {\n  if(props.host === blogHost())\n    return <BlogHome {...props} />\n  else\n    return <Women {...props} />\n}\n\nHome.getInitialProps = async params => {\n  // Blog and the main app are hosted on different domains\n  if((isServer() ? params.req.headers.host : location.host) === blogHost())\n    return await BlogHome.getInitialProps(params)\n\n  const topPostsResponse = await prismicClient(params.req).query(\n    [Prismic.Predicates.at('document.type', 'post'), Prismic.Predicates.at('my.post.is_top', true)],\n    {orderings: '[my.post.date desc]'},\n  )\n\n  return {\n    cmsContent: R.path(['results', '0', 'data'], await prismicClient(params.req).query([\n      Prismic.Predicates.at('document.id', publicRuntimeConfig.NEXT_PUBLIC_PRISMIC_WOMENSHOMEPAGE_ID),\n    ], {})),\n\n    topPosts: R.map(\n      result => R.mergeRight(result.data, {tags: result && result.tags, uid: result.uid}),\n      topPostsResponse.results,\n    ),\n  }\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}