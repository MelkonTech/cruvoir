{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { useCallback, useMemo } from 'react';\nimport { findGenderInProductTags, normalizeCartItemForRead } from \"../../../helpers\";\nimport cn from 'classnames';\nimport { EmptyMessage } from \"../../../EmptyMessage\";\nimport { Icon } from \"../../../Icon\";\nimport { Link } from \"../../../Link\";\nimport { NativeSelect } from \"../../../form\";\nimport { PriceWithCompareAt } from \"../../../PriceWithCompareAt\";\nimport styles from \"./index.css\";\nimport { translatedProductTitle } from \"../../../helpers\";\nimport { useTranslation } from \"../../../../../i18n\";\nexport function Item(props) {\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const item = useMemo(() => normalizeCartItemForRead(props.cartItem), [props.cartItem]);\n  const removeProduct = props.removeProduct;\n  const updateProduct = props.updateProduct;\n  const remove = useCallback(() => removeProduct(item.variantID), [item.variantID, removeProduct]);\n  const update = useCallback(event => updateProduct({\n    quantity: parseInt(event.currentTarget.value, 10),\n    variantID: item.variantID\n  }), [item.variantID, updateProduct]);\n  const quantityOptions = useMemo(() => R.map(i => ({\n    label: String(i),\n    value: String(i)\n  }))(R.range(1, props.maxQuantity + 1)), [props.maxQuantity]);\n  const gender = useMemo(() => findGenderInProductTags(props.cartItem.variant.product.tags), [props.cartItem.variant.product]);\n  return __jsx(\"div\", {\n    className: cn(props.className, styles.item)\n  }, item.image ? __jsx(\"img\", {\n    className: \"image\",\n    src: item.image.transformedSrc,\n    alt: item.image.altText\n  }) : __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('noImage')), __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(\"header\", {\n    className: \"header\"\n  }, __jsx(\"div\", {\n    className: \"vendor\"\n  }, item.vendor), __jsx(\"button\", {\n    className: \"button\",\n    onClick: remove\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"cross\"\n  }))), __jsx(Link, {\n    as: `/${gender}/shop/item/${item.vendor}/${item.handle}`,\n    href: `/[gender]/shop/item/[vendor]/[handle]?gender=${gender}&vendor=${item.vendor}&handle=${item.handle}`,\n    className: \"title\"\n  }, translatedProductTitle({\n    i18n,\n    product: {\n      handle: item.handle,\n      title: item.title\n    },\n    t\n  })), R.map(o => __jsx(\"div\", {\n    key: o.name,\n    className: \"section\"\n  }, __jsx(\"div\", {\n    className: \"label\"\n  }, `${t(o.name)}:`), __jsx(\"div\", {\n    className: \"value\"\n  }, o.value)), item.options || []), __jsx(NativeSelect, {\n    className: \"input\",\n    onChange: update,\n    value: item.quantity,\n    options: quantityOptions\n  }), __jsx(PriceWithCompareAt, {\n    className: \"price\",\n    compareAtPrice: item.compareAtPrice ? Number(item.compareAtPrice) * item.quantity : null,\n    price: Number(item.price) * item.quantity\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}