{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { capfirst } from \"../../helpers\";\nimport cn from 'classnames';\nimport styles from \"./index.css\";\nexport function NativeSelect(props) {\n  return __jsx(\"div\", {\n    className: cn(styles.select, props.className, {\n      'is-disabled': props.disabled\n    })\n  }, __jsx(\"select\", {\n    className: \"input\",\n    disabled: props.disabled,\n    onChange: props.onChange,\n    value: props.value,\n    name: props.name\n  }, R.map(option => __jsx(\"option\", {\n    key: option.value,\n    value: option.value\n  }, option.label), props.options)), props.isInvalid && props.errorMessage && __jsx(\"div\", {\n    className: \"error-message\"\n  }, capfirst(props.errorMessage)));\n}","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/form/NativeSelect/index.tsx"],"names":["R","capfirst","cn","styles","NativeSelect","props","select","className","disabled","onChange","value","name","map","option","label","options","isInvalid","errorMessage"],"mappings":";;AAAA,OAAO,KAAKA,CAAZ,MAAmB,OAAnB;AACA,SAAQC,QAAR;AAEA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,MAAP;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EASJ;AACD,SAAO;AAAK,IAAA,SAAS,EAAEH,EAAE,CAACC,MAAM,CAACG,MAAR,EAAgBD,KAAK,CAACE,SAAtB,EAAiC;AAAC,qBAAeF,KAAK,CAACG;AAAtB,KAAjC;AAAlB,KACL;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,QAAQ,EAAEH,KAAK,CAACG,QAFlB;AAGE,IAAA,QAAQ,EAAEH,KAAK,CAACI,QAHlB;AAIE,IAAA,KAAK,EAAEJ,KAAK,CAACK,KAJf;AAKE,IAAA,IAAI,EAAEL,KAAK,CAACM;AALd,KAOGX,CAAC,CAACY,GAAF,CAAMC,MAAM,IAAI;AAAQ,IAAA,GAAG,EAAEA,MAAM,CAACH,KAApB;AAA2B,IAAA,KAAK,EAAEG,MAAM,CAACH;AAAzC,KAAiDG,MAAM,CAACC,KAAxD,CAAhB,EAAyFT,KAAK,CAACU,OAA/F,CAPH,CADK,EAWJV,KAAK,CAACW,SAAN,IAAmBX,KAAK,CAACY,YAAzB,IAAyC;AAAK,IAAA,SAAS,EAAC;AAAf,KAAgChB,QAAQ,CAACI,KAAK,CAACY,YAAP,CAAxC,CAXrC,CAAP;AAaD","sourcesContent":["import * as R from 'ramda'\nimport {capfirst} from 'components/common/helpers'\nimport {ChangeEvent} from 'react'\nimport cn from 'classnames'\nimport styles from './index.css'\n\nexport function NativeSelect(props: {\n  className?: string\n  disabled?: boolean\n  errorMessage?: string\n  isInvalid?: boolean\n  name?: string\n  onChange: (event: ChangeEvent<HTMLSelectElement>) => void\n  options: {value: string, label: string}[]\n  value: string | number\n}) {\n  return <div className={cn(styles.select, props.className, {'is-disabled': props.disabled})}>\n    <select\n      className=\"input\"\n      disabled={props.disabled}\n      onChange={props.onChange}\n      value={props.value}\n      name={props.name}\n    >\n      {R.map(option => <option key={option.value} value={option.value}>{option.label}</option>, props.options)}\n    </select>\n\n    {props.isInvalid && props.errorMessage && <div className=\"error-message\">{capfirst(props.errorMessage)}</div>}\n  </div>\n}\n"]},"metadata":{},"sourceType":"module"}