{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { useCallback, useContext, useMemo } from 'react';\nimport cn from 'classnames';\nimport { CollapsableSection } from \"../common/CollapsableSection\";\nimport { CurrencyContext } from \"../../../../common/CurrencyContext\";\nimport { Field } from \"../../../../common/form/common/Field\";\nimport { Input } from \"../../../../common/form\";\nimport styles from \"./index.css\";\nimport { useField } from 'formik';\nimport { useFormikContext } from 'formik';\nimport { useTranslation } from \"../../../../../i18n\";\nexport function Price(props) {\n  const {\n    t\n  } = useTranslation();\n  const currencyCtx = useContext(CurrencyContext);\n  const prefix = useMemo(() => ({\n    CAD: 'C$',\n    EUR: '€',\n    GBP: '£',\n    USD: '$'\n  })[currencyCtx.active], [currencyCtx.active]);\n  const {\n    setFieldValue\n  } = useFormikContext();\n  const clear = useCallback(() => {\n    setFieldValue('minPrice', '');\n    setFieldValue('maxPrice', '');\n  }, [setFieldValue]);\n  const [minField, minMeta] = useField('minPrice');\n  const [maxField, maxMeta] = useField('maxPrice');\n  const isInvalid = (minMeta.error || maxMeta.error) && (minMeta.touched || maxMeta.touched);\n  return __jsx(CollapsableSection, {\n    className: cn(styles.price, props.className),\n    clear: clear,\n    isClearButtonShown: !R.isEmpty(minField.value) || !R.isEmpty(maxField.value),\n    isCollapsed: true,\n    title: t('price')\n  }, __jsx(\"div\", {\n    className: \"field-wrapper\"\n  }, __jsx(Field, {\n    className: \"field\",\n    errorMessage: `${R.pathOr('', ['error'], minMeta)} ${R.pathOr('', ['error'], maxMeta)}`,\n    isInvalid: isInvalid\n  }, __jsx(Input, {\n    className: \"field\",\n    disabled: props.disabled,\n    type: \"number\",\n    isErrorMessageHidden: true,\n    name: \"minPrice\",\n    placeholder: `${prefix} ${t('min')}`\n  }), __jsx(\"hr\", {\n    className: \"divider\"\n  }), __jsx(Input, {\n    className: \"field\",\n    disabled: props.disabled,\n    type: \"number\",\n    isErrorMessageHidden: true,\n    name: \"maxPrice\",\n    placeholder: `${prefix} ${t('max')}`\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}