{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { Fragment, useCallback } from 'react';\nimport { useField, useFormikContext } from 'formik';\nimport checkboxStyles from \"../../../../../common/form/Checkbox/index.css\";\nimport cn from 'classnames';\nimport { CollapsableSection } from \"../CollapsableSection\";\nimport { useMemo } from 'react';\nimport { useTranslation } from \"../../../../../../i18n\";\nexport function CheckboxGroup(props) {\n  const {\n    setFieldValue\n  } = useFormikContext();\n  const [field] = useField(props.name);\n  const {\n    t\n  } = useTranslation();\n  const value = useMemo(() => typeof field.value === 'string' ? [field.value] : field.value, [field.value]);\n  const clear = useCallback(() => setFieldValue(props.name, []), [props, setFieldValue]);\n  return __jsx(CollapsableSection, {\n    className: props.className,\n    clear: clear,\n    isClearButtonShown: !R.isEmpty(field.value),\n    isCollapsed: props.isCollapsed,\n    numberOfSelected: value.length,\n    title: props.title\n  }, __jsx(Fragment, null, R.map(variant => __jsx(\"label\", {\n    key: variant.value,\n    className: cn(checkboxStyles.checkbox, 'field')\n  }, __jsx(\"input\", {\n    checked: R.includes(variant.value, value || []),\n    className: \"input\",\n    type: \"checkbox\" // eslint-disable-next-line react/jsx-no-bind\n    ,\n    onChange: () => {\n      const nextValue = R.includes(variant.value, value) ? R.reject(R.equals(variant.value), value) : R.append(variant.value, value);\n      setFieldValue(props.name, nextValue);\n    }\n  }), __jsx(\"span\", {\n    className: \"caption\"\n  }, t(variant.title))), props.variants)));\n}","map":null,"metadata":{},"sourceType":"module"}