{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useCallback } from 'react';\nimport cn from 'classnames';\nimport { NativeSelect } from \"../NativeSelect\";\nimport { useField } from 'formik';\nexport function Select(props) {\n  const [field, meta] = useField(props.name);\n  const isInvalid = meta.error && meta.touched;\n  const onChange = useCallback(event => {\n    field.onChange(event);\n    if (typeof props.onChange === 'function') props.onChange(event);\n  }, [field, props]);\n  return __jsx(NativeSelect, _extends({}, field, {\n    value: field.value || '',\n    className: cn(props.className, {\n      'is-invalid': isInvalid,\n      'is-uppercased': props.isUppercase\n    }),\n    disabled: props.disabled,\n    onChange: onChange,\n    options: props.options,\n    name: props.name,\n    isInvalid: isInvalid,\n    errorMessage: meta.error\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}