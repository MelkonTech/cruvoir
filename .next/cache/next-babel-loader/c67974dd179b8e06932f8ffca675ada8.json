{"ast":null,"code":"import * as R from 'ramda';\nimport { getVariantOptionByName } from \"./\"; // Example — red color of a t-shirt may not be available in S or M size\n\nexport const getUnavailableOptions = (values, options, variants) => R.reduce((obj, variant) => {\n  if (variant.node.selectedOptions.length > 1) {\n    for (let key in values) if (getVariantOptionByName(key, variant.node) === values[key]) R.forEach(option => {\n      if (option.name !== key && obj[option.name]) obj[option.name].push(option.value);\n    }, variant.node.selectedOptions);\n  } else obj[variant.node.selectedOptions[0].name].push(variant.node.selectedOptions[0].value);\n\n  return obj;\n}, R.reduce((obj, option) => R.assoc(option.name, [], obj), {}, options), R.filter(variant => variant.node.availableForSale === false, variants));","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/helpers/get-unavailable-options.tsx"],"names":["R","getVariantOptionByName","getUnavailableOptions","values","options","variants","reduce","obj","variant","node","selectedOptions","length","key","forEach","option","name","push","value","assoc","filter","availableForSale"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,OAAnB;AAEA,SAAQC,sBAAR,a,CAEA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,MAAD,EAASC,OAAT,EAA4BC,QAA5B,KAAyCL,CAAC,CAACM,MAAF,CAC5E,CAACC,GAAD,EAAMC,OAAN,KAAmC;AACjC,MAAGA,OAAO,CAACC,IAAR,CAAaC,eAAb,CAA6BC,MAA7B,GAAsC,CAAzC,EAA4C;AAC1C,SAAI,IAAIC,GAAR,IAAeT,MAAf,EACE,IAAGF,sBAAsB,CAACW,GAAD,EAAMJ,OAAO,CAACC,IAAd,CAAtB,KAA8CN,MAAM,CAACS,GAAD,CAAvD,EACEZ,CAAC,CAACa,OAAF,CACEC,MAAM,IAAI;AACR,UAAGA,MAAM,CAACC,IAAP,KAAgBH,GAAhB,IAAuBL,GAAG,CAACO,MAAM,CAACC,IAAR,CAA7B,EACER,GAAG,CAACO,MAAM,CAACC,IAAR,CAAH,CAAiBC,IAAjB,CAAsBF,MAAM,CAACG,KAA7B;AACH,KAJH,EAMET,OAAO,CAACC,IAAR,CAAaC,eANf;AAQL,GAXD,MAYEH,GAAG,CAACC,OAAO,CAACC,IAAR,CAAaC,eAAb,CAA6B,CAA7B,EAAgCK,IAAjC,CAAH,CAA0CC,IAA1C,CAA+CR,OAAO,CAACC,IAAR,CAAaC,eAAb,CAA6B,CAA7B,EAAgCO,KAA/E;;AAEF,SAAOV,GAAP;AACD,CAjB2E,EAmB5EP,CAAC,CAACM,MAAF,CAAS,CAACC,GAAD,EAAMO,MAAN,KAAiBd,CAAC,CAACkB,KAAF,CAAQJ,MAAM,CAACC,IAAf,EAAqB,EAArB,EAAyBR,GAAzB,CAA1B,EAAyD,EAAzD,EAA6DH,OAA7D,CAnB4E,EAqB5EJ,CAAC,CAACmB,MAAF,CACEX,OAAO,IAAIA,OAAO,CAACC,IAAR,CAAaW,gBAAb,KAAkC,KAD/C,EAEEf,QAFF,CArB4E,CAAvE","sourcesContent":["import * as R from 'ramda'\nimport {Option, Variant} from 'components/common/types'\nimport {getVariantOptionByName} from 'components/common/helpers'\n\n// Example — red color of a t-shirt may not be available in S or M size\nexport const getUnavailableOptions = (values, options: Option[], variants) => R.reduce(\n  (obj, variant: {node: Variant}) => {\n    if(variant.node.selectedOptions.length > 1) {\n      for(let key in values)\n        if(getVariantOptionByName(key, variant.node) === values[key])\n          R.forEach(\n            option => {\n              if(option.name !== key && obj[option.name])\n                obj[option.name].push(option.value)\n            },\n\n            variant.node.selectedOptions,\n          )\n    }else\n      obj[variant.node.selectedOptions[0].name].push(variant.node.selectedOptions[0].value)\n\n    return obj\n  },\n\n  R.reduce((obj, option) => R.assoc(option.name, [], obj), {}, options),\n\n  R.filter(\n    variant => variant.node.availableForSale === false,\n    variants,\n  ),\n)\n"]},"metadata":{},"sourceType":"module"}