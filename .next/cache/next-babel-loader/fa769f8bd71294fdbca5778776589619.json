{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Children, Fragment, useCallback, useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport styles from \"./index.css\";\nexport function Slider(props) {\n  const listRef = useRef(null);\n  const {\n    0: isPrevButtonDisabled,\n    1: setPrevButtonDisabled\n  } = useState(false);\n  const {\n    0: isNextButtonDisabled,\n    1: setNextButtonDisabled\n  } = useState(false);\n  const scrollToNextSlide = useCallback(() => {\n    listRef.current.scroll({\n      behavior: 'smooth',\n      left: listRef.current.scrollLeft + listRef.current.clientWidth\n    });\n  }, []);\n  const scrollToPrevSlide = useCallback(() => {\n    listRef.current.scroll({\n      behavior: 'smooth',\n      left: listRef.current.scrollLeft - listRef.current.clientWidth\n    });\n  }, []);\n  const {\n    0: currentSlideIndex,\n    1: setCurrentSlideIndex\n  } = useState(0);\n  const selectSlide = useCallback(e => {\n    // offset * slideIndex\n    listRef.current.scrollLeft = listRef.current.offsetWidth * Array.from(e.currentTarget.parentElement.children).indexOf(e.currentTarget);\n  }, []);\n  useEffect(() => {\n    if (!listRef.current || !listRef.current.scroll) return;\n    if (Number.isInteger(props.initialSlideNumber)) listRef.current.scroll({\n      behavior: 'auto',\n      left: listRef.current.querySelector('.slide').offsetWidth * props.initialSlideNumber\n    });\n  }, [props.initialSlideNumber]);\n  useEffect(() => {\n    if (!listRef.current) return;\n\n    const handleResize = () => {\n      listRef.current.scrollLeft = listRef.current.scrollLeft;\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [listRef]);\n  useEffect(() => {\n    if (!listRef.current) return;\n    const element = listRef.current;\n\n    const scrollHandler = () => {\n      setPrevButtonDisabled(element.scrollLeft < element.clientWidth / 2);\n      setNextButtonDisabled(element.scrollLeft > element.scrollWidth - element.clientWidth * 1.5);\n      setCurrentSlideIndex(Math.floor((element.scrollLeft + element.offsetWidth / 2) / element.offsetWidth));\n    };\n\n    scrollHandler();\n    element.addEventListener('scroll', scrollHandler);\n    return () => element.removeEventListener('scroll', scrollHandler);\n  }, [props.children]);\n  useEffect(() => {\n    if (props.hasKeyboardNavigation) {\n      const handlerPrev = e => {\n        if (e.key === 'ArrowLeft') scrollToPrevSlide();\n      };\n\n      document.addEventListener('keyup', handlerPrev);\n      return () => document.removeEventListener('keyup', handlerPrev);\n    }\n  }, [props.hasKeyboardNavigation, scrollToPrevSlide]);\n  useEffect(() => {\n    if (props.hasKeyboardNavigation) {\n      const handler = e => {\n        if (e.key === 'ArrowRight') scrollToNextSlide();\n      };\n\n      document.addEventListener('keyup', handler);\n      return () => document.removeEventListener('keyup', handler);\n    }\n  }, [props.hasKeyboardNavigation, scrollToNextSlide]);\n  return __jsx(\"div\", {\n    className: cn({\n      [styles.slider]: !props.noStyles\n    }, props.className)\n  }, Children.count(props.children) > 0 ? __jsx(Fragment, null, __jsx(\"div\", {\n    className: cn('list', props.listClassName),\n    ref: listRef\n  }, props.children, props.hasThumbs && props.images && __jsx(\"div\", {\n    className: \"thumbs\"\n  }, props.images.map((item, index) => __jsx(\"div\", {\n    className: cn('item', {\n      'is-selected': index === currentSlideIndex\n    }),\n    key: index,\n    onClick: selectSlide\n  }, __jsx(\"img\", {\n    alt: item.altText,\n    className: \"image\",\n    src: item.originalSrc\n  }))))), Children.count(props.children) > 1 && __jsx(Fragment, null, props.hasNavigation && __jsx(\"div\", {\n    className: \"navigation\"\n  }, __jsx(\"button\", {\n    className: cn('button', 'type--prev', {\n      'is-disabled': isPrevButtonDisabled,\n      'is-shown': !isPrevButtonDisabled || !isNextButtonDisabled\n    }),\n    onClick: scrollToPrevSlide,\n    type: \"button\"\n  }), __jsx(\"button\", {\n    className: cn('button', 'type--next', {\n      'is-disabled': isNextButtonDisabled,\n      'is-shown': !isPrevButtonDisabled || !isNextButtonDisabled\n    }),\n    onClick: scrollToNextSlide,\n    type: \"button\"\n  })), props.hasNumeration && __jsx(\"div\", {\n    className: \"numeration\"\n  }, `${currentSlideIndex + 1} / ${Children.count(props.children)}`), props.hasPagination && __jsx(\"div\", {\n    className: \"pagination\"\n  }, Children.map(props.children, (item, index) => __jsx(\"button\", {\n    className: cn('button', {\n      'is-selected': index === currentSlideIndex\n    }),\n    key: index,\n    onClick: selectSlide,\n    type: \"button\"\n  }))))) : props.emptyMessage ? typeof props.emptyMessage === 'object' ? props.emptyMessage : __jsx(\"div\", {\n    className: \"empty-message\"\n  }, props.emptyMessage) : __jsx(\"div\", {\n    className: \"empty-message\"\n  }, \"No results\"));\n}","map":null,"metadata":{},"sourceType":"module"}