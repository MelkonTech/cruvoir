{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { findGenderInProductTags, normalizeCartItemForRead } from \"../../common/helpers\";\nimport { useContext, useMemo } from 'react';\nimport { CartContext } from \"../../common/CartContext\";\nimport cn from 'classnames';\nimport { EmptyMessage } from \"../../common/EmptyMessage\";\nimport { Icon } from \"../../common/Icon\";\nimport { Link } from \"../../common/Link\";\nimport { PriceWithCompareAt } from \"../../common/PriceWithCompareAt\";\nimport { Quantity } from \"./Quantity\";\nimport styles from \"./index.css\";\nimport { translatedProductTitle } from \"../../common/helpers\";\nimport { useTranslation } from \"../../../i18n\";\nexport function Row(props) {\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const cartCtx = useContext(CartContext);\n  const normalizeCartItem = useMemo(() => normalizeCartItemForRead(props.data), [props.data]);\n  const gender = useMemo(() => findGenderInProductTags(props.data.variant.product.tags), [props.data.variant.product.tags]);\n  const productTitle = translatedProductTitle({\n    i18n,\n    product: {\n      handle: normalizeCartItem.handle,\n      title: normalizeCartItem.title\n    },\n    t\n  });\n  return __jsx(\"tr\", {\n    className: cn(styles.row, props.className)\n  }, __jsx(\"td\", {\n    className: \"cell card\"\n  }, __jsx(\"div\", {\n    className: \"section\"\n  }, normalizeCartItem.image ? __jsx(\"img\", {\n    alt: normalizeCartItem.image.altText,\n    className: \"image\",\n    src: normalizeCartItem.image.transformedSrc\n  }) : __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('noImage')), __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(\"div\", {\n    className: \"vendor\"\n  }, normalizeCartItem.vendor), __jsx(Link, {\n    as: `/${gender}/shop/item/${normalizeCartItem.vendor}/${normalizeCartItem.handle}`,\n    className: \"title\" // eslint-disable-next-line max-len\n    ,\n    href: `/[gender]/shop/item/[vendor]/[handle]?gender=${gender}&vendor=${normalizeCartItem.vendor}&handle=${normalizeCartItem.handle}`,\n    title: productTitle\n  }, productTitle)))), (normalizeCartItem.options || []).map(o => __jsx(\"td\", {\n    key: o.name,\n    className: \"cell option\"\n  }, `${t(o.name)}: ${o.value}`)), __jsx(\"td\", {\n    className: \"cell field\"\n  }, __jsx(Quantity, {\n    className: \"input\" // Do not allow quantity going over the stock\n    ,\n    maxQuantity: R.pathOr(1, [props.data.variant.product.id, props.data.variant.id], cartCtx.inventoryQuantityOfProducts),\n    updateProduct: cartCtx.updateProduct,\n    variantID: props.data.variant.id,\n    value: props.data.quantity\n  })), __jsx(\"td\", {\n    className: \"cell price\"\n  }, __jsx(PriceWithCompareAt, {\n    price: +props.data.variant.priceV2.amount * props.data.quantity\n  })), __jsx(\"td\", {\n    className: \"cell action\"\n  }, __jsx(\"button\", {\n    className: \"button\" //eslint-disable-next-line react/jsx-no-bind\n    ,\n    onClick: () => cartCtx.removeProduct(props.data.variant.id),\n    title: t('remove')\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"cross\"\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}