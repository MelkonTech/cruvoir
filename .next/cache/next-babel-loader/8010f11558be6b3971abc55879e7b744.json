{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { Fragment, useCallback, useMemo, useState } from 'react';\nimport { getFirstVariantPrice, getInitialVariantOptions, getUnavailableOptions, getVariantOptionByName } from \"../helpers\";\nimport { nameToHandle, productPath } from \"../helpers\";\nimport cn from 'classnames';\nimport { EmptyMessage } from \"../EmptyMessage\";\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport { Link } from \"../Link\";\nimport { PriceWithCompareAt } from \"../PriceWithCompareAt\";\nimport styles from \"./index.css\";\nimport { useTranslation } from \"../../../i18n\";\nimport { WishButton } from \"../WishButton\"; // https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/blob/master/ADVANCED.md#adding-non-standard-attributes\n\nexport function ProductCard(props) {\n  const {\n    t\n  } = useTranslation();\n  const path = productPath(props.product.tags);\n  const gender = R.pathOr('', ['gender'], path).toLowerCase();\n  const vendorHandle = nameToHandle(props.product.vendor);\n  const options = useMemo(() => R.reject(R.propEq('name', 'Color'), R.pathOr([], ['options'], props.product)), [props.product]);\n  const variants = useMemo(() => R.sort((a, b) => +b.node.availableForSale - +a.node.availableForSale, R.pathOr([], ['variants', 'edges'], props.product)), [props.product]);\n  const {\n    0: price,\n    1: setPrice\n  } = useState(getFirstVariantPrice(variants, 'priceV2'));\n  const {\n    0: compareAtPrice,\n    1: setCompareAtPrice\n  } = useState(getFirstVariantPrice(variants, 'compareAtPriceV2'));\n  const {\n    0: isAvailableForSale,\n    1: setIsAvailableForSale\n  } = useState(R.pathOr(null, ['node', 'availableForSale'], variants[0]));\n  const initialVariantOptions = useMemo(() => getInitialVariantOptions(variants), [variants]);\n  const {\n    0: unavailableOptions,\n    1: setUnavailableOptions\n  } = useState(getUnavailableOptions(initialVariantOptions, options, variants));\n  const updatePriceAndAvailability = useCallback(values => {\n    const matchingVariant = R.find(variant => {\n      for (let key in values) if (!getVariantOptionByName(key, variant.node) || getVariantOptionByName(key, variant.node) !== values[key]) return false;\n\n      return true;\n    }, variants);\n    setPrice(matchingVariant.node.priceV2);\n    setCompareAtPrice(matchingVariant.node.compareAtPriceV2);\n    setIsAvailableForSale(matchingVariant.node.availableForSale);\n    setUnavailableOptions(getUnavailableOptions(values, options, variants));\n  }, [options, variants]);\n  const submit = useCallback(() => {}, []);\n  const {\n    0: isErrorImageShown,\n    1: setIsErrorImageShown\n  } = useState(false);\n  const showErrorImage = useCallback(() => setIsErrorImageShown(true), []);\n  return __jsx(Formik, {\n    initialValues: initialVariantOptions,\n    onSubmit: submit,\n    validate: updatePriceAndAvailability\n  }, __jsx(\"div\", {\n    className: cn(styles.card, props.className)\n  }, __jsx(\"div\", {\n    className: \"picture\"\n  }, !isErrorImageShown && !R.isEmpty(props.product.images.edges) && __jsx(Fragment, null, __jsx(\"img\", {\n    src: props.product.images.edges[0].node.transformedSrc,\n    alt: props.product.images.edges[0].node.altText || props.product.title,\n    className: \"image\",\n    loading: \"lazy\",\n    onError: showErrorImage\n  }), props.product.images.edges[1] && __jsx(\"img\", {\n    src: props.product.images.edges[1].node.transformedSrc,\n    alt: props.product.images.edges[1].node.altText || props.product.title,\n    className: \"image\",\n    loading: \"lazy\",\n    onError: showErrorImage\n  })), (isErrorImageShown || R.isEmpty(props.product.images.edges)) && __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('noImage'))), __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"div\", {\n    className: \"vendor\"\n  }, props.product.vendor), __jsx(Link, {\n    as: `/${gender}/shop/item/${vendorHandle}/${props.product.handle}`\n    /* eslint-disable-next-line max-len */\n    ,\n    href: `/[gender]/shop/item/[vendor]/[handle]?gender=${gender}&vendor=${vendorHandle}&handle=${props.product.handle}`,\n    className: \"title\"\n  }, props.product.title), __jsx(PriceWithCompareAt, {\n    className: \"price\",\n    compareAtPrice: R.path(['amount'], compareAtPrice),\n    price: Number(price.amount)\n  })), __jsx(WishButton, {\n    className: \"wish-button\",\n    productId: props.product.id\n  }), __jsx(Form, {\n    className: \"form\",\n    isAvailableForSale: isAvailableForSale,\n    options: options,\n    product: props.product,\n    unavailableOptions: unavailableOptions,\n    variants: variants\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}