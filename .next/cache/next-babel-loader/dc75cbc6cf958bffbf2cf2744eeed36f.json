{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as R from 'ramda';\nimport { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport AddToWishListMutation from \"./graphql/add-to-wishlist.graphql\";\nimport { AuthModalContext } from \"../AuthModalContext\";\nimport RemoveFromWishListMutation from \"./graphql/remove-from-wishlist.graphql\";\nimport { UserContext } from \"../UserContext\";\nimport WishListQuery from \"./graphql/wishlist.graphql\";\nexport const WishListContext = /*#__PURE__*/createContext({\n  add: () => null,\n  isWished: () => false,\n  list: [],\n  remove: () => null\n});\nexport function WishListContextProvider(props) {\n  const [addToWishList] = useMutation(AddToWishListMutation, {\n    context: {\n      isInternalAPI: true\n    }\n  });\n  const authModalCtx = useContext(AuthModalContext);\n  const [removeFromWishList] = useMutation(RemoveFromWishListMutation, {\n    context: {\n      isInternalAPI: true\n    }\n  });\n  const userCtx = useContext(UserContext);\n  const customerId = R.prop('id', userCtx.user);\n  const {\n    0: delayedAddProductId,\n    1: setAddDelayedProductId\n  } = useState(null);\n  const isCustomerLoggedIn = Boolean(userCtx.user);\n  const {\n    data,\n    loading\n  } = useQuery(WishListQuery, {\n    context: {\n      isInternalAPI: true\n    },\n    skip: !isCustomerLoggedIn,\n    variables: {\n      customerId: customerId\n    }\n  });\n  const list = loading || !isCustomerLoggedIn ? [] : data.wishlist; // When user is not loggedin all products are shown as non-wished â€” there is no way non-loggedin\n  // user will unwish a product\n\n  const add = useCallback(productId => {\n    if (!isCustomerLoggedIn) {\n      authModalCtx.setActive('signin');\n      setAddDelayedProductId(productId);\n      return;\n    }\n\n    addToWishList({\n      optimisticResponse: {\n        __typename: 'mutation_root',\n        insert_wishlist: {\n          __typename: 'wishlist_mutation_response',\n          returning: [{\n            __typename: 'wishlist',\n            customer_id: customerId,\n            // The pair of customerId: str and productId: str is unique on DB side\n            id: customerId + productId,\n            product_id: productId\n          }]\n        }\n      },\n      update: (proxy, response) => {\n        const chacheQueryParams = {\n          query: WishListQuery,\n          variables: {\n            customerId: customerId\n          }\n        };\n        const listFromCache = proxy.readQuery(chacheQueryParams);\n        proxy.writeQuery(_objectSpread(_objectSpread({}, chacheQueryParams), {}, {\n          data: {\n            wishlist: [...listFromCache.wishlist, ...response.data.insert_wishlist.returning]\n          }\n        }));\n      },\n      variables: {\n        customerId: customerId,\n        productId\n      }\n    });\n  }, [addToWishList, authModalCtx, customerId, isCustomerLoggedIn]);\n  const remove = useCallback(productId => {\n    removeFromWishList({\n      optimisticResponse: {\n        __typename: 'mutation_root',\n        delete_wishlist: {\n          __typename: 'wishlist_mutation_response',\n          returning: [{\n            __typename: 'wishlist',\n            customer_id: customerId,\n            id: R.find(R.propEq('product_id', productId), list).id,\n            product_id: productId\n          }]\n        }\n      },\n      update: proxy => {\n        const chacheQueryParams = {\n          query: WishListQuery,\n          variables: {\n            customerId: customerId\n          }\n        };\n        const listFromCache = proxy.readQuery(chacheQueryParams);\n        proxy.writeQuery(_objectSpread(_objectSpread({}, chacheQueryParams), {}, {\n          data: {\n            wishlist: R.reject(R.propEq('product_id', productId), listFromCache.wishlist)\n          }\n        }));\n      },\n      variables: {\n        customerId,\n        productId\n      }\n    });\n  }, [customerId, list, removeFromWishList]);\n  const isWished = useCallback(productId => R.any(R.propEq('product_id', productId), list), [list]);\n  const value = useMemo(() => ({\n    add,\n    isWished,\n    list,\n    remove\n  }), [add, isWished, list, remove]); // When user data arrives wish a product that was wished before sign in\n\n  useEffect(() => {\n    if (userCtx.user && delayedAddProductId) {\n      setAddDelayedProductId(null);\n      add(delayedAddProductId);\n    }\n  }, [add, delayedAddProductId, setAddDelayedProductId, userCtx]);\n  return __jsx(WishListContext.Provider, {\n    value: value\n  }, props.children);\n}","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/WishListContext/index.tsx"],"names":["R","createContext","useCallback","useContext","useEffect","useMemo","useState","useMutation","useQuery","AddToWishListMutation","AuthModalContext","RemoveFromWishListMutation","UserContext","WishListQuery","WishListContext","add","isWished","list","remove","WishListContextProvider","props","addToWishList","context","isInternalAPI","authModalCtx","removeFromWishList","userCtx","customerId","prop","user","delayedAddProductId","setAddDelayedProductId","isCustomerLoggedIn","Boolean","data","loading","skip","variables","wishlist","productId","setActive","optimisticResponse","__typename","insert_wishlist","returning","customer_id","id","product_id","update","proxy","response","chacheQueryParams","query","listFromCache","readQuery","writeQuery","delete_wishlist","find","propEq","reject","any","value","children"],"mappings":"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","sourcesContent":["import * as R from 'ramda'\nimport {createContext, ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {useMutation, useQuery} from '@apollo/react-hooks'\nimport AddToWishListMutation from './graphql/add-to-wishlist.graphql'\nimport {AuthModalContext} from 'components/common/AuthModalContext'\nimport RemoveFromWishListMutation from './graphql/remove-from-wishlist.graphql'\nimport {UserContext} from 'components/common/UserContext'\nimport WishListQuery from './graphql/wishlist.graphql'\ntype Wish = {customer_id: string, id: string, product_id: string}\ntype WishList = Wish[]\n\ntype ContextValue = {\n  add: (productId: string) => void\n  isWished: (productId: string) => boolean\n  list: WishList\n  remove: (productId: string) => void\n}\n\nexport const WishListContext = createContext<ContextValue>({\n  add     : () => null,\n  isWished: () => false,\n  list    : [],\n  remove  : () => null,\n})\n\nexport function WishListContextProvider(props: {\n  children: ReactNode\n}) {\n  const [addToWishList] = useMutation(AddToWishListMutation, {context: {isInternalAPI: true}})\n  const authModalCtx = useContext(AuthModalContext)\n  const [removeFromWishList] = useMutation(RemoveFromWishListMutation, {context: {isInternalAPI: true}})\n  const userCtx = useContext(UserContext)\n  const customerId = R.prop('id', userCtx.user)\n  const [delayedAddProductId, setAddDelayedProductId] = useState<string | null>(null)\n  const isCustomerLoggedIn = Boolean(userCtx.user)\n\n  const {data, loading}: {data: {wishlist: WishList}, loading: boolean} = useQuery(\n    WishListQuery,\n    {context: {isInternalAPI: true}, skip: !isCustomerLoggedIn, variables: {customerId: customerId}},\n  )\n\n  const list = loading || !isCustomerLoggedIn ? [] : data.wishlist\n\n  // When user is not loggedin all products are shown as non-wished â€” there is no way non-loggedin\n  // user will unwish a product\n  const add = useCallback((productId: string) => {\n    if(!isCustomerLoggedIn) {\n      authModalCtx.setActive('signin')\n      setAddDelayedProductId(productId)\n      return\n    }\n\n    addToWishList({\n      optimisticResponse: {\n        __typename: 'mutation_root',\n\n        insert_wishlist: {\n          __typename: 'wishlist_mutation_response',\n\n          returning: [{\n            __typename : 'wishlist',\n            customer_id: customerId,\n\n            // The pair of customerId: str and productId: str is unique on DB side\n            id: customerId + productId,\n\n            product_id: productId,\n          }],\n        },\n      },\n\n      update: (proxy, response) => {\n        const chacheQueryParams = {query: WishListQuery, variables: {customerId: customerId}}\n        const listFromCache: {wishlist: WishList} = proxy.readQuery(chacheQueryParams)\n\n        proxy.writeQuery({\n          ...chacheQueryParams,\n          data: {wishlist: [...listFromCache.wishlist, ...response.data.insert_wishlist.returning]},\n        })\n      },\n\n      variables: {customerId: customerId, productId},\n    })\n  }, [addToWishList, authModalCtx, customerId, isCustomerLoggedIn])\n\n  const remove = useCallback((productId: string) => {\n    removeFromWishList({\n      optimisticResponse: {\n        __typename: 'mutation_root',\n\n        delete_wishlist: {\n          __typename: 'wishlist_mutation_response',\n          \n          returning: [{\n            __typename : 'wishlist',\n            customer_id: customerId,\n            id         : R.find<Wish>(R.propEq('product_id', productId), list).id,\n            product_id : productId,\n          }],\n        },\n      },\n\n      update: proxy => {\n        const chacheQueryParams = {query: WishListQuery, variables: {customerId: customerId}}\n        const listFromCache: {wishlist: WishList} = proxy.readQuery(chacheQueryParams)\n\n        proxy.writeQuery({\n          ...chacheQueryParams,\n          data: {wishlist: R.reject(R.propEq('product_id', productId), listFromCache.wishlist)},\n        })\n      },\n\n      variables: {customerId, productId},\n    })\n  }, [customerId, list, removeFromWishList])\n\n  const isWished = useCallback(\n    (productId: string): boolean => R.any(R.propEq('product_id', productId), list),\n    [list],\n  )\n\n  const value = useMemo(() => ({\n    add,\n    isWished,\n    list,\n    remove,\n  }), [add, isWished, list, remove])\n\n  // When user data arrives wish a product that was wished before sign in\n  useEffect(() => {\n    if(userCtx.user && delayedAddProductId) {\n      setAddDelayedProductId(null)\n      add(delayedAddProductId)\n    }\n  }, [add, delayedAddProductId, setAddDelayedProductId, userCtx])\n\n  return <WishListContext.Provider value={value}>{props.children}</WishListContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}