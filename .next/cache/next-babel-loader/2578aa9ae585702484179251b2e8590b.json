{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Form as FormikForm, useFormikContext } from 'formik';\nimport { useCallback, useContext, useState } from 'react';\nimport { Button } from \"../../Button\";\nimport { CartContext } from \"../../CartContext\";\nimport cn from 'classnames';\nimport { SizesField } from \"./SizesField\";\nimport styles from \"./index.css\";\nimport { useTranslation } from \"../../../../i18n\";\nexport function Form(props) {\n  const cartCtx = useContext(CartContext);\n  const {\n    t\n  } = useTranslation();\n  const {\n    values\n  } = useFormikContext();\n  const {\n    0: isAddToBagLoading,\n    1: setIsAddToBagLoading\n  } = useState(false);\n  const addToBag = useCallback(async () => {\n    const addProductParams = {\n      handle: props.product.handle,\n      quantity: 1,\n      values: values\n    };\n    setIsAddToBagLoading(true); // Do not show confirmation popup on the cart page\n\n    if (window.location.pathname === '/cart') await cartCtx.addProduct(addProductParams);else await cartCtx.addProductWithConfirm(addProductParams);\n    setIsAddToBagLoading(false);\n  }, [cartCtx, props.product.handle, values]);\n  return __jsx(FormikForm, {\n    className: cn(styles.form, props.className)\n  }, __jsx(SizesField, {\n    className: \"field\",\n    options: props.options,\n    values: values,\n    variants: props.variants\n  }), __jsx(Button, {\n    appearance: \"outline\",\n    className: \"button\",\n    isLoading: isAddToBagLoading,\n    disabled: !props.isAvailableForSale,\n    width: \"flex\",\n    onClick: addToBag\n  }, t(props.isAvailableForSale ? 'addToBag' : 'soldOut')));\n}","map":null,"metadata":{},"sourceType":"module"}