{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Fragment, useContext } from 'react';\nimport { CurrencyContext } from \"../CurrencyContext\";\n\nfunction ConvertCurrency(props) {\n  const currencyContext = useContext(CurrencyContext);\n  const currencyPrefix = {\n    CAD: 'C$',\n    EUR: '€',\n    GBP: '£',\n    USD: '$'\n  };\n  if (currencyContext.rates) return __jsx(Fragment, null, currencyPrefix[props.to], (parseFloat(props.children.toString()) * currencyContext.rates[props.to]).toFixed(2));else return __jsx(Fragment, null, \"\\u2026\");\n}\n\nexport { ConvertCurrency };","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/ConvertCurrency/index.tsx"],"names":["Fragment","useContext","CurrencyContext","ConvertCurrency","props","currencyContext","currencyPrefix","CAD","EUR","GBP","USD","rates","to","parseFloat","children","toString","toFixed"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,UAAlB,QAAmC,OAAnC;AAEA,SAAQC,eAAR;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAMG;AACD,QAAMC,eAAe,GAAGJ,UAAU,CAACC,eAAD,CAAlC;AACA,QAAMI,cAAwC,GAAG;AAACC,IAAAA,GAAG,EAAE,IAAN;AAAYC,IAAAA,GAAG,EAAE,GAAjB;AAAsBC,IAAAA,GAAG,EAAE,GAA3B;AAAgCC,IAAAA,GAAG,EAAE;AAArC,GAAjD;AAEA,MAAGL,eAAe,CAACM,KAAnB,EACE,OAAO,MAAC,QAAD,QACJL,cAAc,CAACF,KAAK,CAACQ,EAAP,CADV,EACsB,CAACC,UAAU,CAACT,KAAK,CAACU,QAAN,CAAeC,QAAf,EAAD,CAAV,GAAwCV,eAAe,CAACM,KAAhB,CAAsBP,KAAK,CAACQ,EAA5B,CAAzC,EAA0EI,OAA1E,CAAkF,CAAlF,CADtB,CAAP,CADF,KAME,OAAO,MAAC,QAAD,iBAAP;AACH;;AAED,SAAQb,eAAR","sourcesContent":["import {Fragment, useContext} from 'react'\nimport {Currency} from 'components/common/types'\nimport {CurrencyContext} from 'components/common/CurrencyContext'\n\nfunction ConvertCurrency(props: {\n  children: string | number\n  from: Currency\n  rates?: Record<Currency, number>\n  ratesLastUpdatedAt?: string\n  to: Currency\n}) {\n  const currencyContext = useContext(CurrencyContext)\n  const currencyPrefix: Record<Currency, string> = {CAD: 'C$', EUR: '€', GBP: '£', USD: '$'}\n\n  if(currencyContext.rates)\n    return <Fragment>\n      {currencyPrefix[props.to]}{(parseFloat(props.children.toString()) * currencyContext.rates[props.to]).toFixed(2)}\n    </Fragment>\n\n  else\n    return <Fragment>…</Fragment>\n}\n\nexport {ConvertCurrency}\n"]},"metadata":{},"sourceType":"module"}