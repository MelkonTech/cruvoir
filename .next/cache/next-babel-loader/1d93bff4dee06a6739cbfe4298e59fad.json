{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { Fragment, useContext, useMemo } from 'react';\nimport { normalizeCartItemForRead, translatedProductTitle } from \"../../../common/helpers\";\nimport { Breadcrumbs } from \"../../../common/Breadcrumbs\";\nimport cn from 'classnames';\nimport { ConvertCurrency } from \"../../../common/ConvertCurrency\";\nimport { CurrencyContext } from \"../../../common/CurrencyContext\";\nimport { EmptyMessage } from \"../../../common/EmptyMessage\";\nimport moment from 'moment';\nimport OrderQuery from \"./graphql/order.graphql\";\nimport { ProfileLayout } from \"../../common/ProfileLayout\";\nimport styles from \"./index.css\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { useRouter } from 'next/router';\nimport { useTranslation } from \"../../../../i18n\";\nexport function Details(props) {\n  const router = useRouter();\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const currencyCtx = useContext(CurrencyContext);\n  const {\n    data: orderData,\n    loading\n  } = useQuery(OrderQuery, {\n    variables: {\n      id: router.query.id\n    }\n  });\n  const cartItems = useMemo(() => R.compose(R.map(normalizeCartItemForRead), R.pluck('node'), R.pathOr([], ['node', 'lineItems', 'edges']))(orderData), [orderData]);\n  const breadcrumbs = useMemo(() => {\n    return [{\n      as: '/profile/orders',\n      href: '/profile/orders',\n      title: t('myOrders')\n    }, {\n      as: null,\n      href: null,\n      title: R.pathOr('', ['node', 'name'], orderData)\n    }];\n  }, [orderData, t]);\n  if (loading) return __jsx(\"div\", null, \"Loading...\");\n  return __jsx(ProfileLayout, {\n    className: cn(styles.details, props.className)\n  }, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Breadcrumbs, {\n    className: \"breadcrumbs\",\n    items: breadcrumbs\n  }), orderData && __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"div\", {\n    className: \"list styled-scrollbar\"\n  }, __jsx(\"div\", {\n    className: \"section\"\n  }, R.map(item => __jsx(\"div\", {\n    className: \"item\",\n    key: item.id\n  }, item.image ? __jsx(\"img\", {\n    className: \"image\",\n    src: item.image.transformedSrc,\n    alt: item.image.altText\n  }) : __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('noImage')), __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(\"div\", {\n    className: \"vendor\"\n  }, item.vendor), __jsx(\"div\", {\n    className: \"title\"\n  }, translatedProductTitle({\n    i18n,\n    product: {\n      handle: item.handle,\n      title: item.title\n    },\n    t\n  })), R.map(o => __jsx(\"div\", {\n    key: o.name,\n    className: \"size\"\n  }, `${t(o.name)}: ${o.value}`), item.options || [])), __jsx(\"div\", {\n    className: \"price\"\n  }, item.quantity, ' x ', __jsx(ConvertCurrency, {\n    from: \"USD\",\n    to: currencyCtx.active\n  }, item.price))), cartItems), R.length(cartItems) === 0 && __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('emptyOrderMessage')))), __jsx(\"div\", {\n    className: \"main\"\n  }, __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"div\", {\n    className: \"label\"\n  }, t('orderDate')), __jsx(\"div\", {\n    className: \"value\"\n  }, moment(orderData.node.processedAt, moment.ISO_8601).locale(i18n.language || i18n.options['defaultLanguage']).format('MMMM D, YYYY'))), __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"div\", {\n    className: \"label\"\n  }, t('orderStatus')), __jsx(\"div\", {\n    className: \"value\"\n  }, orderData.node.financialStatus, \", \", orderData.node.fulfillmentStatus)), __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"div\", {\n    className: \"label\"\n  }, t('orderTotal'), \":\"), __jsx(\"div\", {\n    className: \"value\"\n  }, __jsx(ConvertCurrency, {\n    from: \"USD\",\n    to: currencyCtx.active\n  }, orderData.node.totalPriceV2.amount))), __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"h2\", {\n    className: \"label\"\n  }, t('shippingAddress')), __jsx(\"div\", {\n    className: \"value\"\n  }, orderData.node.phone && __jsx(Fragment, null, orderData.node.phone, __jsx(\"br\", null)), orderData.node.shippingAddress.formatted)), __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"h2\", {\n    className: \"label\"\n  }, t('shippingMethod')), __jsx(\"div\", {\n    className: \"value\"\n  }, orderData.node.successfulFulfillments.trackingCompany || 'No shipping method specified', orderData.node.successfulFulfillments.trackingInfo && __jsx(\"a\", {\n    className: \"link\",\n    href: orderData.node.successfulFulfillments.trackingInfo.url,\n    rel: \"nofollow\"\n  }, orderData.node.successfulFulfillments.trackingInfo.number))), __jsx(\"div\", {\n    className: \"note\"\n  }, t('cancelOrderRequestMessage'), __jsx(\"br\", null), __jsx(\"a\", {\n    className: \"link\",\n    href: \"mailto:support@cruvoir.com\"\n  }, \"support@cruvoir.com\")))), !orderData && __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('orderNotFound'))));\n}","map":null,"metadata":{},"sourceType":"module"}