{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport 'intersection-observer';\nimport * as R from 'ramda';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { BlogPostCard } from \"../../common/BlogPostCard\";\nimport { getHeroImagePath } from \"../../common/helpers\";\nimport { Header } from \"../common/Header\";\nimport { Layout } from \"../../common/Layout\";\nimport { Link } from \"../../common/Link\";\nimport Prismic from 'prismic-javascript';\nimport { prismicClient } from \"../../common/helpers\";\nimport { PromoCard } from \"../common/PromoCard\";\nimport { RichText } from 'prismic-reactjs';\nimport styles from \"./index.css\";\nimport { UnderlineWrapper } from \"../../common/UnderlineWrapper\";\nimport { useTranslation } from \"../../../i18n\";\nconst itemsPerPage = 6;\n\nfunction Home(props) {\n  const {\n    t\n  } = useTranslation();\n  const loadMoreRef = useRef();\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(props.posts || []);\n  const {\n    0: page,\n    1: setPage\n  } = useState(1);\n  const {\n    0: isMorePostsLoading,\n    1: setIsMorePostsLoading\n  } = useState(false);\n  const fetchMore = useCallback(async () => {\n    setIsMorePostsLoading(true);\n    const postsResponse = await prismicClient().query([Prismic.Predicates.at('document.type', 'post'), Prismic.Predicates.not('my.post.is_top', true)], {\n      orderings: '[my.post.date desc]',\n      page: page + 1,\n      pageSize: itemsPerPage\n    });\n    const newPosts = R.map(result => R.mergeRight(result.data, {\n      uid: result.uid\n    }), postsResponse.results);\n    setPage(R.inc);\n    setPosts(loadedPosts => [...loadedPosts, ...newPosts]);\n    setIsMorePostsLoading(false);\n  }, [page]);\n  useEffect(() => {\n    if (isMorePostsLoading) return () => {};\n    const target = loadMoreRef.current;\n    const io = new IntersectionObserver(async entries => {\n      if (entries && entries[0].isIntersecting && page < props.totalPages) await fetchMore();\n    }, {\n      root: null,\n      rootMargin: '350px',\n      threshold: 1.0\n    });\n    io.observe(target);\n    return () => io.unobserve(target);\n  }, [fetchMore, isMorePostsLoading, page, props.totalPages]);\n  return __jsx(Layout, {\n    className: styles.list,\n    isBlogDomain: true\n  }, __jsx(\"div\", {\n    className: \"section type--top-stories\"\n  }, __jsx(Header, {\n    className: \"header\"\n  }, t('topStories')), __jsx(\"div\", {\n    className: \"list\"\n  }, props.topPosts.map(post => __jsx(PromoCard, {\n    as: `/${post.uid}`,\n    className: \"item\",\n    date: post.date,\n    description: RichText.asText(post.excerpt || []),\n    href: `/[gender]?gender=${post.uid}`,\n    imagePath: getHeroImagePath(post.content),\n    key: post.uid,\n    slug: post.uid,\n    tags: post.tags,\n    title: RichText.asText(post.title),\n    videoPath: R.pathOr('', ['video', 'url'], post)\n  })))), __jsx(\"div\", {\n    className: \"section type--more-stories\"\n  }, __jsx(Header, {\n    additionalContent: props.totalPages > itemsPerPage && __jsx(UnderlineWrapper, {\n      className: \"link\",\n      isPermanent: true\n    }, __jsx(Link, {\n      href: \"/posts\"\n    }, t('seeAllStories'))),\n    className: \"header\"\n  }, t('moreStories')), __jsx(\"div\", {\n    className: \"list\"\n  }, posts.map(post => __jsx(BlogPostCard, {\n    as: `/${post.uid}`,\n    className: \"item\",\n    date: post.date,\n    href: `/[gender]?gender=${post.uid}`,\n    imagePath: getHeroImagePath(post.content),\n    key: post.uid,\n    slug: post.uid,\n    title: RichText.asText(post.title),\n    videoPath: R.pathOr('', ['video', 'url'], post)\n  }))), __jsx(\"div\", {\n    className: \"intersection-observer-anchor\",\n    ref: loadMoreRef\n  }), isMorePostsLoading && __jsx(\"div\", {\n    className: \"loading-message\"\n  }, t('loading')), page === props.totalPages && __jsx(\"div\", {\n    className: \"empty-message\"\n  }, t('noBlogPostsFound'))));\n}\n\nHome.getInitialProps = async params => {\n  const topPostsResponse = await prismicClient(params.req).query([Prismic.Predicates.at('document.type', 'post'), Prismic.Predicates.at('my.post.is_top', true)], {\n    orderings: '[my.post.date desc]'\n  });\n  const postsResponse = await prismicClient(params.req).query([Prismic.Predicates.at('document.type', 'post'), Prismic.Predicates.not('my.post.is_top', true)], {\n    orderings: '[my.post.date desc]',\n    pageSize: itemsPerPage\n  });\n  return {\n    hasPageTransition: true,\n    posts: R.map(result => R.mergeRight(result.data, {\n      uid: result.uid\n    }), postsResponse.results),\n    topPosts: R.map(result => R.mergeRight(result.data, {\n      tags: result.tags,\n      uid: result.uid\n    }), topPostsResponse.results),\n    totalPages: postsResponse.total_pages\n  };\n};\n\nexport { Home };","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/blog/Home/index.tsx"],"names":["R","useCallback","useEffect","useRef","useState","BlogPostCard","getHeroImagePath","Header","Layout","Link","Prismic","prismicClient","PromoCard","RichText","styles","UnderlineWrapper","useTranslation","itemsPerPage","Home","props","t","loadMoreRef","posts","setPosts","page","setPage","isMorePostsLoading","setIsMorePostsLoading","fetchMore","postsResponse","query","Predicates","at","not","orderings","pageSize","newPosts","map","result","mergeRight","data","uid","results","inc","loadedPosts","target","current","io","IntersectionObserver","entries","isIntersecting","totalPages","root","rootMargin","threshold","observe","unobserve","list","topPosts","post","date","asText","excerpt","content","tags","title","pathOr","getInitialProps","params","topPostsResponse","req","hasPageTransition","total_pages"],"mappings":"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","sourcesContent":["import 'intersection-observer'\nimport * as R from 'ramda'\nimport {useCallback, useEffect, useRef, useState} from 'react'\nimport {BlogPostCard} from 'components/common/BlogPostCard'\nimport {getHeroImagePath} from 'components/common/helpers'\nimport {Header} from 'components/blog/common/Header'\nimport {Layout} from 'components/common/Layout'\nimport {Link} from 'components/common/Link'\nimport {Post} from 'components/common/types'\nimport Prismic from 'prismic-javascript'\nimport {prismicClient} from 'components/common/helpers'\nimport {PromoCard} from 'components/blog/common/PromoCard'\nimport {RichText} from 'prismic-reactjs'\nimport styles from './index.css'\nimport {UnderlineWrapper} from 'components/common/UnderlineWrapper'\nimport {useTranslation} from 'i18n'\nconst itemsPerPage = 6\n\nfunction Home(props: {\n  posts: Post[]\n  pathname: string\n  query: Record<string, string>\n  topPosts: Post[]\n  totalPages: number\n}) {\n  const {t} = useTranslation()\n  const loadMoreRef = useRef()\n  const [posts, setPosts] = useState(props.posts || [])\n  const [page, setPage] = useState<number>(1)\n  const [isMorePostsLoading, setIsMorePostsLoading] = useState(false)\n\n  const fetchMore = useCallback(async () => {\n    setIsMorePostsLoading(true)\n\n    const postsResponse = await prismicClient().query(\n      [Prismic.Predicates.at('document.type', 'post'), Prismic.Predicates.not('my.post.is_top', true)],\n      {orderings: '[my.post.date desc]', page: page + 1, pageSize: itemsPerPage},\n    )\n\n    const newPosts: Post[] = R.map(\n      result => R.mergeRight(result.data as Post, {uid: result.uid}),\n      postsResponse.results,\n    )\n\n    setPage(R.inc)\n    setPosts(loadedPosts => [...loadedPosts, ...newPosts])\n    setIsMorePostsLoading(false)\n  }, [page])\n\n  useEffect(() => {\n    if(isMorePostsLoading)\n      return () => {}\n\n    const target = loadMoreRef.current\n\n    const io = new IntersectionObserver(\n      async entries => {\n        if(entries && entries[0].isIntersecting && page < props.totalPages)\n          await fetchMore()\n      },\n\n      {root: null, rootMargin: '350px', threshold: 1.0},\n    )\n\n    io.observe(target)\n    return () => io.unobserve(target)\n  }, [fetchMore, isMorePostsLoading, page, props.totalPages])\n\n  return <Layout className={styles.list} isBlogDomain>\n    <div className=\"section type--top-stories\">\n      <Header className=\"header\">{t('topStories')}</Header>\n\n      <div className=\"list\">\n        {props.topPosts.map(post => <PromoCard\n          as={`/${post.uid}`}\n          className=\"item\"\n          date={post.date}\n          description={RichText.asText(post.excerpt || [])}\n          href={`/[gender]?gender=${post.uid}`}\n          imagePath={getHeroImagePath(post.content)}\n          key={post.uid}\n          slug={post.uid}\n          tags={post.tags}\n          title={RichText.asText(post.title)}\n          videoPath={R.pathOr('', ['video', 'url'], post)}\n        />)}\n      </div>\n    </div>\n\n    <div className=\"section type--more-stories\">\n      <Header\n        additionalContent={props.totalPages > itemsPerPage && <UnderlineWrapper className=\"link\" isPermanent>\n          <Link href=\"/posts\">{t('seeAllStories')}</Link>\n        </UnderlineWrapper>}\n\n        className=\"header\"\n      >{t('moreStories')}</Header>\n\n      <div className=\"list\">\n        {posts.map(post => <BlogPostCard\n          as={`/${post.uid}`}\n          className=\"item\"\n          date={post.date}\n          href={`/[gender]?gender=${post.uid}`}\n          imagePath={getHeroImagePath(post.content)}\n          key={post.uid}\n          slug={post.uid}\n          title={RichText.asText(post.title)}\n          videoPath={R.pathOr('', ['video', 'url'], post)}\n        />)}\n      </div>\n\n      <div className=\"intersection-observer-anchor\" ref={loadMoreRef} />\n      {isMorePostsLoading && <div className=\"loading-message\">{t('loading')}</div>}\n      {page === props.totalPages && <div className=\"empty-message\">{t('noBlogPostsFound')}</div>}\n    </div>\n  </Layout>\n}\n\nHome.getInitialProps = async params => {\n  const topPostsResponse = await prismicClient(params.req).query(\n    [Prismic.Predicates.at('document.type', 'post'), Prismic.Predicates.at('my.post.is_top', true)],\n    {orderings: '[my.post.date desc]'},\n  )\n\n  const postsResponse = await prismicClient(params.req).query(\n    [Prismic.Predicates.at('document.type', 'post'), Prismic.Predicates.not('my.post.is_top', true)],\n    {orderings: '[my.post.date desc]', pageSize: itemsPerPage},\n  )\n\n  return {\n    hasPageTransition: true,\n\n    posts: R.map(\n      result => R.mergeRight(result.data, {uid: result.uid}),\n      postsResponse.results,\n    ),\n\n    topPosts: R.map(\n      result => R.mergeRight(result.data, {tags: result.tags, uid: result.uid}),\n      topPostsResponse.results,\n    ),\n\n    totalPages: postsResponse.total_pages,\n  }\n}\n\nexport {Home}\n"]},"metadata":{},"sourceType":"module"}