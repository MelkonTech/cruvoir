{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as Yup from 'yup';\nimport { useCallback, useMemo, useState } from 'react';\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nimport { useTranslation } from \"../../../../../i18n\";\nexport function Newsletter(props) {\n  const initialValues = useMemo(() => ({\n    email: ''\n  }), []);\n  const {\n    0: isErrorShown,\n    1: setIsErrorShown\n  } = useState(false);\n  const {\n    0: isThankYouShown,\n    1: setIsThankYouShown\n  } = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const subscribeToNewsletter = useCallback(async values => {\n    try {\n      setIsErrorShown(false);\n      await (await fetch(`${publicRuntimeConfig.NEXT_PUBLIC_APP_URL}/api/newsletter/subscribe`, {\n        body: JSON.stringify({\n          email: values.email,\n          name: values.name\n        }),\n        headers: {\n          accept: 'application/json'\n        },\n        method: 'POST'\n      })).json();\n      setIsThankYouShown(true);\n      setTimeout(() => setIsThankYouShown(false), 3000);\n    } catch (error) {\n      console.error(error);\n      setIsErrorShown(true);\n    }\n  }, []);\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email().required()\n  });\n  return __jsx(\"div\", null, isThankYouShown && __jsx(\"p\", {\n    style: {\n      fontSize: 10,\n      letterSpacing: '.32px'\n    }\n  }, t('thankYouForSubscribing')), isErrorShown && __jsx(\"p\", {\n    style: {\n      color: '#bc1b1b',\n      fontSize: 10,\n      letterSpacing: '.32px'\n    }\n  }, t('errorWhileSubscribingPleaseTryAgain')), !isThankYouShown && __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: subscribeToNewsletter\n  }, __jsx(Form, {\n    className: props.className\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}