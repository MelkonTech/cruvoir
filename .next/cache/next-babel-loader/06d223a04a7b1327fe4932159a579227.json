{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { Form as FormikForm, useFormikContext } from 'formik';\nimport { useCallback, useContext, useState } from 'react';\nimport { Button } from \"../../Button\";\nimport { CartContext } from \"../../CartContext\";\nimport cn from 'classnames';\nimport { SizesField } from \"./SizesField\";\nimport styles from \"./index.css\";\nimport { useTranslation } from \"../../../../i18n\";\nexport function Form(props) {\n  const cartCtx = useContext(CartContext);\n  const {\n    t\n  } = useTranslation();\n  const {\n    values\n  } = useFormikContext();\n  const {\n    0: isAddToBagLoading,\n    1: setIsAddToBagLoading\n  } = useState(false);\n  const addToBag = useCallback(async () => {\n    const addProductParams = {\n      handle: props.product.handle,\n      quantity: 1,\n      values: values\n    };\n    setIsAddToBagLoading(true); // Do not show confirmation popup on the cart page\n\n    if (window.location.pathname === '/cart') await cartCtx.addProduct(addProductParams);else await cartCtx.addProductWithConfirm(addProductParams);\n    setIsAddToBagLoading(false);\n  }, [cartCtx, props.product.handle, values]);\n  return __jsx(FormikForm, {\n    className: cn(styles.form, props.className)\n  }, __jsx(SizesField, {\n    className: \"field\",\n    options: props.options,\n    values: values,\n    variants: props.variants\n  }), __jsx(Button, {\n    appearance: \"outline\",\n    className: \"button\",\n    isLoading: isAddToBagLoading,\n    disabled: !props.isAvailableForSale,\n    width: \"flex\",\n    onClick: addToBag\n  }, t(props.isAvailableForSale ? 'addToBag' : 'soldOut')));\n}","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/ProductCard/Form/index.tsx"],"names":["Form","FormikForm","useFormikContext","useCallback","useContext","useState","Button","CartContext","cn","SizesField","styles","useTranslation","props","cartCtx","t","values","isAddToBagLoading","setIsAddToBagLoading","addToBag","addProductParams","handle","product","quantity","window","location","pathname","addProduct","addProductWithConfirm","form","className","options","variants","isAvailableForSale"],"mappings":";;AAAA,SAAQA,IAAI,IAAIC,UAAhB,EAA4BC,gBAA5B,QAAmD,QAAnD;AAEA,SAAQC,WAAR,EAAqBC,UAArB,EAAiCC,QAAjC,QAAgD,OAAhD;AACA,SAAQC,MAAR;AACA,SAAQC,WAAR;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAAQC,UAAR;AACA,OAAOC,MAAP;AACA,SAAQC,cAAR;AAGA,OAAO,SAASX,IAAT,CAAcY,KAAd,EAOJ;AACD,QAAMC,OAAO,GAAGT,UAAU,CAACG,WAAD,CAA1B;AACA,QAAM;AAACO,IAAAA;AAAD,MAAMH,cAAc,EAA1B;AACA,QAAM;AAACI,IAAAA;AAAD,MAAWb,gBAAgB,EAAjC;AACA,QAAM;AAAA,OAACc,iBAAD;AAAA,OAAoBC;AAApB,MAA4CZ,QAAQ,CAAC,KAAD,CAA1D;AAEA,QAAMa,QAAQ,GAAGf,WAAW,CAAC,YAAY;AACvC,UAAMgB,gBAAgB,GAAG;AACvBC,MAAAA,MAAM,EAAIR,KAAK,CAACS,OAAN,CAAcD,MADD;AAEvBE,MAAAA,QAAQ,EAAE,CAFa;AAGvBP,MAAAA,MAAM,EAAIA;AAHa,KAAzB;AAMAE,IAAAA,oBAAoB,CAAC,IAAD,CAApB,CAPuC,CASvC;;AACA,QAAGM,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,OAAhC,EACE,MAAMZ,OAAO,CAACa,UAAR,CAAmBP,gBAAnB,CAAN,CADF,KAGE,MAAMN,OAAO,CAACc,qBAAR,CAA8BR,gBAA9B,CAAN;AAEFF,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,GAhB2B,EAgBzB,CAACJ,OAAD,EAAUD,KAAK,CAACS,OAAN,CAAcD,MAAxB,EAAgCL,MAAhC,CAhByB,CAA5B;AAkBA,SAAO,MAAC,UAAD;AAAY,IAAA,SAAS,EAAEP,EAAE,CAACE,MAAM,CAACkB,IAAR,EAAchB,KAAK,CAACiB,SAApB;AAAzB,KACL,MAAC,UAAD;AACE,IAAA,SAAS,EAAC,OADZ;AAEE,IAAA,OAAO,EAAEjB,KAAK,CAACkB,OAFjB;AAGE,IAAA,MAAM,EAAEf,MAHV;AAIE,IAAA,QAAQ,EAAEH,KAAK,CAACmB;AAJlB,IADK,EAQL,MAAC,MAAD;AACE,IAAA,UAAU,EAAC,SADb;AAEE,IAAA,SAAS,EAAC,QAFZ;AAGE,IAAA,SAAS,EAAEf,iBAHb;AAIE,IAAA,QAAQ,EAAE,CAACJ,KAAK,CAACoB,kBAJnB;AAKE,IAAA,KAAK,EAAC,MALR;AAME,IAAA,OAAO,EAAEd;AANX,KAOEJ,CAAC,CAACF,KAAK,CAACoB,kBAAN,GAA2B,UAA3B,GAAwC,SAAzC,CAPH,CARK,CAAP;AAiBD","sourcesContent":["import {Form as FormikForm, useFormikContext} from 'formik'\nimport {Option, Product} from 'components/common/types'\nimport {useCallback, useContext, useState} from 'react'\nimport {Button} from 'components/common/Button'\nimport {CartContext} from 'components/common/CartContext'\nimport cn from 'classnames'\nimport {SizesField} from './SizesField'\nimport styles from './index.css'\nimport {useTranslation} from 'i18n'\nimport {Variant} from 'components/common/types/variant'\n\nexport function Form(props: {\n  className?: string\n  isAvailableForSale: boolean\n  options: Option[]\n  product: Product\n  unavailableOptions: Object\n  variants: {node: Variant}[]\n}) {\n  const cartCtx = useContext(CartContext)\n  const {t} = useTranslation()\n  const {values} = useFormikContext<Record<'Size' | 'Color', string>>()\n  const [isAddToBagLoading, setIsAddToBagLoading] = useState(false)\n\n  const addToBag = useCallback(async () => {\n    const addProductParams = {\n      handle  : props.product.handle,\n      quantity: 1,\n      values  : values,\n    }\n\n    setIsAddToBagLoading(true)\n\n    // Do not show confirmation popup on the cart page\n    if(window.location.pathname === '/cart')\n      await cartCtx.addProduct(addProductParams)\n    else\n      await cartCtx.addProductWithConfirm(addProductParams)\n\n    setIsAddToBagLoading(false)\n  }, [cartCtx, props.product.handle, values])\n\n  return <FormikForm className={cn(styles.form, props.className)}>\n    <SizesField\n      className=\"field\"\n      options={props.options}\n      values={values}\n      variants={props.variants}\n    />\n\n    <Button\n      appearance=\"outline\"\n      className=\"button\"\n      isLoading={isAddToBagLoading}\n      disabled={!props.isAvailableForSale}\n      width=\"flex\"\n      onClick={addToBag}\n    >{t(props.isAvailableForSale ? 'addToBag' : 'soldOut')}</Button>\n  </FormikForm>\n}\n"]},"metadata":{},"sourceType":"module"}