{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { Home as BlogHome } from \"../components/blog/Home\";\nimport getConfig from 'next/config';\nimport { isServer } from \"../components/common/helpers\";\nimport Prismic from 'prismic-javascript';\nimport { prismicClient } from \"../components/common/helpers\";\nimport { Women } from \"../components/home/Women\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nconst blogHost = () => publicRuntimeConfig.NEXT_PUBLIC_BLOG_URL.replace(/https?:\\/\\//, '');\n\nconst Home = props => {\n  if (props.host === blogHost()) return __jsx(BlogHome, props);else return __jsx(Women, props);\n};\n\nHome.getInitialProps = async params => {\n  // Blog and the main app are hosted on different domains\n  if ((isServer() ? params.req.headers.host : location.host) === blogHost()) return await BlogHome.getInitialProps(params);\n  const topPostsResponse = await prismicClient(params.req).query([Prismic.Predicates.at('document.type', 'post'), Prismic.Predicates.at('my.post.is_top', true)], {\n    orderings: '[my.post.date desc]'\n  });\n  return {\n    cmsContent: R.path(['results', '0', 'data'], await prismicClient(params.req).query([Prismic.Predicates.at('document.id', publicRuntimeConfig.NEXT_PUBLIC_PRISMIC_WOMENSHOMEPAGE_ID)], {})),\n    topPosts: R.map(result => R.mergeRight(result.data, {\n      tags: result && result.tags,\n      uid: result.uid\n    }), topPostsResponse.results)\n  };\n};\n\nexport default Home;","map":null,"metadata":{},"sourceType":"module"}