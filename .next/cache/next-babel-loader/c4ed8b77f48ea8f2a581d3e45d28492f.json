{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { Icon } from \"../../Icon\";\nimport styles from \"./index.css\";\nimport { useTranslation } from \"../../../../i18n\"; // How many  % have to scroll down the page to appear \"Back to top\" button.\n\nconst anchorMargin = 20;\nexport function ScrollToTopButton(props) {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const scrollToTopAnchorRef = useRef(null);\n  const {\n    0: isScrollToTopButtonShown,\n    1: setScrollToTopButtonShown\n  } = useState(false);\n  const scrollToTop = useCallback(() => scrollToTopAnchorRef.current.scrollIntoView({\n    behavior: 'smooth'\n  }), []);\n  useEffect(() => {\n    if ('IntersectionObserver' in window) {\n      const scrollToTopAnchorElement = scrollToTopAnchorRef.current;\n      const observer = new IntersectionObserver(entries => setScrollToTopButtonShown(!entries[0].isIntersecting), {\n        rootMargin: `${anchorMargin}% 0% 0% 0%`\n      });\n      observer.observe(scrollToTopAnchorElement);\n      return () => observer.unobserve(scrollToTopAnchorElement);\n    } else {\n      const handleScroll = () => setScrollToTopButtonShown(window.scrollY > anchorMargin * window.innerHeight / 100);\n\n      window.addEventListener('scroll', handleScroll);\n      return () => window.removeEventListener('scroll', handleScroll);\n    }\n  }, []);\n  return __jsx(\"div\", {\n    className: cn(styles.scrollToTopButton, props.className),\n    ref: scrollToTopAnchorRef\n  }, __jsx(\"button\", {\n    className: cn('button', {\n      'is-shown': isScrollToTopButtonShown\n    }),\n    onClick: scrollToTop,\n    title: t('backToTop')\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"scroll-to-top-arrow\"\n  })));\n}\n\n_s(ScrollToTopButton, \"1xQ7Thu55HYFMw/r/K5JKws+r0c=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ScrollToTopButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScrollToTopButton\");","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/Layout/ScrollToTopButton/index.tsx"],"names":["useCallback","useEffect","useRef","useState","cn","Icon","styles","useTranslation","anchorMargin","ScrollToTopButton","props","t","scrollToTopAnchorRef","isScrollToTopButtonShown","setScrollToTopButtonShown","scrollToTop","current","scrollIntoView","behavior","window","scrollToTopAnchorElement","observer","IntersectionObserver","entries","isIntersecting","rootMargin","observe","unobserve","handleScroll","scrollY","innerHeight","addEventListener","removeEventListener","scrollToTopButton","className"],"mappings":";;;;AAAA,SAAQA,WAAR,EAAqBC,SAArB,EAAgCC,MAAhC,EAAwCC,QAAxC,QAAuD,OAAvD;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAAQC,IAAR;AACA,OAAOC,MAAP;AACA,SAAQC,cAAR,2B,CAEA;;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAEJ;AAAA;;AACD,QAAM;AAACC,IAAAA;AAAD,MAAMJ,cAAc,EAA1B;AACA,QAAMK,oBAAoB,GAAGV,MAAM,CAAC,IAAD,CAAnC;AACA,QAAM;AAAA,OAACW,wBAAD;AAAA,OAA2BC;AAA3B,MAAwDX,QAAQ,CAAC,KAAD,CAAtE;AACA,QAAMY,WAAW,GAAGf,WAAW,CAAC,MAAMY,oBAAoB,CAACI,OAArB,CAA6BC,cAA7B,CAA4C;AAACC,IAAAA,QAAQ,EAAE;AAAX,GAA5C,CAAP,EAA0E,EAA1E,CAA/B;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAG,0BAA0BkB,MAA7B,EAAqC;AACnC,YAAMC,wBAAwB,GAAGR,oBAAoB,CAACI,OAAtD;AAEA,YAAMK,QAAQ,GAAG,IAAIC,oBAAJ,CACfC,OAAO,IAAIT,yBAAyB,CAAC,CAACS,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAb,CADrB,EAEf;AAACC,QAAAA,UAAU,EAAG,GAAEjB,YAAa;AAA7B,OAFe,CAAjB;AAKAa,MAAAA,QAAQ,CAACK,OAAT,CAAiBN,wBAAjB;AACA,aAAO,MAAMC,QAAQ,CAACM,SAAT,CAAmBP,wBAAnB,CAAb;AACD,KAVD,MAYI;AACF,YAAMQ,YAAY,GAAG,MAAMd,yBAAyB,CAACK,MAAM,CAACU,OAAP,GAAiBrB,YAAY,GAAGW,MAAM,CAACW,WAAtB,GAAoC,GAAtD,CAApD;;AACAX,MAAAA,MAAM,CAACY,gBAAP,CAAwB,QAAxB,EAAkCH,YAAlC;AACA,aAAO,MAAMT,MAAM,CAACa,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC,CAAb;AACD;AACF,GAlBQ,EAkBN,EAlBM,CAAT;AAoBA,SAAO;AAAK,IAAA,SAAS,EAAExB,EAAE,CAACE,MAAM,CAAC2B,iBAAR,EAA2BvB,KAAK,CAACwB,SAAjC,CAAlB;AAA+D,IAAA,GAAG,EAAEtB;AAApE,KACL;AACE,IAAA,SAAS,EAAER,EAAE,CAAC,QAAD,EAAW;AAAC,kBAAYS;AAAb,KAAX,CADf;AAEE,IAAA,OAAO,EAAEE,WAFX;AAGE,IAAA,KAAK,EAAEJ,CAAC,CAAC,WAAD;AAHV,KAKE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAuB,IAAA,IAAI,EAAC;AAA5B,IALF,CADK,CAAP;AASD;;GArCeF,iB;UAGFF,c;;;KAHEE,iB","sourcesContent":["import {useCallback, useEffect, useRef, useState} from 'react'\nimport cn from 'classnames'\nimport {Icon} from 'components/common/Icon'\nimport styles from './index.css'\nimport {useTranslation} from 'i18n'\n\n// How many  % have to scroll down the page to appear \"Back to top\" button.\nconst anchorMargin = 20\n\nexport function ScrollToTopButton(props: {\n  className?: string\n}) {\n  const {t} = useTranslation()\n  const scrollToTopAnchorRef = useRef(null)\n  const [isScrollToTopButtonShown, setScrollToTopButtonShown] = useState(false)\n  const scrollToTop = useCallback(() => scrollToTopAnchorRef.current.scrollIntoView({behavior: 'smooth'}), [])\n\n  useEffect(() => {\n    if('IntersectionObserver' in window) {\n      const scrollToTopAnchorElement = scrollToTopAnchorRef.current\n\n      const observer = new IntersectionObserver(\n        entries => setScrollToTopButtonShown(!entries[0].isIntersecting),\n        {rootMargin: `${anchorMargin}% 0% 0% 0%`},\n      )\n\n      observer.observe(scrollToTopAnchorElement)\n      return () => observer.unobserve(scrollToTopAnchorElement)\n    }\n\n    else{\n      const handleScroll = () => setScrollToTopButtonShown(window.scrollY > anchorMargin * window.innerHeight / 100)\n      window.addEventListener('scroll', handleScroll)\n      return () => window.removeEventListener('scroll', handleScroll)\n    }\n  }, [])\n\n  return <div className={cn(styles.scrollToTopButton, props.className)} ref={scrollToTopAnchorRef}>\n    <button\n      className={cn('button', {'is-shown': isScrollToTopButtonShown})}\n      onClick={scrollToTop}\n      title={t('backToTop')}\n    >\n      <Icon className=\"icon\" name=\"scroll-to-top-arrow\" />\n    </button>\n  </div>\n}\n"]},"metadata":{},"sourceType":"module"}