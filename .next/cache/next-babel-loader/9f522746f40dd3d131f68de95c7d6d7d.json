{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { contentToSitemapXML, urlToSitemapXMLItem } from \"./common/helpers\";\nimport { nameToHandle, prismicClient } from \"../../../components/common/helpers\";\nimport { createHttpLink } from 'apollo-link-http';\nimport fetch from 'node-fetch';\nimport getConfig from 'next/config';\nimport Prismic from 'prismic-javascript';\nimport ProductsQuery from \"./graphql/products.graphql\";\nimport { vendors } from \"../../../settings/vendors\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst itemsPerPage = 250;\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: createHttpLink({\n    credentials: 'same-origin',\n    fetch: fetch,\n    headers: {\n      // Accept and Content-Type headers are required by Storefront API\n      accept: 'application/json',\n      'content-type': 'application/json',\n      'x-shopify-storefront-access-token': publicRuntimeConfig.NEXT_PUBLIC_SHOPIFY_STOREFRONT_API_TOKEN\n    },\n    uri: publicRuntimeConfig.NEXT_PUBLIC_SHOPIFY_STOREFRONT_API_URL\n  })\n});\n\nasync function productsByGender(gender, lastCursor = null, result = []) {\n  try {\n    const {\n      data\n    } = await client.query({\n      query: ProductsQuery,\n      variables: _objectSpread(_objectSpread({}, lastCursor ? {\n        after: lastCursor\n      } : {}), {}, {\n        first: itemsPerPage,\n        query: `tag:\"${gender}\"`\n      })\n    });\n\n    for (const product of data.products.edges) result.push({\n      date: product.node.updatedAt,\n      gender,\n      handle: product.node.handle,\n      vendorHandle: nameToHandle(product.node.vendor)\n    });\n\n    if (data.products.pageInfo.hasNextPage) result.push(...(await productsByGender(gender, data.products.edges[data.products.edges.length - 1].cursor, result)));\n  } catch (error) {\n    console.error(error);\n  }\n\n  return result;\n}\n\nexport default (async (req, res) => {\n  const products = [...(await productsByGender('men')), ...(await productsByGender('women'))];\n  let productUrls = '';\n\n  for (const product of products) productUrls += urlToSitemapXMLItem({\n    date: product.date,\n    url: `https://cruvoir.com/${product.gender}/shop/item/${product.vendorHandle}/${product.handle}`\n  });\n\n  const featuredMenuPrismicResponse = {\n    men: await prismicClient(null).query([Prismic.Predicates.at('document.type', 'mens_featured_menu')], {}),\n    women: await prismicClient(null).query([Prismic.Predicates.at('document.type', 'womens_featured_menu')], {})\n  };\n  let featureMenuLinks = '';\n\n  for (const gender in featuredMenuPrismicResponse) for (const result of featuredMenuPrismicResponse[gender].results) for (const category in result.data) for (const item of result.data[category]) featureMenuLinks += urlToSitemapXMLItem({\n    url: item.url.url\n  });\n\n  let vendorsLinks = '';\n\n  for (const gender in vendors) for (const vendor of vendors[gender]) vendorsLinks += urlToSitemapXMLItem({\n    url: `https://cruvoir.com/${gender}/shop/collection/${vendor.collection}/category/all/subcategory/all`\n  });\n\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'application/xml');\n  res.end(contentToSitemapXML(featureMenuLinks + productUrls + vendorsLinks));\n});","map":null,"metadata":{},"sourceType":"module"}