{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useCallback } from 'react';\nimport cn from 'classnames';\nimport { NativeSelect } from \"../NativeSelect\";\nimport { useField } from 'formik';\nexport function Select(props) {\n  const [field, meta] = useField(props.name);\n  const isInvalid = meta.error && meta.touched;\n  const onChange = useCallback(event => {\n    field.onChange(event);\n    if (typeof props.onChange === 'function') props.onChange(event);\n  }, [field, props]);\n  return __jsx(NativeSelect, _extends({}, field, {\n    value: field.value || '',\n    className: cn(props.className, {\n      'is-invalid': isInvalid,\n      'is-uppercased': props.isUppercase\n    }),\n    disabled: props.disabled,\n    onChange: onChange,\n    options: props.options,\n    name: props.name,\n    isInvalid: isInvalid,\n    errorMessage: meta.error\n  }));\n}","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/form/Select/index.tsx"],"names":["useCallback","cn","NativeSelect","useField","Select","props","field","meta","name","isInvalid","error","touched","onChange","event","value","className","isUppercase","disabled","options"],"mappings":";;;;;AAAA,SAAqBA,WAArB,QAAuC,OAAvC;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAAQC,YAAR;AACA,SAAQC,QAAR,QAAuB,QAAvB;AAEA,OAAO,SAASC,MAAT,CAAgBC,KAAhB,EAOJ;AACD,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBJ,QAAQ,CAACE,KAAK,CAACG,IAAP,CAA9B;AACA,QAAMC,SAAS,GAAGF,IAAI,CAACG,KAAL,IAAcH,IAAI,CAACI,OAArC;AAEA,QAAMC,QAAQ,GAAGZ,WAAW,CAAEa,KAAD,IAA2C;AACtEP,IAAAA,KAAK,CAACM,QAAN,CAAeC,KAAf;AAEA,QAAG,OAAOR,KAAK,CAACO,QAAb,KAA0B,UAA7B,EACEP,KAAK,CAACO,QAAN,CAAeC,KAAf;AACH,GAL2B,EAKzB,CAACP,KAAD,EAAQD,KAAR,CALyB,CAA5B;AAOA,SAAO,MAAC,YAAD,eACDC,KADC;AAEL,IAAA,KAAK,EAAEA,KAAK,CAACQ,KAAN,IAAe,EAFjB;AAGL,IAAA,SAAS,EAAEb,EAAE,CAACI,KAAK,CAACU,SAAP,EAAkB;AAAC,oBAAcN,SAAf;AAA0B,uBAAiBJ,KAAK,CAACW;AAAjD,KAAlB,CAHR;AAIL,IAAA,QAAQ,EAAEX,KAAK,CAACY,QAJX;AAKL,IAAA,QAAQ,EAAEL,QALL;AAML,IAAA,OAAO,EAAEP,KAAK,CAACa,OANV;AAOL,IAAA,IAAI,EAAEb,KAAK,CAACG,IAPP;AAQL,IAAA,SAAS,EAAEC,SARN;AASL,IAAA,YAAY,EAAEF,IAAI,CAACG;AATd,KAAP;AAWD","sourcesContent":["import {ChangeEvent, useCallback} from 'react'\nimport cn from 'classnames'\nimport {NativeSelect} from '../NativeSelect'\nimport {useField} from 'formik'\n\nexport function Select(props: {\n  className?: string\n  disabled?: boolean\n  name: string\n  onChange?: (event: ChangeEvent<HTMLSelectElement>) => void\n  options: {value: string, label: string}[]\n  isUppercase?: boolean\n}) {\n  const [field, meta] = useField(props.name)\n  const isInvalid = meta.error && meta.touched\n\n  const onChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    field.onChange(event)\n\n    if(typeof props.onChange === 'function')\n      props.onChange(event)\n  }, [field, props])\n\n  return <NativeSelect\n    {...field}\n    value={field.value || ''}\n    className={cn(props.className, {'is-invalid': isInvalid, 'is-uppercased': props.isUppercase})}\n    disabled={props.disabled}\n    onChange={onChange}\n    options={props.options}\n    name={props.name}\n    isInvalid={isInvalid}\n    errorMessage={meta.error}\n  />\n}\n"]},"metadata":{},"sourceType":"module"}