{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as Yup from 'yup';\nimport { useCallback, useEffect, useMemo } from 'react';\nimport cn from 'classnames';\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport getConfig from 'next/config';\nimport { Link } from \"../../Link\";\nimport { Portal } from \"../../Portal\";\nimport styles from \"./index.css\";\nimport { UnderlineWrapper } from \"../../UnderlineWrapper\";\nimport { usePopup } from \"../../hooks\";\nimport { useTranslation } from \"../../../../i18n\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\nexport function NewsletterPopup() {\n  const {\n    t\n  } = useTranslation();\n  const popup = usePopup();\n  const close = useCallback(() => {\n    localStorage.setItem('newsletter-popup', 'disabled');\n    popup.close();\n  }, [popup]);\n  useEffect(() => {\n    if (!localStorage.getItem('newsletter-popup')) setTimeout(popup.show, 10000);\n  }, [popup.show]);\n  const initialValues = useMemo(() => ({\n    email: ''\n  }), []);\n  const subscribeToNewsletter = useCallback(async values => {\n    const response = await (await fetch(`${publicRuntimeConfig.NEXT_PUBLIC_APP_URL}/api/newsletter/subscribe`, {\n      body: JSON.stringify({\n        email: values.email,\n        name: values.name\n      }),\n      headers: {\n        accept: 'application/json'\n      },\n      method: 'POST'\n    })).json();\n    if (response.success) setTimeout(close, 500);\n  }, [close]);\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email().required()\n  });\n  return __jsx(Portal, {\n    selector: \"#portal-root\"\n  }, __jsx(\"div\", {\n    className: cn(styles.newsletterPopup, {\n      'is-shown': popup.isShown\n    })\n  }, __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"h2\", {\n    className: \"title\"\n  }, t('welcomeTo', {\n    projectName: 'Cruvoir'\n  })), __jsx(\"h2\", {\n    className: \"title\"\n  }, t('welcomeToTeaser')), __jsx(\"h3\", {\n    className: \"title\"\n  }, t('informedActivities')), __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: subscribeToNewsletter\n  }, __jsx(Form, {\n    className: \"form\",\n    close: close\n  }))), __jsx(\"p\", {\n    className: \"note\"\n  }, \"By entering your email, you agree to our\", ' ', __jsx(UnderlineWrapper, {\n    className: \"link\",\n    isPermanent: true\n  }, __jsx(Link, {\n    as: \"/privacy-policy\",\n    href: \"/privacy-policy\"\n  }, t('privacyPolicy'))), \".\"), __jsx(\"p\", {\n    className: \"note\"\n  }, __jsx(UnderlineWrapper, {\n    className: \"link\",\n    isPermanent: true\n  }, __jsx(\"a\", {\n    href: \"https://cruvoir.com\"\n  }, t('shopNow').split(' ')[0])), ' ', t('shopNow').split(' ')[1], ' ', \"|\", ' ', t('initialOutlet').split(' ')[0], ' ', __jsx(UnderlineWrapper, {\n    className: \"link\",\n    isPermanent: true\n  }, __jsx(\"a\", {\n    className: \"link\",\n    href: \"https://blog.cruvoir.com\"\n  }, t('initialOutlet').split(' ')[1])), ' ', \"|\", ' ', t('socialNetwork').split(' ')[0], ' ', __jsx(UnderlineWrapper, {\n    className: \"link\",\n    isPermanent: true\n  }, __jsx(\"a\", {\n    className: \"link\",\n    href: \"https://instagram.com/cruvoir/\"\n  }, t('socialNetwork').split(' ')[1]))), __jsx(\"p\", {\n    className: \"note\"\n  }, __jsx(UnderlineWrapper, {\n    className: \"link\",\n    isPermanent: true\n  }, __jsx(\"a\", {\n    className: \"link\",\n    href: \"https://discord.gg/M7qdhnZHMR\"\n  }, \" \", t('discordServer').split(' ')[0])), ' ', t('discordServer').split(' ')[1], ' ', \"|\", ' ', t('scheduleMeeting').split(' ')[0], ' ', t('scheduleMeeting').split(' ')[1], ' ', __jsx(UnderlineWrapper, {\n    className: \"link\",\n    isPermanent: true\n  }, __jsx(\"a\", {\n    className: \"link\",\n    href: \"https://calendly.com/c---31\"\n  }, t('scheduleMeeting').split(' ')[2])))));\n}","map":null,"metadata":{},"sourceType":"module"}