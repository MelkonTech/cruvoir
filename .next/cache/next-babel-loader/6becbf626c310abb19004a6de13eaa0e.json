{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useCallback, useEffect, useMemo, useState } from 'react';\nimport Cookies from 'js-cookie';\nimport moment from 'moment';\nconst ratesUpdatesMinutesInterval = 10;\nexport const CurrencyContext = /*#__PURE__*/createContext({\n  active: null,\n  convert: () => null,\n  rates: null,\n  ratesLastUpdatedAt: null,\n  setActive: () => null,\n  setActivePersistent: () => null,\n  setRates: () => null,\n  setRatesLastUpdatedAt: () => null\n});\nexport function CurrencyContextProvider(props) {\n  _s();\n\n  const {\n    0: active,\n    1: setActive\n  } = useState(props.initialCurrency);\n  const {\n    0: rates,\n    1: setRates\n  } = useState(props.initialCurrency === 'USD' && !props.initialRates ? {\n    CAD: 1,\n    EUR: 1,\n    GBP: 1,\n    USD: 1\n  } : props.initialRates);\n  const {\n    0: ratesLastUpdatedAt,\n    1: setRatesLastUpdatedAt\n  } = useState(props.initialRatesLastUpdatedAt);\n  const setActivePersistent = useCallback(value => {\n    setActive(value);\n    Cookies.set('currency', value);\n  }, [setActive]); // Fetch rates if N minutes were passed since the last update\n\n  useEffect(() => {\n    if (!ratesLastUpdatedAt || moment(ratesLastUpdatedAt, moment.ISO_8601).add(ratesUpdatesMinutesInterval, 'minutes').isBefore(moment())) fetch('https://api.exchangeratesapi.io/latest?base=USD').then(async response => {\n      var _json$rates;\n\n      console.log('Fetching currency rates');\n      const json = await response.json();\n      const newRates = (_json$rates = json.rates) !== null && _json$rates !== void 0 ? _json$rates : {};\n      const newRatesLastUpdatedAt = moment().format();\n      setRates(newRates);\n      setRatesLastUpdatedAt(newRatesLastUpdatedAt); // There is no way the request will be finished during SSR — thus use browser cookies\n\n      Cookies.set('currencyRates', JSON.stringify(newRates));\n      Cookies.set('currencyRatesLastUpdatedAt', newRatesLastUpdatedAt);\n    }).catch(console.error);\n  }, [ratesLastUpdatedAt]);\n  const convert = useCallback(params => params.value / rates[params.from] * rates[params.to], [rates]);\n  const contextObj = useMemo(() => ({\n    active,\n    convert,\n    rates,\n    ratesLastUpdatedAt,\n    setActive,\n    setActivePersistent,\n    setRates,\n    setRatesLastUpdatedAt\n  }), [active, convert, rates, ratesLastUpdatedAt, setActive, setActivePersistent, setRates, setRatesLastUpdatedAt]);\n  return __jsx(CurrencyContext.Provider, {\n    value: contextObj\n  }, props.children);\n}\n\n_s(CurrencyContextProvider, \"ff33uASikhUQYg1FEog402wZ3Cg=\");\n\n_c = CurrencyContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyContextProvider\");","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/CurrencyContext/index.tsx"],"names":["createContext","useCallback","useEffect","useMemo","useState","Cookies","moment","ratesUpdatesMinutesInterval","CurrencyContext","active","convert","rates","ratesLastUpdatedAt","setActive","setActivePersistent","setRates","setRatesLastUpdatedAt","CurrencyContextProvider","props","initialCurrency","initialRates","CAD","EUR","GBP","USD","initialRatesLastUpdatedAt","value","set","ISO_8601","add","isBefore","fetch","then","response","console","log","json","newRates","newRatesLastUpdatedAt","format","JSON","stringify","catch","error","params","from","to","contextObj","children"],"mappings":"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","sourcesContent":["import {createContext, ReactNode, useCallback, useEffect, useMemo, useState} from 'react'\nimport Cookies from 'js-cookie'\nimport {Currency} from 'components/common/types'\nimport moment from 'moment'\nconst ratesUpdatesMinutesInterval = 10\n\ntype CurrencyContextType = {\n  active: Currency\n  convert: (params: {from: Currency, to: Currency, value: number}) => number\n  rates: Record<Currency, number>\n  ratesLastUpdatedAt: string\n  setActive: (active: Currency) => void\n  setActivePersistent: (active: Currency) => void\n  setRates: (rates: Record<Currency, number>) => void\n  setRatesLastUpdatedAt: (ratesLastUpdatedAt: string) => void\n}\n\nexport const CurrencyContext = createContext<CurrencyContextType>({\n  active               : null,\n  convert              : () => null,\n  rates                : null,\n  ratesLastUpdatedAt   : null,\n  setActive            : () => null,\n  setActivePersistent  : () => null,\n  setRates             : () => null,\n  setRatesLastUpdatedAt: () => null,\n})\n\nexport function CurrencyContextProvider(props: {\n  children: ReactNode\n  initialCurrency: Currency\n  initialRates: Record<Currency, number>\n  initialRatesLastUpdatedAt: string\n}) {\n  const [active, setActive] = useState<Currency>(props.initialCurrency)\n\n  const [rates, setRates] = useState<Record<Currency, number>>(\n    props.initialCurrency === 'USD' && !props.initialRates\n      ? {CAD: 1, EUR: 1, GBP: 1, USD: 1}\n      : props.initialRates,\n  )\n\n  const [ratesLastUpdatedAt, setRatesLastUpdatedAt] = useState<string>(props.initialRatesLastUpdatedAt)\n\n  const setActivePersistent = useCallback((value: Currency) => {\n    setActive(value)\n    Cookies.set('currency', value)\n  }, [setActive])\n\n  // Fetch rates if N minutes were passed since the last update\n  useEffect(() => {\n    if(\n      !ratesLastUpdatedAt || moment(ratesLastUpdatedAt, moment.ISO_8601)\n        .add(ratesUpdatesMinutesInterval, 'minutes').isBefore(moment())\n    )\n      fetch('https://api.exchangeratesapi.io/latest?base=USD')\n        .then(async response => {\n          console.log('Fetching currency rates')\n          const json = await response.json()\n          const newRates = json.rates ?? {}\n          const newRatesLastUpdatedAt = moment().format()\n          setRates(newRates)\n          setRatesLastUpdatedAt(newRatesLastUpdatedAt)\n\n          // There is no way the request will be finished during SSR — thus use browser cookies\n          Cookies.set('currencyRates', JSON.stringify(newRates))\n          Cookies.set('currencyRatesLastUpdatedAt', newRatesLastUpdatedAt)\n        })\n\n        .catch(console.error)\n  }, [ratesLastUpdatedAt])\n\n  const convert = useCallback(\n    params => params.value / rates[params.from] * rates[params.to],\n    [rates],\n  )\n\n  const contextObj = useMemo(\n    () => ({\n      active,\n      convert,\n      rates,\n      ratesLastUpdatedAt,\n      setActive,\n      setActivePersistent,\n      setRates,\n      setRatesLastUpdatedAt,\n    }),\n\n    [\n      active,\n      convert,\n      rates,\n      ratesLastUpdatedAt,\n      setActive,\n      setActivePersistent,\n      setRates,\n      setRatesLastUpdatedAt,\n    ],\n  )\n\n  return <CurrencyContext.Provider value={contextObj}>{props.children}</CurrencyContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}