{"ast":null,"code":"import * as R from 'ramda';\nimport { contentToSitemapXML, urlToSitemapXMLItem } from \"./common/helpers\";\nimport Prismic from 'prismic-javascript';\nimport { prismicClient } from \"../../../components/common/helpers\";\nconst itemsPerPage = 100;\n\nasync function blogPostUIDs() {\n  const response = await prismicClient(null).query([Prismic.Predicates.at('document.type', 'post')], {\n    pageSize: itemsPerPage\n  });\n  let result = [];\n\n  for (const post of response.results) result.push(post);\n\n  if (response.total_pages > 1) {\n    const data = await Promise.allSettled([...R.times(R.identity, response.total_pages - 1).map(idx => prismicClient(null).query([Prismic.Predicates.at('document.type', 'post')], // Do not take the result of an existing first page.\n    {\n      page: idx + 2,\n      pageSize: itemsPerPage\n    }))]);\n\n    for (const idx in data) if (data[idx].status === 'fulfilled') // @ts-ignore\n      for (const post of data[idx].value.results) result.push(post);\n  }\n\n  return result.map(({\n    last_publication_date: date,\n    uid\n  }) => ({\n    date,\n    uid\n  }));\n}\n\nexport default (async (req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'application/xml');\n  res.end(contentToSitemapXML((await blogPostUIDs()).map(({\n    date,\n    uid\n  }) => urlToSitemapXMLItem({\n    date,\n    url: `https://blog.cruvoir.com/${uid}`\n  })).join('')));\n});","map":null,"metadata":{},"sourceType":"module"}