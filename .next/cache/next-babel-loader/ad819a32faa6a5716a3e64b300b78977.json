{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport * as Yup from 'yup';\nimport { useCallback, useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport CompleteCheckout from \"./graphql/complete-checkout.graphql\";\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport moment from 'moment';\nimport { Portal } from \"../../../common/Portal\";\nimport styles from \"./index.css\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { useTranslation } from \"../../../../i18n\";\nexport function PayWithCard(props) {\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const [completeCheckout] = useMutation(CompleteCheckout);\n  const initialValues = useMemo(() => ({\n    firstName: props.shippingAddress.firstName,\n    lastName: props.shippingAddress.lastName\n  }), [props.shippingAddress.firstName, props.shippingAddress.lastName]);\n  const pay = useCallback(async values => {\n    setError(null); // Create the payment session (payment intent in terms of Stripe)\n\n    const paymentSessionId = R.propOr(null, 'paymentSessionId', await (await fetch('/api/payment/create', {\n      body: JSON.stringify({\n        amount: props.total,\n        checkoutId: props.checkoutId,\n        creditCard: {\n          first_name: values.firstName,\n          last_name: values.lastName,\n          month: values.expiry.split('/')[0].trim(),\n          number: values.number.replace(/\\s+/gi, ''),\n          verification_value: values.cvc,\n          year: values.expiry.split('/')[1].trim()\n        }\n      }),\n      headers: {\n        accept: 'application/json',\n        'content-type': 'application/json'\n      },\n      method: 'POST'\n    })).json());\n\n    if (!paymentSessionId) {\n      setError('Error while processing the payment. Please check the card details or try again later.');\n      return;\n    }\n\n    const completeCheckoutResponse = await completeCheckout({\n      variables: {\n        checkoutId: props.checkoutId,\n        payment: {\n          billingAddress: {\n            address1: props.shippingAddress.address1,\n            city: props.shippingAddress.city,\n            country: props.shippingAddress.country,\n            firstName: props.shippingAddress.firstName,\n            lastName: props.shippingAddress.lastName,\n            province: props.shippingAddress.province,\n            zip: props.shippingAddress.zip\n          },\n          idempotencyKey: moment().valueOf().toString(),\n          paymentAmount: {\n            amount: props.total,\n            currencyCode: 'USD'\n          },\n          paymentData: paymentSessionId,\n          type: 'VAULT'\n        }\n      }\n    });\n\n    if (!R.path(['data', 'checkoutCompleteWithTokenizedPaymentV3', 'payment', 'id'], completeCheckoutResponse)) {\n      setError(R.path(['data', 'checkoutCompleteWithTokenizedPaymentV3', 'checkoutUserErrors', '0', 'message'], completeCheckoutResponse));\n      return;\n    }\n\n    props.popup.hide();\n    props.onSuccess(paymentSessionId);\n  }, [completeCheckout, props]);\n  const validationSchema = Yup.object().shape({\n    cvc: Yup.string().length(3).required(),\n    expiry: Yup.string().length(7).required(),\n    firstName: Yup.string().required(),\n    lastName: Yup.string().required(),\n    number: Yup.string().min(14).required()\n  });\n  return __jsx(Portal, {\n    selector: \"#portal-root\"\n  }, __jsx(\"div\", {\n    className: cn(styles.paywithcardPopup, {\n      'is-shown': props.popup.isShown\n    })\n  }, __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"h2\", {\n    className: \"title\"\n  }, t('paymentDetails')), __jsx(\"div\", {\n    style: {\n      color: 'red',\n      fontSize: 12,\n      marginBottom: 8,\n      textAlign: 'center'\n    }\n  }, error), __jsx(Formik, {\n    initialValues: initialValues,\n    isInitialValid: false,\n    validationSchema: validationSchema,\n    onSubmit: pay\n  }, __jsx(Form, {\n    className: \"form\",\n    close: props.popup.hide,\n    shippingFirstName: props.shippingAddress.firstName,\n    shippingLastName: props.shippingAddress.lastName\n  }))), __jsx(\"button\", {\n    className: \"close-button\",\n    onClick: props.popup.hide,\n    type: \"button\"\n  }, t('cancel'))));\n}","map":null,"metadata":{},"sourceType":"module"}