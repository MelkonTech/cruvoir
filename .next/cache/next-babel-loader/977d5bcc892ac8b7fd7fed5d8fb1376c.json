{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as R from 'ramda';\nimport * as Yup from 'yup';\nimport { useCallback, useContext, useState } from 'react';\nimport { AuthModal } from \"../common/AuthModal\";\nimport { AuthModalContext } from \"../../common/AuthModalContext\";\nimport { Button } from \"../../common/Button\";\nimport cn from 'classnames';\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport SignUpMutation from \"./graphql/signup.graphql\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { useTranslation } from \"../../../i18n\";\nexport function SignUp() {\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: signUpErrors,\n    1: setSignUpErrors\n  } = useState([]);\n  const {\n    0: isSignUpDone,\n    1: setIsSignUpDone\n  } = useState(false);\n  const authModalCtx = useContext(AuthModalContext);\n  const close = useCallback(() => authModalCtx.setActive(null), [authModalCtx]);\n  const showSignIn = useCallback(() => authModalCtx.setActive('signin'), [authModalCtx]);\n  const [signup] = useMutation(SignUpMutation);\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email().required(),\n    password: Yup.string().required(),\n    password2: Yup.string().required().oneOf([Yup.ref('password'), null], t('passwordsMustMatch'))\n  });\n  const initialValues = {\n    acceptsMarketing: false,\n    email: '',\n    firstName: '',\n    lastName: '',\n    password: '',\n    password2: '',\n    phone: ''\n  };\n  const submit = useCallback(async (values, actions) => {\n    try {\n      const r = await signup({\n        variables: {\n          input: _objectSpread({\n            acceptsMarketing: values.acceptsMarketing,\n            email: values.email,\n            firstName: values.firstName,\n            lastName: values.lastName,\n            password: values.password\n          }, values.phone ? {\n            phone: values.phone\n          } : {})\n        }\n      });\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['customerUserErrors']))(r.data.customerCreate);\n      if (R.length(errors)) return setSignUpErrors(errors);\n      actions.resetForm();\n      return setIsSignUpDone(true);\n    } catch (e) {\n      return setSignUpErrors([t('signUpFailed')]);\n    }\n  }, [signup, t]);\n  return __jsx(AuthModal, {\n    close: close\n  }, __jsx(\"div\", {\n    className: \"header\"\n  }, __jsx(\"button\", {\n    onClick: showSignIn,\n    className: \"button\"\n  }, t('signIn')), __jsx(\"button\", {\n    className: cn('button', 'is-selected')\n  }, t('signUp'))), __jsx(\"div\", {\n    className: \"content\"\n  }, isSignUpDone ? __jsx(\"div\", {\n    className: \"form\"\n  }, __jsx(\"div\", {\n    className: \"note span--2\"\n  }, t('signUpDone')), __jsx(Button, {\n    className: \"button span--2\",\n    onClick: showSignIn,\n    width: \"flex\"\n  }, t('signIn'))) : __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: submit\n  }, __jsx(Form, {\n    errorMessages: signUpErrors\n  })), __jsx(\"button\", {\n    className: \"close-button\",\n    onClick: close,\n    type: \"button\"\n  }, t('cancel'))));\n}","map":null,"metadata":{},"sourceType":"module"}