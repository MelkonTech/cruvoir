{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { FacebookShareButton, PinterestShareButton, TwitterShareButton } from 'react-share';\nimport { Form as FormikForm, useFormikContext } from 'formik';\nimport { nameToHandle, translatedProductDescription, translatedProductTitle } from \"../../../common/helpers\";\nimport { useCallback, useContext, useEffect, useState } from 'react';\nimport { Button } from \"../../../common/Button\";\nimport { CartContext } from \"../../../common/CartContext\";\nimport cn from 'classnames';\nimport getConfig from 'next/config';\nimport { Icon } from \"../../../common/Icon\";\nimport { PriceWithCompareAt } from \"../../../common/PriceWithCompareAt\";\nimport sanitizeHtml from 'sanitize-html';\nimport { SizeField } from \"./SizeField\";\nimport styles from \"./index.css\";\nimport { useTranslation } from \"../../../../i18n\";\nimport { WishButton } from \"../../../common/WishButton\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\nexport function Form(props) {\n  const cartCtx = useContext(CartContext);\n  const {\n    values\n  } = useFormikContext();\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const sharingTitle = `${props.product.title} by ${props.product.vendor}`;\n  const {\n    0: isAddToBagLoading,\n    1: setIsAddToBagLoading\n  } = useState(false);\n  const sharingURL = R.join('/', [publicRuntimeConfig.NEXT_PUBLIC_APP_URL, props.gender.toLowerCase(), 'shop/item', nameToHandle(props.product.vendor), props.product.handle]);\n  const addToBag = useCallback(async () => {\n    setIsAddToBagLoading(true);\n    await cartCtx.addProductWithConfirm({\n      handle: props.product.handle,\n      quantity: 1,\n      values\n    });\n    setIsAddToBagLoading(false);\n  }, [cartCtx, props.product.handle, values]);\n  useEffect(() => {\n    cartCtx.fetchInventoryQuantityOfProducts([props.product.id]);\n  }, // Fetching invtory quanity while update cart context object â€” avoid infinite loop\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [props.product]);\n  return __jsx(FormikForm, {\n    className: cn(styles.form, props.className)\n  }, __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"p\", {\n    className: \"vendor\"\n  }, props.product.vendor), __jsx(\"h1\", {\n    className: \"title\"\n  }, translatedProductTitle({\n    i18n,\n    product: props.product,\n    t\n  })), __jsx(PriceWithCompareAt, {\n    className: \"price\",\n    compareAtPrice: R.path(['amount'], props.compareAtPrice),\n    hasPercent: true,\n    price: Number(R.path(['amount'], props.price))\n  }), __jsx(\"hr\", {\n    className: \"divider\"\n  }), __jsx(\"div\", {\n    className: \"share\"\n  }, __jsx(FacebookShareButton, {\n    className: \"button\",\n    quote: sharingTitle,\n    url: sharingURL\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"facebook\"\n  })), __jsx(PinterestShareButton, {\n    className: \"button\",\n    description: sharingTitle,\n    media: props.featuredImage ? props.featuredImage.originalSrc : '',\n    url: sharingURL\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"pinterest\"\n  })), __jsx(TwitterShareButton, {\n    className: \"button\",\n    title: sharingTitle,\n    url: sharingURL\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"twitter\"\n  }))), __jsx(\"hr\", {\n    className: \"divider\"\n  }), __jsx(\"div\", {\n    className: \"description\",\n    dangerouslySetInnerHTML: {\n      __html: sanitizeHtml(translatedProductDescription({\n        i18n,\n        product: props.product,\n        t\n      }), {\n        allowedTags: sanitizeHtml.defaults.allowedTags.concat(['dl', 'dt', 'dd'])\n      })\n    }\n  }), __jsx(WishButton, {\n    className: \"wish\",\n    productId: props.product.id\n  })), __jsx(\"div\", {\n    className: \"actions\"\n  }, R.map(option => __jsx(SizeField, {\n    className: \"field\",\n    key: option.name,\n    option: option,\n    unavailableOptions: props.unavailableOptions[option.name] || []\n  }), props.options), __jsx(Button, _extends({\n    disabled: !props.isAvailableForSale,\n    className: \"button\",\n    isLoading: isAddToBagLoading,\n    onClick: addToBag,\n    width: \"flex\"\n  }, props.isAvailableForSale && {\n    icon: 'cart'\n  }), t(props.isAvailableForSale ? 'addToBag' : 'soldOut'))));\n}","map":null,"metadata":{},"sourceType":"module"}