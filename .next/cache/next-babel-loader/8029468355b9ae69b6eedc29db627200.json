{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as R from 'ramda';\nimport { Fragment, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { Form as FormikForm, useFormikContext } from 'formik';\nimport { Input, Radio, Select } from \"../../../common/form\";\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { Button } from \"../../../common/Button\";\nimport cn from 'classnames';\nimport { ConvertCurrency } from \"../../../common/ConvertCurrency\";\nimport { CurrencyContext } from \"../../../common/CurrencyContext\";\nimport CustomerAddressesQuery from \"../graphql/customer-addresses.graphql\";\nimport { Loading } from \"../../../common/Loading\";\nimport { PriceWithCompareAt } from \"../../../common/PriceWithCompareAt\";\nimport UpdateAddress from \"../graphql/update-address.graphql\";\nimport UpdateEmail from \"../graphql/update-email.graphql\";\nimport UpdateShippingLine from \"../graphql/update-shipping-line.graphql\";\nimport { useRouter } from 'next/router';\nimport { useShippingLocations } from \"../../../common/hooks/use-shipping-locations\";\nimport { useTranslation } from \"../../../../i18n\";\nexport function Form(props) {\n  const currencyCtx = useContext(CurrencyContext);\n  const startPolling = props.startPolling;\n  const stopPolling = props.stopPolling;\n  const refetch = props.refetch;\n  const {\n    data: addressesData\n  } = useQuery(CustomerAddressesQuery, {\n    skip: !props.userToken,\n    variables: {\n      customerAccessToken: props.userToken\n    }\n  });\n  const {\n    0: shippingLineError,\n    1: setShippingLineError\n  } = useState('');\n  const {\n    resetForm,\n    setValues,\n    setFieldError,\n    setFieldValue,\n    setFieldTouched,\n    setTouched,\n    submitForm,\n    values,\n    isValid,\n    isSubmitting\n  } = useFormikContext();\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: usePredefinedAddress,\n    1: setUsePredefinedAddress\n  } = useState(false);\n  const [updateAddress] = useMutation(UpdateAddress);\n  const [updateEmail] = useMutation(UpdateEmail);\n  const [updateShippingLine] = useMutation(UpdateShippingLine);\n  const clearProvince = useCallback(() => setFieldValue('province', ''), [setFieldValue]);\n  const {\n    currentCountry\n  } = useShippingLocations(props.countries, values.country);\n  const countriesOptions = useMemo(() => R.compose(R.prepend({\n    label: '',\n    value: ''\n  }), R.map(c => ({\n    label: c.name,\n    value: c.code\n  })))(props.countries || []), [props.countries]);\n  const provincesOptions = useMemo(() => R.compose(R.prepend({\n    label: '',\n    value: ''\n  }), R.map(p => ({\n    label: p.name,\n    value: p.code\n  })))(R.pathOr([], ['provinces'], currentCountry)), [currentCountry]);\n  const customerAddresses = useMemo(() => R.compose(R.pluck('node'), R.pathOr([], ['customer', 'addresses', 'edges']))(addressesData), [addressesData]);\n  const customerAddressesOptions = useMemo(() => R.compose(R.prepend({\n    label: 'Enter new address',\n    value: ''\n  }), R.map(item => ({\n    label: R.join(', ', item.formatted),\n    value: item.id\n  })))(customerAddresses), [customerAddresses]); // Checkouts may have asynchronous operations that can take time to finish. If you want to complete a checkout or ensure\n  // all the fields are populated and up to date, polling is required until the value is true.\n\n  const isShippingRatesReady = useMemo(() => R.pathOr(false, ['ready'], props.availableShippingRates), [props.availableShippingRates]);\n  const {\n    0: isWaitingForRates,\n    1: setIsWaitingForRates\n  } = useState(false);\n  useEffect(() => {\n    if (!isShippingRatesReady && isWaitingForRates) startPolling(100);else if (isShippingRatesReady && isWaitingForRates) {\n      setIsWaitingForRates(false);\n      stopPolling();\n    }\n  }, [isShippingRatesReady, isWaitingForRates, startPolling, stopPolling]);\n  const {\n    0: isAddressApplying,\n    1: setAddressApplying\n  } = useState(false);\n  const addressFromValues = useCallback(R.compose(R.join(', '), R.values, R.pick(['address1', 'city', 'province', 'zip', 'country'])), []);\n  const shippingRates = useMemo(() => R.pathOr([], ['shippingRates'], props.availableShippingRates), [props.availableShippingRates]);\n  const {\n    0: appliedAddress,\n    1: setAppliedAddress\n  } = useState(R.isEmpty(shippingRates) ? '' : addressFromValues(values));\n  const applyAddress = useCallback(async address => {\n    setAddressApplying(true);\n    let updateAddressResponse;\n    let updateEmailResponse;\n\n    try {\n      updateAddressResponse = await updateAddress({\n        variables: {\n          checkoutId: props.checkoutId,\n          shippingAddress: R.pick(['address1', 'address2', 'city', 'country', 'firstName', 'lastName', 'phone', 'province', 'zip'], address)\n        }\n      }); // Email is required for the completion of a checkout\n\n      updateEmailResponse = await updateEmail({\n        variables: {\n          checkoutId: props.checkoutId,\n          email: address.email\n        }\n      });\n    } catch (e) {\n      setShippingLineError(t('shippingLineUnexpectedError'));\n    }\n\n    const errors = R.compose(R.flatten, R.pluck('checkoutUserErrors'))([updateAddressResponse.data.checkoutShippingAddressUpdateV2, updateEmailResponse.data.checkoutEmailUpdateV2]);\n\n    if (!R.isEmpty(errors)) {\n      R.forEach(err => {\n        setFieldTouched(err.field[1] || err.field[0], true, false);\n        setFieldError(err.field[1] || err.field[0], err.message);\n      }, errors);\n      setAddressApplying(false);\n      return;\n    }\n\n    await refetch();\n    setIsWaitingForRates(true);\n    setTouched({});\n    setAddressApplying(false);\n    setAppliedAddress(addressFromValues(address));\n  }, [addressFromValues, props.checkoutId, refetch, setAppliedAddress, setFieldError, setFieldTouched, setTouched, t, updateAddress, updateEmail]);\n  const {\n    0: isShippingRateApplying,\n    1: setIsShippingRateApplying\n  } = useState(false);\n  const applyShippingRate = useCallback(async event => {\n    setIsShippingRateApplying(true);\n    let r;\n\n    try {\n      r = await updateShippingLine({\n        variables: {\n          checkoutId: props.checkoutId,\n          shippingRateHandle: event.currentTarget.value\n        }\n      });\n    } catch (e) {\n      setShippingLineError(t('shippingLineUnexpectedError'));\n    }\n\n    const errors = R.pathOr([], ['checkoutUserErrors'], r.data.checkoutShippingAddressUpdateV2);\n\n    if (!R.isEmpty(errors)) {\n      R.forEach(err => {\n        setFieldTouched(err.field[1], true, false);\n        setFieldError(err.field[1], err.message);\n      }, errors);\n      setIsShippingRateApplying(false);\n      return;\n    }\n\n    await refetch();\n    setIsWaitingForRates(true);\n    setIsShippingRateApplying(false);\n  }, [props.checkoutId, refetch, setFieldError, setFieldTouched, t, updateShippingLine]);\n  const selectAddress = useCallback(async event => {\n    setUsePredefinedAddress(!!event.currentTarget.value);\n\n    if (!event.currentTarget.value) {\n      resetForm();\n      return;\n    }\n\n    const newAddress = R.find(R.propEq('id', event.currentTarget.value), customerAddresses);\n\n    const newValues = _objectSpread(_objectSpread(_objectSpread({}, values), {}, {\n      predefinedAddress: event.currentTarget.value\n    }, newAddress), {\n      country: R.find(R.propEq('label', newAddress.country), countriesOptions).value,\n      province: R.find(R.propEq('name', newAddress.province), R.find(R.propEq('name', newAddress.country), props.countries || []).provinces).code\n    });\n\n    setValues(newValues);\n    await applyAddress(newValues);\n  }, [applyAddress, countriesOptions, customerAddresses, props.countries, resetForm, setValues, values]);\n  useEffect(() => {\n    if (!appliedAddress) setAppliedAddress(addressFromValues(values));\n  }, [addressFromValues, appliedAddress, setAppliedAddress, values]);\n  const isShippingSelected = Boolean(R.prop('shippingLine', values));\n  const router = useRouter();\n  const goBack = props.goBack;\n  const goNext = props.goNext;\n  const goToShopping = useCallback(() => router.push( // eslint-disable-next-line max-len\n  `/[gender]/shop/collection/[collection]/category/[category]/subcategory/[subcategory]?category=all&collection=all&gender=${props.gender}&subcategory=all`, `/${props.gender}/shop/collection/all/category/all/subcategory/all`), [props.gender, router]);\n  const buttonOptions = useMemo(() => ({\n    back: [{\n      callback: goToShopping,\n      isDisabled: props.promoCodeLoading,\n      isLoading: false,\n      label: t('continueShopping')\n    }, {\n      callback: () => {},\n      isDisabled: !isValid || isSubmitting || isAddressApplying,\n      isLoading: false,\n      label: t('cancel')\n    }, {\n      callback: () => {},\n      isDisabled: isShippingRateApplying,\n      isLoading: false,\n      label: t('backToShippingAddress')\n    }, {\n      callback: () => {},\n      isDisabled: false,\n      isLoading: false,\n      label: t('backToShippingMethod')\n    }],\n    next: [{\n      callback: () => {},\n      isDisabled: props.promoCodeLoading,\n      isLoading: false,\n      label: t('proceedToCheckout')\n    }, {\n      callback: () => applyAddress(values),\n      isDisabled: !isValid || isSubmitting || isAddressApplying,\n      isLoading: isAddressApplying,\n      label: t('applyShippingAddress')\n    }, {\n      callback: () => {},\n      isDisabled: isShippingRateApplying || !values.shippingLine,\n      isLoading: isShippingRateApplying,\n      label: t('applyShippingMethod')\n    }, {\n      callback: submitForm,\n      isDisabled: !isValid || !isShippingSelected || isSubmitting,\n      isLoading: isSubmitting,\n      label: `${t('confirmAndPay')}`\n    }]\n  }), [applyAddress, goToShopping, isAddressApplying, isValid, isShippingRateApplying, isShippingSelected, isSubmitting, props.promoCodeLoading, submitForm, t, values]);\n  const clickGoBackButton = useCallback(() => {\n    goBack(buttonOptions.back[props.step].callback);\n  }, [buttonOptions.back, goBack, props.step]);\n  const clickGoNextButton = useCallback(() => {\n    goNext(buttonOptions.next[props.step].callback);\n  }, [buttonOptions.next, goNext, props.step]);\n  return __jsx(FormikForm, {\n    className: props.className\n  }, __jsx(\"div\", {\n    className: cn('shipping-addresss-section', {\n      'is-form-shown': props.step === 1,\n      'is-shown': props.step > 0\n    })\n  }, __jsx(\"div\", {\n    className: \"divider\"\n  }), __jsx(\"div\", {\n    className: \"label\"\n  }, t('shippingAddress'), \":\"), __jsx(\"div\", {\n    className: \"value\"\n  }, appliedAddress), __jsx(\"div\", {\n    className: \"form\"\n  }, __jsx(Select, {\n    className: \"field span--2\",\n    onChange: selectAddress,\n    name: \"predefinedAddress\",\n    options: customerAddressesOptions\n  }), __jsx(Select, {\n    className: \"field span--1\",\n    disabled: usePredefinedAddress,\n    onChange: clearProvince,\n    name: \"country\",\n    options: countriesOptions\n  }), __jsx(Input, {\n    className: \"field span--1\",\n    name: \"email\",\n    placeholder: \"Email\",\n    type: \"text\"\n  }), __jsx(Input, {\n    className: \"field span--1\",\n    disabled: usePredefinedAddress,\n    name: \"firstName\",\n    placeholder: t('firstName'),\n    type: \"text\"\n  }), __jsx(Input, {\n    className: \"field span--1\",\n    disabled: usePredefinedAddress,\n    name: \"lastName\",\n    placeholder: t('lastName'),\n    type: \"text\"\n  }), __jsx(Input, {\n    className: \"field span--1\",\n    disabled: usePredefinedAddress,\n    name: \"address1\",\n    placeholder: `${t('address')} 1`,\n    type: \"text\"\n  }), __jsx(Input, {\n    className: \"field span--1\",\n    disabled: usePredefinedAddress,\n    name: \"address2\",\n    placeholder: `${t('address')} 2`,\n    type: \"text\"\n  }), __jsx(Input, {\n    className: \"field span--1\",\n    disabled: usePredefinedAddress,\n    name: \"city\",\n    placeholder: t('city'),\n    type: \"text\"\n  }), __jsx(Select, {\n    className: \"field span--1\",\n    disabled: usePredefinedAddress,\n    name: \"province\",\n    options: provincesOptions\n  }), __jsx(Input, {\n    className: \"field span--1\",\n    disabled: usePredefinedAddress,\n    name: \"zip\",\n    placeholder: t('zip'),\n    type: \"text\"\n  }), __jsx(Input, {\n    className: \"field span--1\",\n    disabled: usePredefinedAddress,\n    name: \"phone\",\n    placeholder: `${t('phone')} +16135551111`,\n    type: \"text\"\n  }))), __jsx(\"div\", {\n    className: cn('shipping-method-section', {\n      'is-form-shown': props.step === 2,\n      'is-shown': props.step > 1\n    })\n  }, __jsx(\"div\", {\n    className: \"divider\"\n  }), __jsx(\"div\", {\n    className: \"label\"\n  }, t('shippingMethod'), \":\"), __jsx(PriceWithCompareAt, {\n    className: \"value\",\n    price: props.shippingCost\n  }), __jsx(\"div\", {\n    className: \"form\"\n  }, __jsx(Loading, {\n    isShown: isWaitingForRates\n  }), shippingLineError && __jsx(\"div\", {\n    className: \"error-message span--2\"\n  }, shippingLineError), R.map(rate => __jsx(\"div\", {\n    key: rate.handle,\n    className: \"field span--2\"\n  }, __jsx(Radio, {\n    caption: __jsx(Fragment, null, rate.title, ' - ', __jsx(ConvertCurrency, {\n      from: \"USD\",\n      to: currencyCtx.active\n    }, Number(rate.priceV2.amount))),\n    name: \"shippingLine\",\n    onChange: applyShippingRate,\n    value: rate.handle\n  })), shippingRates))), __jsx(\"div\", {\n    className: cn('total-section', {\n      'is-shown': props.step > 2\n    })\n  }, __jsx(\"div\", {\n    className: \"divider\"\n  }), __jsx(\"div\", {\n    className: \"label\"\n  }, t('orderTotal'), \":\"), __jsx(PriceWithCompareAt, {\n    className: \"value\",\n    price: props.total\n  })), __jsx(\"div\", {\n    className: \"action-buttons\"\n  }, __jsx(Button, {\n    appearance: \"outline\",\n    className: \"button\",\n    disabled: buttonOptions.back[props.step].isDisabled,\n    isLoading: buttonOptions.back[props.step].isLoading,\n    onClick: clickGoBackButton,\n    width: \"flex\"\n  }, buttonOptions.back[props.step].label), __jsx(Button, {\n    className: \"button\",\n    disabled: buttonOptions.next[props.step].isDisabled,\n    isLoading: buttonOptions.next[props.step].isLoading,\n    onClick: clickGoNextButton,\n    width: \"flex\"\n  }, buttonOptions.next[props.step].label)));\n}","map":null,"metadata":{},"sourceType":"module"}