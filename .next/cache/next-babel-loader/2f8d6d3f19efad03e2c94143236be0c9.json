{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport * as Yup from 'yup';\nimport { useCallback, useContext, useState } from 'react';\nimport { AuthModal } from \"../common/AuthModal\";\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport { Layout } from \"../../common/Layout\";\nimport ResetMutation from \"./graphql/reset.graphql\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { UserContext } from \"../../common/UserContext\";\nimport { useRouter } from 'next/router';\nimport { useTranslation } from \"../../../i18n\";\nexport function ResetPassword(props) {\n  const router = useRouter();\n  const {\n    t\n  } = useTranslation();\n  const [reset] = useMutation(ResetMutation);\n  const {\n    0: submitErrors,\n    1: setSubmitErrors\n  } = useState([]);\n  const userCtx = useContext(UserContext);\n  const close = useCallback(() => router.push('/'), [router]);\n  const submit = useCallback(async (values, actions) => {\n    try {\n      const r = await reset({\n        variables: {\n          password: values.password,\n          resetUrl: `https://cruvoir.com${props.asPath}`\n        }\n      });\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['customerUserErrors']))(r.data.customerResetByUrl);\n      if (R.length(errors)) return setSubmitErrors(errors);\n      userCtx.saveToken({\n        expiresAt: new Date(r.data.customerResetByUrl.customerAccessToken.expiresAt),\n        token: r.data.customerResetByUrl.customerAccessToken.accessToken\n      });\n      actions.resetForm();\n      await close();\n    } catch (e) {\n      console.error(e);\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['graphQLErrors']))(e);\n      setSubmitErrors(errors || [t('recoverFailed')]);\n    }\n  }, [close, props.asPath, reset, t, userCtx]);\n  const initialValues = {\n    password: '',\n    password2: ''\n  };\n  const validationSchema = Yup.object().shape({\n    password: Yup.string().required(),\n    password2: Yup.string().required().oneOf([Yup.ref('password'), null], t('passwordsMustMatch'))\n  });\n  return __jsx(Layout, null, __jsx(AuthModal, {\n    close: close\n  }, __jsx(\"div\", {\n    className: \"header\"\n  }, __jsx(\"h2\", {\n    className: \"title\"\n  }, t('resetYourPassword'))), __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: submit\n  }, __jsx(Form, {\n    errorMessages: submitErrors\n  })), __jsx(\"button\", {\n    className: \"close-button\",\n    onClick: close,\n    type: \"button\"\n  }, t('cancel')))));\n}","map":null,"metadata":{},"sourceType":"module"}