{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { useContext, useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport { ProductsSlider } from \"../ProductsSlider\";\nimport { RecentContext } from \"../RecentContext\";\nimport RecommendationsQuery from \"../graphql/recommendations.graphql\";\nimport { Tabs } from \"../Tabs\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { useTranslation } from \"../../../i18n\";\nexport function Suggestions(props) {\n  const {\n    t\n  } = useTranslation();\n  const recentCtx = useContext(RecentContext);\n  const {\n    0: activeTab,\n    1: setActiveTab\n  } = useState('suggestions');\n  const {\n    data: recommendationsData,\n    loading: recommendationsLoading\n  } = useQuery(RecommendationsQuery, {\n    skip: !props.productId,\n    variables: {\n      productId: props.productId\n    }\n  });\n  const recommendations = useMemo(() => R.pathOr([], ['productRecommendations'], recommendationsData), [recommendationsData]);\n  const isRecentlyViewedEmpty = !recentCtx.isReady || R.isEmpty(recentCtx.products) || recentCtx.products.length === 1 && recentCtx.products[0].id === props.productId;\n  const tabs = useMemo(() => R.filter(Boolean, [{\n    caption: t('otherSuggestions'),\n    id: 'suggestions'\n  }, !isRecentlyViewedEmpty && {\n    caption: t('recentlyViewed'),\n    id: 'recently'\n  }]), [isRecentlyViewedEmpty, t]);\n  return __jsx(Tabs, {\n    activeTab: activeTab,\n    className: props.className,\n    setActiveTab: setActiveTab,\n    tabs: tabs\n  }, recentCtx.isReady && __jsx(ProductsSlider, {\n    className: cn('tab', {\n      'is-shown': activeTab === 'recently'\n    }),\n    products: R.reject(recentProduct => recentProduct.id === props.productId, recentCtx.products)\n  }), !recommendationsLoading && __jsx(ProductsSlider, {\n    className: cn('tab', {\n      'is-shown': activeTab === 'suggestions'\n    }),\n    products: recommendations\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}