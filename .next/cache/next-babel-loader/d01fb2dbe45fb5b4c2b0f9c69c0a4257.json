{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { useContext, useEffect } from 'react';\nimport { CartContext } from \"./..\";\nimport { EmptyMessage } from \"../../EmptyMessage\";\nimport { Item } from \"./Item\";\nimport { PopupCart } from \"../common/PopupCart\";\nimport { useTranslation } from \"../../../../i18n\";\nexport function CartModal(props) {\n  const cartCtx = useContext(CartContext);\n  const {\n    t\n  } = useTranslation();\n  useEffect(() => {\n    cartCtx.fetchInventoryQuantityOfProducts(R.map(R.path(['variant', 'product', 'id']), props.items));\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [props.items]);\n  return __jsx(PopupCart, {\n    subtotal: props.subtotal,\n    close: props.close,\n    counterValue: props.itemsCount,\n    title: t('yourShoppingCart')\n  }, R.length(props.items) > 0 && __jsx(\"div\", {\n    className: \"content\"\n  }, R.map(item => __jsx(Item, {\n    className: \"item\",\n    removeProduct: props.removeProduct,\n    updateProduct: props.updateProduct,\n    key: item.id,\n    cartItem: item // Do not allow quantity going over the stock\n    ,\n    maxQuantity: R.pathOr(1, [item.variant.product.id, item.variant.id], cartCtx.inventoryQuantityOfProducts)\n  }), props.items)), R.length(props.items) === 0 && __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('emptyCartMessage')));\n}","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/CartContext/CartModal/index.tsx"],"names":["R","useContext","useEffect","CartContext","EmptyMessage","Item","PopupCart","useTranslation","CartModal","props","cartCtx","t","fetchInventoryQuantityOfProducts","map","path","items","subtotal","close","itemsCount","length","item","removeProduct","updateProduct","id","pathOr","variant","product","inventoryQuantityOfProducts"],"mappings":";;AAAA,OAAO,KAAKA,CAAZ,MAAmB,OAAnB;AACA,SAAQC,UAAR,EAAoBC,SAApB,QAAoC,OAApC;AACA,SAAQC,WAAR;AAEA,SAAQC,YAAR;AACA,SAAQC,IAAR;AACA,SAAQC,SAAR;AACA,SAAQC,cAAR;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAOJ;AACD,QAAMC,OAAO,GAAGT,UAAU,CAACE,WAAD,CAA1B;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAMJ,cAAc,EAA1B;AAEAL,EAAAA,SAAS,CACP,MAAM;AACJQ,IAAAA,OAAO,CAACE,gCAAR,CAAyCZ,CAAC,CAACa,GAAF,CAAMb,CAAC,CAACc,IAAF,CAAO,CAAC,SAAD,EAAY,SAAZ,EAAuB,IAAvB,CAAP,CAAN,EAA4CL,KAAK,CAACM,KAAlD,CAAzC;AACD,GAHM,EAKP;AACA,GAACN,KAAK,CAACM,KAAP,CANO,CAAT;AASA,SAAO,MAAC,SAAD;AACL,IAAA,QAAQ,EAAEN,KAAK,CAACO,QADX;AAEL,IAAA,KAAK,EAAEP,KAAK,CAACQ,KAFR;AAGL,IAAA,YAAY,EAAER,KAAK,CAACS,UAHf;AAIL,IAAA,KAAK,EAAEP,CAAC,CAAC,kBAAD;AAJH,KAMJX,CAAC,CAACmB,MAAF,CAASV,KAAK,CAACM,KAAf,IAAwB,CAAxB,IAA6B;AAAK,IAAA,SAAS,EAAC;AAAf,KAC3Bf,CAAC,CAACa,GAAF,CAAMO,IAAI,IAAI,MAAC,IAAD;AACb,IAAA,SAAS,EAAC,MADG;AAEb,IAAA,aAAa,EAAEX,KAAK,CAACY,aAFR;AAGb,IAAA,aAAa,EAAEZ,KAAK,CAACa,aAHR;AAIb,IAAA,GAAG,EAAEF,IAAI,CAACG,EAJG;AAKb,IAAA,QAAQ,EAAEH,IALG,CAOb;AAPa;AAQb,IAAA,WAAW,EAAEpB,CAAC,CAACwB,MAAF,CAAS,CAAT,EAAY,CAACJ,IAAI,CAACK,OAAL,CAAaC,OAAb,CAAqBH,EAAtB,EAA0BH,IAAI,CAACK,OAAL,CAAaF,EAAvC,CAAZ,EAAwDb,OAAO,CAACiB,2BAAhE;AARA,IAAd,EASGlB,KAAK,CAACM,KATT,CAD2B,CANzB,EAmBJf,CAAC,CAACmB,MAAF,CAASV,KAAK,CAACM,KAAf,MAA0B,CAA1B,IAA+B,MAAC,YAAD;AAAc,IAAA,SAAS,EAAC;AAAxB,KAAyCJ,CAAC,CAAC,kBAAD,CAA1C,CAnB3B,CAAP;AAqBD","sourcesContent":["import * as R from 'ramda'\nimport {useContext, useEffect} from 'react'\nimport {CartContext} from 'components/common/CartContext'\nimport {CartItem} from 'components/common/types'\nimport {EmptyMessage} from 'components/common/EmptyMessage'\nimport {Item} from './Item'\nimport {PopupCart} from 'components/common/CartContext/common/PopupCart'\nimport {useTranslation} from 'i18n'\n\nexport function CartModal(props: {\n  close: () => void\n  itemsCount: number\n  items: CartItem[]\n  removeProduct: (variantID: string) => void\n  subtotal: number\n  updateProduct: (params: {quantity: number, variantID: string}) => void\n}) {\n  const cartCtx = useContext(CartContext)\n  const {t} = useTranslation()\n\n  useEffect(\n    () => {\n      cartCtx.fetchInventoryQuantityOfProducts(R.map(R.path(['variant', 'product', 'id']), props.items))\n    },\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [props.items],\n  )\n\n  return <PopupCart\n    subtotal={props.subtotal}\n    close={props.close}\n    counterValue={props.itemsCount}\n    title={t('yourShoppingCart')}\n  >\n    {R.length(props.items) > 0 && <div className=\"content\">\n      {R.map(item => <Item\n        className=\"item\"\n        removeProduct={props.removeProduct}\n        updateProduct={props.updateProduct}\n        key={item.id}\n        cartItem={item}\n\n        // Do not allow quantity going over the stock\n        maxQuantity={R.pathOr(1, [item.variant.product.id, item.variant.id], cartCtx.inventoryQuantityOfProducts)}\n      />, props.items)}\n    </div>}\n\n    {R.length(props.items) === 0 && <EmptyMessage className=\"empty-message\">{t('emptyCartMessage')}</EmptyMessage>}\n  </PopupCart>\n}\n"]},"metadata":{},"sourceType":"module"}