{"ast":null,"code":"import crypto from 'crypto';\nimport fetch from 'node-fetch';\nimport getRawBody from 'raw-body';\nimport { objectToFetchPostParams } from \"../../../components/common/helpers\";\n/*\nWhen product create/update webhook is received do the following:\n\n* Add the term\n  curl -X POST https://api.poeditor.com/v2/terms/add \\\n    -d api_token=\"e5b59bb2650ac5f326481180090d7665\" \\\n    -d id=\"298541\" \\\n    -d language=\"en\" \\\n    -d data=\"[{\\\"term\\\":\\\"project<ID>Description\\\"}, {\\\"term\\\":\\\"project<ID>Title\\\"}]\"\n\n* Update the term's translation value:\n  curl -X POST https://api.poeditor.com/v2/languages/update \\\n    -d api_token=\"e5b59bb2650ac5f326481180090d7665\" \\\n    -d id=\"298541\" \\\n    -d language=\"en\" \\\n    -d data=\"[\n      {\\\"term\\\":\\\"project<ID>Description\\\", \\\"translation\\\": {\\\"content\\\": \\\"Ho-ho\\\"}, \\\"fuzzy\\\": 0},\n      {\\\"term\\\":\\\"project<ID>Title\\\", \\\"translation\\\": {\\\"content\\\": \\\"Ha-ha\\\"}, \\\"fuzzy\\\": 0},\n    ]\"\n*/\n\nexport default (async (req, res) => {\n  res.setHeader('Content-Type', 'application/json');\n  const rawBody = await getRawBody(req);\n\n  if (req.headers['x-shopify-hmac-sha256'] !== crypto.createHmac('sha256', process.env.SHOPIFY_WEBHOOK_SECRET).update(rawBody.toString('utf8'), 'utf8').digest('base64')) {\n    res.statusCode = 403;\n    res.end(JSON.stringify({\n      message: 'Signature is invalid',\n      success: false\n    }));\n    return;\n  }\n\n  console.log('Received ============================================================');\n  const jsonBody = JSON.parse(rawBody.toString('utf-8'));\n  const productDescriptionTerm = `productDescription-${jsonBody.handle}`;\n  const productTitleTerm = `productTitle-${jsonBody.handle}`;\n  console.log(jsonBody);\n  const createTermResponse = await fetch('https://api.poeditor.com/v2/terms/add', {\n    body: objectToFetchPostParams({\n      api_token: process.env.PO_API_TOKEN,\n      data: JSON.stringify([{\n        term: productDescriptionTerm\n      }, {\n        term: productTitleTerm\n      }]),\n      id: process.env.PO_PROJECT_ID,\n      language: 'en'\n    }),\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    method: 'POST'\n  });\n  const updateLanguageResponse = await fetch('https://api.poeditor.com/v2/languages/update', {\n    body: objectToFetchPostParams({\n      api_token: process.env.PO_API_TOKEN,\n      data: JSON.stringify([{\n        fuzzy: 0,\n        term: productDescriptionTerm,\n        translation: {\n          content: jsonBody.title\n        }\n      }, {\n        fuzzy: 0,\n        term: productTitleTerm,\n        translation: {\n          content: jsonBody.body_html\n        }\n      }]),\n      id: process.env.PO_PROJECT_ID,\n      language: 'en'\n    }),\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    method: 'POST'\n  });\n  console.log('\\n');\n  console.log('Create term =========================================================');\n  console.log(await createTermResponse.json());\n  console.log('\\n');\n  console.log('Update language =====================================================');\n  console.log(await updateLanguageResponse.json());\n  console.log('\\n');\n  console.log('End =================================================================');\n  console.log('\\n');\n  res.statusCode = 200;\n  res.end(JSON.stringify({\n    success: true\n  }));\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};","map":null,"metadata":{},"sourceType":"module"}