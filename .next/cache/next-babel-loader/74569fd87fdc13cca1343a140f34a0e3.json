{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as R from 'ramda';\nimport * as Yup from 'yup';\nimport { useCallback, useContext, useState } from 'react';\nimport { AuthModal } from \"../common/AuthModal\";\nimport { AuthModalContext } from \"../../common/AuthModalContext\";\nimport { Button } from \"../../common/Button\";\nimport cn from 'classnames';\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport SignUpMutation from \"./graphql/signup.graphql\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { useTranslation } from \"../../../i18n\";\nexport function SignUp() {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: signUpErrors,\n    1: setSignUpErrors\n  } = useState([]);\n  const {\n    0: isSignUpDone,\n    1: setIsSignUpDone\n  } = useState(false);\n  const authModalCtx = useContext(AuthModalContext);\n  const close = useCallback(() => authModalCtx.setActive(null), [authModalCtx]);\n  const showSignIn = useCallback(() => authModalCtx.setActive('signin'), [authModalCtx]);\n  const [signup] = useMutation(SignUpMutation);\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email().required(),\n    password: Yup.string().required(),\n    password2: Yup.string().required().oneOf([Yup.ref('password'), null], t('passwordsMustMatch'))\n  });\n  const initialValues = {\n    acceptsMarketing: false,\n    email: '',\n    firstName: '',\n    lastName: '',\n    password: '',\n    password2: '',\n    phone: ''\n  };\n  const submit = useCallback(async (values, actions) => {\n    try {\n      const r = await signup({\n        variables: {\n          input: _objectSpread({\n            acceptsMarketing: values.acceptsMarketing,\n            email: values.email,\n            firstName: values.firstName,\n            lastName: values.lastName,\n            password: values.password\n          }, values.phone ? {\n            phone: values.phone\n          } : {})\n        }\n      });\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['customerUserErrors']))(r.data.customerCreate);\n      if (R.length(errors)) return setSignUpErrors(errors);\n      actions.resetForm();\n      return setIsSignUpDone(true);\n    } catch (e) {\n      return setSignUpErrors([t('signUpFailed')]);\n    }\n  }, [signup, t]);\n  return __jsx(AuthModal, {\n    close: close\n  }, __jsx(\"div\", {\n    className: \"header\"\n  }, __jsx(\"button\", {\n    onClick: showSignIn,\n    className: \"button\"\n  }, t('signIn')), __jsx(\"button\", {\n    className: cn('button', 'is-selected')\n  }, t('signUp'))), __jsx(\"div\", {\n    className: \"content\"\n  }, isSignUpDone ? __jsx(\"div\", {\n    className: \"form\"\n  }, __jsx(\"div\", {\n    className: \"note span--2\"\n  }, t('signUpDone')), __jsx(Button, {\n    className: \"button span--2\",\n    onClick: showSignIn,\n    width: \"flex\"\n  }, t('signIn'))) : __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: submit\n  }, __jsx(Form, {\n    errorMessages: signUpErrors\n  })), __jsx(\"button\", {\n    className: \"close-button\",\n    onClick: close,\n    type: \"button\"\n  }, t('cancel'))));\n}\n\n_s(SignUp, \"xjyk+rB6Wkp4E9Hfi5xwhE1/i9s=\", false, function () {\n  return [useTranslation, useMutation];\n});\n\n_c = SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/auth/SignUp/index.tsx"],"names":["R","Yup","useCallback","useContext","useState","AuthModal","AuthModalContext","Button","cn","Form","Formik","SignUpMutation","useMutation","useTranslation","SignUp","t","signUpErrors","setSignUpErrors","isSignUpDone","setIsSignUpDone","authModalCtx","close","setActive","showSignIn","signup","validationSchema","object","shape","email","string","required","password","password2","oneOf","ref","initialValues","acceptsMarketing","firstName","lastName","phone","submit","values","actions","r","variables","input","errors","compose","pluck","pathOr","data","customerCreate","length","resetForm","e"],"mappings":"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","sourcesContent":["import * as R from 'ramda'\nimport * as Yup from 'yup'\nimport {useCallback, useContext, useState} from 'react'\nimport {AuthModal} from 'components/auth/common/AuthModal'\nimport {AuthModalContext} from 'components/common/AuthModalContext'\nimport {Button} from 'components/common/Button'\nimport cn from 'classnames'\nimport {Form} from './Form'\nimport {Formik} from 'formik'\nimport SignUpMutation from './graphql/signup.graphql'\nimport {useMutation} from '@apollo/react-hooks'\nimport {useTranslation} from 'i18n'\n\nexport function SignUp() {\n  const {t} = useTranslation()\n  const [signUpErrors, setSignUpErrors] = useState([])\n  const [isSignUpDone, setIsSignUpDone] = useState(false)\n  const authModalCtx = useContext(AuthModalContext)\n  const close = useCallback(() => authModalCtx.setActive(null), [authModalCtx])\n  const showSignIn = useCallback(() => authModalCtx.setActive('signin'), [authModalCtx])\n  const [signup] = useMutation(SignUpMutation)\n\n  const validationSchema = Yup.object().shape({\n    email    : Yup.string().email().required(),\n    password : Yup.string().required(),\n    password2: Yup.string().required().oneOf([Yup.ref('password'), null], t('passwordsMustMatch')),\n  })\n\n  const initialValues = {\n    acceptsMarketing: false,\n    email           : '',\n    firstName       : '',\n    lastName        : '',\n    password        : '',\n    password2       : '',\n    phone           : '',\n  }\n\n  const submit = useCallback(async (values, actions) => {\n    try {\n      const r = await signup({variables: {\n        input: {\n          acceptsMarketing: values.acceptsMarketing,\n          email           : values.email,\n          firstName       : values.firstName,\n          lastName        : values.lastName,\n          password        : values.password,\n\n          // Shopify doesn't accept empty string as phone\n          ...values.phone ? {phone: values.phone} : {},\n        },\n      }})\n\n      const errors = R.compose(\n        R.pluck('message'),\n        R.pathOr([], ['customerUserErrors']),\n      )(r.data.customerCreate)\n\n      if(R.length(errors))\n        return setSignUpErrors(errors)\n\n      actions.resetForm()\n      return setIsSignUpDone(true)\n    } catch(e) {\n      return setSignUpErrors([t('signUpFailed')])\n    }\n  }, [signup, t])\n\n  return <AuthModal close={close}>\n    <div className=\"header\">\n      <button onClick={showSignIn} className=\"button\">{t('signIn')}</button>\n      <button className={cn('button', 'is-selected')}>{t('signUp')}</button>\n    </div>\n\n    <div className=\"content\">\n      {isSignUpDone\n        ? <div className=\"form\">\n          <div className=\"note span--2\">{t('signUpDone')}</div>\n          <Button className=\"button span--2\" onClick={showSignIn} width=\"flex\">{t('signIn')}</Button>\n        </div>\n\n        : <Formik\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          onSubmit={submit}\n        >\n          <Form errorMessages={signUpErrors} />\n        </Formik>\n      }\n\n      <button className=\"close-button\" onClick={close} type=\"button\">\n        {t('cancel')}\n      </button>\n    </div>\n  </AuthModal>\n}\n"]},"metadata":{},"sourceType":"module"}