{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport * as Yup from 'yup';\nimport { useCallback, useContext, useState } from 'react';\nimport { AuthModal } from \"../common/AuthModal\";\nimport { AuthModalContext } from \"../../common/AuthModalContext\";\nimport cn from 'classnames';\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport SignIpMutation from \"./graphql/signin.graphql\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { UserContext } from \"../../common/UserContext\";\nimport { useTranslation } from \"../../../i18n\";\nexport function SignIn() {\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: signInErrors,\n    1: setSignInErrors\n  } = useState([]);\n  const authModalCtx = useContext(AuthModalContext);\n  const close = useCallback(() => authModalCtx.setActive(null), [authModalCtx]);\n  const showSignUp = useCallback(() => authModalCtx.setActive('signup'), [authModalCtx]);\n  const showForgot = useCallback(() => authModalCtx.setActive('forgot'), [authModalCtx]);\n  const [signin] = useMutation(SignIpMutation);\n  const userCtx = useContext(UserContext);\n  const submit = useCallback(async (values, actions) => {\n    try {\n      const r = await signin({\n        variables: {\n          input: R.omit(['rememberMe'], values)\n        }\n      });\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['customerUserErrors']))(r.data.customerAccessTokenCreate);\n      if (R.length(errors)) return setSignInErrors(errors);\n      const expiresAt = new Date(r.data.customerAccessTokenCreate.customerAccessToken.expiresAt);\n      const token = r.data.customerAccessTokenCreate.customerAccessToken.accessToken;\n      userCtx.saveToken({\n        expiresAt: values.rememberMe ? expiresAt : null,\n        token: token\n      });\n      actions.resetForm();\n      close();\n    } catch (e) {\n      return setSignInErrors([t('signInFailed')]);\n    }\n  }, [close, signin, t, userCtx]);\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email().required(),\n    password: Yup.string().required()\n  });\n  const initialValues = {\n    email: '',\n    password: '',\n    rememberMe: false\n  };\n  return __jsx(AuthModal, {\n    close: close\n  }, __jsx(\"div\", {\n    className: \"header\"\n  }, __jsx(\"button\", {\n    className: cn('button', 'is-selected')\n  }, t('signIn')), __jsx(\"button\", {\n    onClick: showSignUp,\n    className: \"button\"\n  }, t('signUp'))), __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: submit\n  }, __jsx(Form, {\n    errorMessages: signInErrors,\n    showForgot: showForgot\n  })), __jsx(\"button\", {\n    className: \"close-button\",\n    onClick: close,\n    type: \"button\"\n  }, t('cancel'))));\n}","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/auth/SignIn/index.tsx"],"names":["R","Yup","useCallback","useContext","useState","AuthModal","AuthModalContext","cn","Form","Formik","SignIpMutation","useMutation","UserContext","useTranslation","SignIn","t","signInErrors","setSignInErrors","authModalCtx","close","setActive","showSignUp","showForgot","signin","userCtx","submit","values","actions","r","variables","input","omit","errors","compose","pluck","pathOr","data","customerAccessTokenCreate","length","expiresAt","Date","customerAccessToken","token","accessToken","saveToken","rememberMe","resetForm","e","validationSchema","object","shape","email","string","required","password","initialValues"],"mappings":"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","sourcesContent":["import * as R from 'ramda'\nimport * as Yup from 'yup'\nimport {useCallback, useContext, useState} from 'react'\nimport {AuthModal} from 'components/auth/common/AuthModal'\nimport {AuthModalContext} from 'components/common/AuthModalContext'\nimport cn from 'classnames'\nimport {Form} from './Form'\nimport {Formik} from 'formik'\nimport SignIpMutation from './graphql/signin.graphql'\nimport {useMutation} from '@apollo/react-hooks'\nimport {UserContext} from 'components/common/UserContext'\nimport {useTranslation} from 'i18n'\n\nexport function SignIn() {\n  const {t} = useTranslation()\n  const [signInErrors, setSignInErrors] = useState([])\n  const authModalCtx = useContext(AuthModalContext)\n  const close = useCallback(() => authModalCtx.setActive(null), [authModalCtx])\n  const showSignUp = useCallback(() => authModalCtx.setActive('signup'), [authModalCtx])\n  const showForgot = useCallback(() => authModalCtx.setActive('forgot'), [authModalCtx])\n  const [signin] = useMutation(SignIpMutation)\n  const userCtx = useContext(UserContext)\n\n  const submit = useCallback(async (values, actions) => {\n    try {\n      const r = await signin({variables: {input: R.omit(['rememberMe'], values)}})\n\n      const errors = R.compose(\n        R.pluck('message'),\n        R.pathOr([], ['customerUserErrors']),\n      )(r.data.customerAccessTokenCreate)\n\n      if(R.length(errors))\n        return setSignInErrors(errors)\n\n      const expiresAt = new Date(r.data.customerAccessTokenCreate.customerAccessToken.expiresAt)\n      const token = r.data.customerAccessTokenCreate.customerAccessToken.accessToken\n      userCtx.saveToken({expiresAt: values.rememberMe ? expiresAt : null, token: token})\n      actions.resetForm()\n      close()\n    } catch(e) {\n      return setSignInErrors([t('signInFailed')])\n    }\n  }, [close, signin, t, userCtx])\n\n  const validationSchema = Yup.object().shape({\n    email   : Yup.string().email().required(),\n    password: Yup.string().required(),\n  })\n\n  const initialValues = {\n    email     : '',\n    password  : '',\n    rememberMe: false,\n  }\n\n  return <AuthModal close={close}>\n    <div className=\"header\">\n      <button className={cn('button', 'is-selected')}>{t('signIn')}</button>\n      <button onClick={showSignUp} className=\"button\">{t('signUp')}</button>\n    </div>\n\n    <div className=\"content\">\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={submit}\n      >\n        <Form errorMessages={signInErrors} showForgot={showForgot}/>\n      </Formik>\n\n      <button className=\"close-button\" onClick={close} type=\"button\">\n        {t('cancel')}\n      </button>\n    </div>\n  </AuthModal>\n}\n"]},"metadata":{},"sourceType":"module"}