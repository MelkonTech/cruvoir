{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useCallback, useContext, useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nimport { isServer } from \"../helpers\";\nconst PortalContext = /*#__PURE__*/createContext({\n  createPortal: () => null\n});\n\nfunction Portal(props) {\n  const ctx = useContext(PortalContext); // WARN do not remove wrapper with suppressHydrationWarning\n\n  return __jsx(\"span\", {\n    suppressHydrationWarning: true\n  }, ctx.createPortal(props.children, props.selector));\n}\n\nclass PortalManager {\n  constructor() {\n    _defineProperty(this, \"portals\", []);\n  }\n\n  create(children) {\n    if (this.portals) this.portals.push(children);\n  }\n\n}\n\nfunction PortalProvider(props) {\n  const create = useCallback((children, selector = '#portals') => {\n    if (isServer()) return null;\n    if (props.manager) props.manager.create([children, selector]);\n    return /*#__PURE__*/createPortal(children, document.querySelector(selector));\n  }, [props.manager]);\n  const value = useMemo(() => ({\n    createPortal: create\n  }), [create]);\n  return __jsx(PortalContext.Provider, {\n    value: value\n  }, props.children);\n}\n\nexport { Portal, PortalManager, PortalProvider };","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/Portal/index.tsx"],"names":["createContext","useCallback","useContext","useMemo","createPortal","isServer","PortalContext","Portal","props","ctx","children","selector","PortalManager","create","portals","push","PortalProvider","manager","document","querySelector","value"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAA+CC,WAA/C,EAA4DC,UAA5D,EAAwEC,OAAxE,QAAsF,OAAtF;AACA,SAAQC,YAAR,QAA2B,WAA3B;AACA,SAAQC,QAAR;AAMA,MAAMC,aAAa,gBAAGN,aAAa,CAAgB;AAACI,EAAAA,YAAY,EAAE,MAAM;AAArB,CAAhB,CAAnC;;AAEA,SAASG,MAAT,CAAgBC,KAAhB,EAGG;AACD,QAAMC,GAAG,GAAGP,UAAU,CAACI,aAAD,CAAtB,CADC,CAGD;;AACA,SAAO;AAAM,IAAA,wBAAwB;AAA9B,KAAgCG,GAAG,CAACL,YAAJ,CAAiBI,KAAK,CAACE,QAAvB,EAAiCF,KAAK,CAACG,QAAvC,CAAhC,CAAP;AACD;;AAED,MAAMC,aAAN,CAAoB;AAAA;AAAA,qCACR,EADQ;AAAA;;AAGlBC,EAAAA,MAAM,CAACH,QAAD,EAAW;AACf,QAAG,KAAKI,OAAR,EACE,KAAKA,OAAL,CAAaC,IAAb,CAAkBL,QAAlB;AACH;;AANiB;;AASpB,SAASM,cAAT,CAAwBR,KAAxB,EAGG;AACD,QAAMK,MAAM,GAAGZ,WAAW,CAAC,CAACS,QAAD,EAAsBC,QAAgB,GAAG,UAAzC,KAA4E;AACrG,QAAGN,QAAQ,EAAX,EACE,OAAO,IAAP;AAEF,QAAGG,KAAK,CAACS,OAAT,EACET,KAAK,CAACS,OAAN,CAAcJ,MAAd,CAAqB,CAACH,QAAD,EAAWC,QAAX,CAArB;AAEF,wBAAOP,YAAY,CAACM,QAAD,EAAWQ,QAAQ,CAACC,aAAT,CAAuBR,QAAvB,CAAX,CAAnB;AACD,GARyB,EAQvB,CAACH,KAAK,CAACS,OAAP,CARuB,CAA1B;AAUA,QAAMG,KAAK,GAAGjB,OAAO,CAAC,OAAO;AAACC,IAAAA,YAAY,EAAES;AAAf,GAAP,CAAD,EAAiC,CAACA,MAAD,CAAjC,CAArB;AACA,SAAO,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEO;AAA/B,KAAuCZ,KAAK,CAACE,QAA7C,CAAP;AACD;;AAED,SAAQH,MAAR,EAAgBK,aAAhB,EAA+BI,cAA/B","sourcesContent":["import {createContext, ReactNode, ReactPortal, useCallback, useContext, useMemo} from 'react'\nimport {createPortal} from 'react-dom'\nimport {isServer} from 'components/common/helpers'\n\ntype PortalContext = {\n  createPortal: (children: ReactNode, selector: string) => ReactPortal | null\n}\n\nconst PortalContext = createContext<PortalContext>({createPortal: () => null})\n\nfunction Portal(props: {\n  children: ReactNode\n  selector?: string\n}) {\n  const ctx = useContext(PortalContext)\n\n  // WARN do not remove wrapper with suppressHydrationWarning\n  return <span suppressHydrationWarning>{ctx.createPortal(props.children, props.selector)}</span>\n}\n\nclass PortalManager {\n  portals = []\n\n  create(children) {\n    if(this.portals)\n      this.portals.push(children)\n  }\n}\n\nfunction PortalProvider(props: {\n  children: ReactNode\n  manager: PortalManager\n}) {\n  const create = useCallback((children: ReactNode, selector: string = '#portals'): ReactPortal | null => {\n    if(isServer())\n      return null\n\n    if(props.manager)\n      props.manager.create([children, selector])\n\n    return createPortal(children, document.querySelector(selector))\n  }, [props.manager])\n\n  const value = useMemo(() => ({createPortal: create}), [create])\n  return <PortalContext.Provider value={value}>{props.children}</PortalContext.Provider>\n}\n\nexport {Portal, PortalManager, PortalProvider}\n"]},"metadata":{},"sourceType":"module"}