{"ast":null,"code":"import * as R from 'ramda';\nexport const collectGraphqlRequestErrors = error => R.is(String, error) ? error : R.pluck('message', R.pathOr([], ['result', 'errors'], error.networkError).concat(error.graphQLErrors || []));","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/helpers/collect-graphql-request-errors.tsx"],"names":["R","collectGraphqlRequestErrors","error","is","String","pluck","pathOr","networkError","concat","graphQLErrors"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,OAAnB;AAEA,OAAO,MAAMC,2BAA2B,GAAGC,KAAK,IAAIF,CAAC,CAACG,EAAF,CAAKC,MAAL,EAAaF,KAAb,IAChDA,KADgD,GAGhDF,CAAC,CAACK,KAAF,CACA,SADA,EAEAL,CAAC,CAACM,MAAF,CAAS,EAAT,EAAa,CAAC,QAAD,EAAW,QAAX,CAAb,EAAmCJ,KAAK,CAACK,YAAzC,EAAuDC,MAAvD,CAA8DN,KAAK,CAACO,aAAN,IAAuB,EAArF,CAFA,CAHG","sourcesContent":["import * as R from 'ramda'\n\nexport const collectGraphqlRequestErrors = error => R.is(String, error)\n  ? error\n\n  : R.pluck(\n    'message',\n    R.pathOr([], ['result', 'errors'], error.networkError).concat(error.graphQLErrors || []),\n  )\n"]},"metadata":{},"sourceType":"module"}