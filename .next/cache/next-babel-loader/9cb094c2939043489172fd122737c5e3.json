{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { Form as FormikForm, useFormikContext } from 'formik';\nimport { Fragment, useEffect, useState } from 'react';\nimport { Category as CategoryFilter } from \"../filters/Category\";\nimport { Colors as ColorsFilter } from \"../filters/Colors\";\nimport { Designers as DesignersFilter } from \"../filters/Designers\";\nimport { Genders as GendersFilter } from \"../filters/Genders\";\nimport { Icon } from \"../../../common/Icon\";\nimport { Price as PriceFilter } from \"../filters/Price\";\nexport function Form(props) {\n  const {\n    submitForm,\n    values\n  } = useFormikContext();\n  const {\n    0: lastSubmittedValues,\n    1: setLastSubmittedValues\n  } = useState(props.initialValues);\n  useEffect(() => {\n    if (R.equals(values, lastSubmittedValues)) return;\n    setLastSubmittedValues(values);\n    submitForm();\n  }, [lastSubmittedValues, submitForm, values]);\n  return __jsx(FormikForm, {\n    className: props.className\n  }, __jsx(\"div\", {\n    className: \"active-layer\",\n    onClick: props.close\n  }), __jsx(\"div\", {\n    className: \"wrapper\"\n  }, __jsx(\"div\", {\n    className: \"button-section\"\n  }, __jsx(\"button\", {\n    className: \"button\",\n    onClick: props.close\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"filter-to-close\"\n  }))), __jsx(\"div\", {\n    className: \"scroll\"\n  }, props.query.gender !== 'all' && __jsx(Fragment, null, __jsx(CategoryFilter, {\n    className: \"section\",\n    isWishListRequested: props.isWishListRequested,\n    query: props.query\n  }), !props.isDesignerCollectionRequested && __jsx(Fragment, null, __jsx(\"hr\", {\n    className: \"divider\"\n  }), __jsx(DesignersFilter, {\n    className: \"section\",\n    isBlogDomain: props.isBlogDomain\n  })), __jsx(\"hr\", {\n    className: \"divider\"\n  }), __jsx(ColorsFilter, {\n    className: \"section\"\n  }), __jsx(\"hr\", {\n    className: \"divider\"\n  }), __jsx(PriceFilter, {\n    className: \"section\"\n  })), props.query.gender === 'all' && __jsx(GendersFilter, {\n    className: \"section\",\n    isWishListRequested: props.isWishListRequested,\n    query: props.query\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}