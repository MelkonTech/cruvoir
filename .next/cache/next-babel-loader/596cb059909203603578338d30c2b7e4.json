{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as R from 'ramda';\nimport { createContext, useCallback, useEffect, useMemo, useState } from 'react';\nimport { useApolloClient, useMutation, useQuery } from '@apollo/react-hooks';\nimport ApplyDiscountCodeMutation from \"./graphql/apply-discount-code.graphql\";\nimport { CartModal } from \"./CartModal\";\nimport CheckoutCreateMutation from \"./graphql/create-checkout.graphql\";\nimport CheckoutQuery from \"../graphql/checkout.graphql\";\nimport CheckoutUpdateMutation from \"./graphql/update-checkout.graphql\";\nimport { ConfirmModal } from \"./ConfirmModal\";\nimport Cookies from 'js-cookie';\nimport InventoryQuantityQuery from \"./graphql/inventory-quantity.graphql\";\nimport ProductQuery from \"./graphql/product.graphql\";\nimport RemoveDiscountCodeMutation from \"./graphql/remove-discount-code.graphql\";\nexport const CartContext = /*#__PURE__*/createContext({\n  addProduct: () => null,\n  addProductWithConfirm: () => null,\n  applyPromoCode: () => null,\n  cartItems: [],\n  checkoutId: '',\n  clearCart: () => null,\n  discount: null,\n  fetchInventoryQuantityOfProducts: () => null,\n  inventoryQuantityOfProducts: {},\n  itemsCount: 0,\n  openCart: () => null,\n  refetch: async () => null,\n  removeProduct: () => null,\n  removePromoCode: () => null,\n  subtotal: 0,\n  tax: 0,\n  total: 0,\n  updateProduct: () => null\n});\nexport function CartContextProvider(props) {\n  _s();\n\n  const {\n    0: addedProduct,\n    1: setAddedProduct\n  } = useState(null);\n  const {\n    0: checkoutId,\n    1: setCheckoutId\n  } = useState(props.initialValue.checkoutId);\n  const {\n    0: isConfirmShown,\n    1: setIsConfirmShown\n  } = useState(false);\n  const closeConfirmation = useCallback(() => setIsConfirmShown(false), []);\n  const {\n    0: isCartShown,\n    1: setIsCartShown\n  } = useState(false);\n  const closeCart = useCallback(() => setIsCartShown(false), []);\n  const openCart = useCallback(() => setIsCartShown(true), []);\n  const {\n    data,\n    refetch\n  } = useQuery(CheckoutQuery, {\n    skip: !checkoutId,\n    variables: {\n      id: checkoutId\n    }\n  });\n  const checkoutData = useMemo(() => checkoutId ? data : {}, [checkoutId, data]);\n  const [createCheckout] = useMutation(CheckoutCreateMutation);\n  const [updateCheckout] = useMutation(CheckoutUpdateMutation);\n  const [applyDiscountCode] = useMutation(ApplyDiscountCodeMutation);\n  const [removeDiscountCode] = useMutation(RemoveDiscountCodeMutation);\n  const apolloClient = useApolloClient();\n  const convertItemsForRead = useCallback(inputData => R.compose(R.pluck('node'), R.pathOr([], ['node', 'lineItems', 'edges']))(inputData), []);\n  const subtotal = parseFloat(R.pathOr('0', ['node', 'subtotalPriceV2', 'amount'], checkoutData));\n  const clearCart = useCallback(() => {\n    setCheckoutId('');\n    Cookies.remove('checkoutId');\n  }, []);\n  const discount = useMemo(() => R.compose(R.ifElse(Boolean, item => ({\n    code: item.node.code,\n    typename: item.node.value.__typename,\n    value: item.node.value.__typename === 'PricingPercentageValue' ? item.node.value.percentage : item.node.value.amount\n  }), () => ({\n    code: null,\n    typename: 'MoneyV2',\n    value: '0'\n  })), R.find(item => !!item.node.code))(R.pathOr([], ['node', 'discountApplications', 'edges'], checkoutData)), [checkoutData]); // The amount left to be paid. This is equal to the cost of the line items, taxes and shipping minus discounts and gift cards.\n\n  const total = parseFloat(R.pathOr('0', ['node', 'paymentDueV2', 'amount'], checkoutData));\n  const tax = parseFloat(R.pathOr('0', ['node', 'totalTaxV2', 'amount'], checkoutData));\n  const cartItems = useMemo(() => convertItemsForRead(checkoutData), [checkoutData, convertItemsForRead]);\n  const {\n    0: inventoryQuantityOfProducts,\n    1: setInventoryQuantityOfProducts\n  } = useState({});\n  const addProduct = useCallback(async params => {\n    try {\n      // Find a productâ€™s variant based on its selected options.\n      const product = await apolloClient.query({\n        fetchPolicy: 'no-cache',\n        query: ProductQuery,\n        variables: {\n          handle: params.handle,\n          selectedOptions: R.map(key => ({\n            name: key,\n            value: params.values[key]\n          }), Object.keys(params.values))\n        }\n      });\n      const variantID = product.data.productByHandle.variantBySelectedOptions.id; // Prevent cart items quantity going over the stock\n      // Consider requested quantity and the quantity of the item that was already added\n\n      const newInventoryQuantityOfProduct = R.pathOr(1, [product.data.productByHandle.id, variantID], inventoryQuantityOfProducts) - params.quantity - R.compose(R.propOr(0, 'quantity'), R.find(cartItem => cartItem.variant.product.id === product.data.productByHandle.id && cartItem.variant.id === variantID))(cartItems);\n      if (newInventoryQuantityOfProduct < 0) console.log('Stock is empty!');\n      let result = null;\n\n      if (checkoutId && newInventoryQuantityOfProduct >= 0) {\n        // Check item variant already in cart\n        const idx = R.findIndex(item => item.variant.id === variantID, cartItems); // Prepare items which already in cart\n\n        const lineItems = R.map(item => ({\n          quantity: item.quantity,\n          variantId: item.variant.id\n        }), cartItems);\n        if (~idx) lineItems[idx].quantity += params.quantity;else lineItems.push({\n          quantity: params.quantity,\n          variantId: variantID\n        });\n        result = await updateCheckout({\n          variables: {\n            checkoutId: checkoutId,\n            lineItems: lineItems\n          }\n        });\n      } else if (newInventoryQuantityOfProduct >= 0) {\n        result = await createCheckout({\n          variables: {\n            input: {\n              lineItems: [{\n                quantity: params.quantity,\n                variantId: variantID\n              }]\n            }\n          }\n        });\n        setCheckoutId(result.data.checkoutCreate.checkout.id);\n        Cookies.set('checkoutId', result.data.checkoutCreate.checkout.id, {\n          expires: 30\n        }); // expires in days\n      }\n\n      setAddedProduct({\n        image: R.compose(R.path(['node']), R.head)(product.data.productByHandle.images.edges),\n        title: product.data.productByHandle.title,\n        vendor: product.data.productByHandle.vendor\n      });\n      await refetch();\n      return result;\n    } catch (e) {\n      console.error(e);\n    }\n  }, [apolloClient, cartItems, checkoutId, createCheckout, inventoryQuantityOfProducts, refetch, updateCheckout]);\n  const updateProduct = useCallback(async params => {\n    const cachedData = apolloClient.readQuery({\n      query: CheckoutQuery,\n      variables: {\n        id: checkoutId\n      }\n    });\n    const newSubtotal = R.compose(R.sum, R.map(cartItem => (cartItem.variant.id === params.variantID ? params.quantity : cartItem.quantity) * parseFloat(cartItem.variant.priceV2.amount.toString())))(cartItems);\n    apolloClient.writeQuery({\n      data: _objectSpread(_objectSpread({}, cachedData), {}, {\n        node: _objectSpread(_objectSpread({}, cachedData.node), {}, {\n          lineItems: _objectSpread(_objectSpread({}, cachedData.node.lineItems), {}, {\n            edges: R.map(item => _objectSpread(_objectSpread({}, item), {}, {\n              node: _objectSpread(_objectSpread({}, item.node), {}, {\n                quantity: item.node.variant.id === params.variantID ? params.quantity : item.node.quantity\n              })\n            }), cachedData.node.lineItems.edges)\n          }),\n          paymentDueV2: _objectSpread(_objectSpread({}, cachedData.node.paymentDueV2), {}, {\n            amount: newSubtotal\n          }),\n          subtotalPriceV2: _objectSpread(_objectSpread({}, cachedData.node.subtotalPriceV2), {}, {\n            amount: newSubtotal\n          })\n        })\n      }),\n      query: CheckoutQuery,\n      variables: {\n        id: checkoutId\n      }\n    });\n\n    try {\n      await updateCheckout({\n        variables: {\n          checkoutId: checkoutId,\n          lineItems: R.map(item => ({\n            quantity: item.variant.id === params.variantID ? params.quantity : item.quantity,\n            variantId: item.variant.id\n          }), convertItemsForRead(cachedData))\n        }\n      });\n    } catch (e) {\n      console.error(e); // Refetch only then request failed!\n\n      await refetch();\n    }\n  }, [checkoutId, apolloClient, cartItems, convertItemsForRead, refetch, updateCheckout]);\n  const removeProduct = useCallback(async variantID => {\n    // WARN read/write queries used for \"optimistic\" UI without races\n    const cachedData = apolloClient.readQuery({\n      query: CheckoutQuery,\n      variables: {\n        id: checkoutId\n      }\n    });\n    const newSubtotal = R.compose(R.sum, R.map(cartItem => cartItem.quantity * parseFloat(cartItem.variant.priceV2.amount.toString())), R.reject(cartItem => cartItem.variant.id === variantID))(cartItems);\n    apolloClient.writeQuery({\n      data: _objectSpread(_objectSpread({}, cachedData), {}, {\n        node: _objectSpread(_objectSpread({}, cachedData.node), {}, {\n          lineItems: _objectSpread(_objectSpread({}, cachedData.node.lineItems), {}, {\n            edges: R.filter(i => i.node.variant.id !== variantID, cachedData.node.lineItems.edges)\n          }),\n          paymentDueV2: _objectSpread(_objectSpread({}, cachedData.node.paymentDueV2), {}, {\n            amount: newSubtotal\n          }),\n          subtotalPriceV2: _objectSpread(_objectSpread({}, cachedData.node.subtotalPriceV2), {}, {\n            amount: newSubtotal\n          })\n        })\n      }),\n      query: CheckoutQuery,\n      variables: {\n        id: checkoutId\n      }\n    });\n\n    try {\n      await updateCheckout({\n        variables: {\n          checkoutId: checkoutId,\n          lineItems: R.compose(R.map(item => ({\n            quantity: item.quantity,\n            variantId: item.variant.id\n          })), R.filter(item => item.variant.id !== variantID))(convertItemsForRead(cachedData))\n        }\n      });\n    } catch (e) {\n      console.error(e); // Refetch only then request failed!\n\n      await refetch();\n    }\n  }, [checkoutId, apolloClient, cartItems, convertItemsForRead, refetch, updateCheckout]);\n  const addProductWithConfirm = useCallback(async params => {\n    setIsCartShown(false);\n    setIsConfirmShown(false);\n    const result = await addProduct(params);\n    setIsConfirmShown(true);\n    return result;\n  }, [addProduct]);\n  const fetchInventoryQuantityOfProducts = useCallback(async ids => {\n    // {<product id>: {<variant id>: <quantity>}}\n    setInventoryQuantityOfProducts(R.reduce((acc, product) => R.assoc( // Admin API returns decoded ids â€” decode them to base64 in order to match ids returned by Storefront API\n    btoa(product.id), R.compose(R.fromPairs, R.map(variant => [btoa(variant.node.id), variant.node.inventoryQuantity || 0]))(product.variants.edges), acc), {}, R.pathOr([], ['data', 'nodes'], await apolloClient.query({\n      context: {\n        isInternalAPI: true\n      },\n      query: InventoryQuantityQuery,\n      variables: {\n        ids: ids\n      }\n    }))));\n  }, [apolloClient]);\n  const applyPromoCode = useCallback(async code => {\n    try {\n      const r = await applyDiscountCode({\n        variables: {\n          checkoutId: checkoutId,\n          discountCode: code\n        }\n      });\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['checkoutUserErrors']))(r.data.checkoutDiscountCodeApplyV2);\n      if (R.length(errors)) return Promise.reject(errors[0]);\n    } catch (e) {\n      console.error(e);\n    }\n\n    await refetch();\n  }, [applyDiscountCode, checkoutId, refetch]);\n  const removePromoCode = useCallback(async () => {\n    try {\n      const r = await removeDiscountCode({\n        variables: {\n          checkoutId: checkoutId\n        }\n      });\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['checkoutUserErrors']))(r.data.checkoutDiscountCodeRemove);\n      if (R.length(errors)) return Promise.reject(errors[0]);\n    } catch (e) {\n      console.error(e);\n    }\n\n    await refetch();\n  }, [checkoutId, refetch, removeDiscountCode]);\n  const contextValue = useMemo(() => ({\n    addProduct: addProduct,\n    addProductWithConfirm: addProductWithConfirm,\n    applyPromoCode: applyPromoCode,\n    cartItems: cartItems,\n    checkoutId: checkoutId,\n    clearCart: clearCart,\n    discount: discount,\n    fetchInventoryQuantityOfProducts,\n    inventoryQuantityOfProducts,\n    itemsCount: cartItems.length,\n    openCart: openCart,\n    refetch: refetch,\n    removeProduct: removeProduct,\n    removePromoCode: removePromoCode,\n    shippingAddress: R.path(['node', 'shippingAddress'], checkoutData),\n    subtotal: subtotal,\n    tax: tax,\n    total: total,\n    updateProduct: updateProduct\n  }), [addProduct, addProductWithConfirm, applyPromoCode, cartItems, checkoutId, clearCart, discount, fetchInventoryQuantityOfProducts, inventoryQuantityOfProducts, openCart, refetch, removeProduct, removePromoCode, checkoutData, subtotal, tax, total, updateProduct]);\n  useEffect(() => {\n    let timeoutId;\n    if (isConfirmShown) timeoutId = setTimeout(() => setIsConfirmShown(false), 5000);\n    return () => clearTimeout(timeoutId);\n  }, [isConfirmShown]);\n  return __jsx(CartContext.Provider, {\n    value: contextValue\n  }, props.children, isCartShown && __jsx(CartModal, {\n    removeProduct: removeProduct,\n    updateProduct: updateProduct,\n    close: closeCart,\n    itemsCount: cartItems.length,\n    items: cartItems,\n    subtotal: contextValue.subtotal\n  }), isConfirmShown && __jsx(ConfirmModal, {\n    subtotal: contextValue.subtotal,\n    itemsCount: cartItems.length,\n    close: closeConfirmation,\n    product: addedProduct\n  }));\n}\n\n_s(CartContextProvider, \"A+9ah7H/GsTqvgq55fCzNTmqwNs=\", false, function () {\n  return [useQuery, useMutation, useMutation, useMutation, useMutation, useApolloClient];\n});\n\n_c = CartContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/CartContext/index.tsx"],"names":["R","createContext","useCallback","useEffect","useMemo","useState","useApolloClient","useMutation","useQuery","ApplyDiscountCodeMutation","CartModal","CheckoutCreateMutation","CheckoutQuery","CheckoutUpdateMutation","ConfirmModal","Cookies","InventoryQuantityQuery","ProductQuery","RemoveDiscountCodeMutation","CartContext","addProduct","addProductWithConfirm","applyPromoCode","cartItems","checkoutId","clearCart","discount","fetchInventoryQuantityOfProducts","inventoryQuantityOfProducts","itemsCount","openCart","refetch","removeProduct","removePromoCode","subtotal","tax","total","updateProduct","CartContextProvider","props","addedProduct","setAddedProduct","setCheckoutId","initialValue","isConfirmShown","setIsConfirmShown","closeConfirmation","isCartShown","setIsCartShown","closeCart","data","skip","variables","id","checkoutData","createCheckout","updateCheckout","applyDiscountCode","removeDiscountCode","apolloClient","convertItemsForRead","inputData","compose","pluck","pathOr","parseFloat","remove","ifElse","Boolean","item","code","node","typename","value","__typename","percentage","amount","find","setInventoryQuantityOfProducts","params","product","query","fetchPolicy","handle","selectedOptions","map","key","name","values","Object","keys","variantID","productByHandle","variantBySelectedOptions","newInventoryQuantityOfProduct","quantity","propOr","cartItem","variant","console","log","result","idx","findIndex","lineItems","variantId","push","input","checkoutCreate","checkout","set","expires","image","path","head","images","edges","title","vendor","e","error","cachedData","readQuery","newSubtotal","sum","priceV2","toString","writeQuery","paymentDueV2","subtotalPriceV2","reject","filter","i","ids","reduce","acc","assoc","btoa","fromPairs","inventoryQuantity","variants","context","isInternalAPI","r","discountCode","errors","checkoutDiscountCodeApplyV2","length","Promise","checkoutDiscountCodeRemove","contextValue","shippingAddress","timeoutId","setTimeout","clearTimeout","children"],"mappings":"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","sourcesContent":["import * as R from 'ramda'\nimport {CartItem, ShippingAddress} from 'components/common/types'\nimport {createContext, ReactNode, useCallback, useEffect, useMemo, useState} from 'react'\nimport {Product, Variant} from 'components/common/types'\nimport {useApolloClient, useMutation, useQuery} from '@apollo/react-hooks'\nimport {ApolloQueryResult} from 'apollo-client'\nimport ApplyDiscountCodeMutation from './graphql/apply-discount-code.graphql'\nimport {CartModal} from './CartModal'\nimport CheckoutCreateMutation from './graphql/create-checkout.graphql'\nimport CheckoutQuery from 'components/common/graphql/checkout.graphql'\nimport CheckoutUpdateMutation from './graphql/update-checkout.graphql'\nimport {ConfirmModal} from './ConfirmModal'\nimport Cookies from 'js-cookie'\nimport InventoryQuantityQuery from './graphql/inventory-quantity.graphql'\nimport ProductQuery from './graphql/product.graphql'\nimport RemoveDiscountCodeMutation from './graphql/remove-discount-code.graphql'\ntype AddToCartParams = {handle: string, quantity: number, values: Record<'Size' | 'Color', string>}\n\ntype ContextValue = {\n  addProduct: (params: AddToCartParams) => Promise<void>\n  addProductWithConfirm: (params: AddToCartParams) => Promise<void>\n  applyPromoCode: (code: string) => Promise<void>\n  cartItems: CartItem[]\n  checkoutId: string\n  clearCart: () => void\n  fetchInventoryQuantityOfProducts: (ids: string[]) => void\n  inventoryQuantityOfProducts: Record<string, Record<string, number>>\n  discount: {code: string | null, typename: 'PricingPercentageValue' | 'MoneyV2', value: string | number}\n  itemsCount: number\n  openCart: () => void\n  refetch: (params?: any) => Promise<ApolloQueryResult<any>>\n  removeProduct: (variantID: string) => Promise<void>\n  removePromoCode: () => Promise<void>\n  shippingAddress?: ShippingAddress | null\n  subtotal: number\n  tax: number\n  total: number\n  updateProduct: (params: {variantID: string, quantity: number}) => Promise<void>\n}\n\nexport const CartContext = createContext<ContextValue>({\n  addProduct                      : () => null,\n  addProductWithConfirm           : () => null,\n  applyPromoCode                  : () => null,\n  cartItems                       : [],\n  checkoutId                      : '',\n  clearCart                       : () => null,\n  discount                        : null,\n  fetchInventoryQuantityOfProducts: () => null,\n  inventoryQuantityOfProducts     : {},\n  itemsCount                      : 0,\n  openCart                        : () => null,\n  refetch                         : async () => null,\n  removeProduct                   : () => null,\n  removePromoCode                 : () => null,\n  subtotal                        : 0,\n  tax                             : 0,\n  total                           : 0,\n  updateProduct                   : () => null,\n})\n\nexport function CartContextProvider(props:{children: ReactNode, initialValue: {checkoutId?: string}}) {\n  const [addedProduct, setAddedProduct] = useState(null)\n  const [checkoutId, setCheckoutId] = useState(props.initialValue.checkoutId)\n  const [isConfirmShown, setIsConfirmShown] = useState(false)\n  const closeConfirmation = useCallback(() => setIsConfirmShown(false), [])\n  const [isCartShown, setIsCartShown] = useState(false)\n  const closeCart = useCallback(() => setIsCartShown(false), [])\n  const openCart = useCallback(() => setIsCartShown(true), [])\n\n  const {data, refetch} = useQuery(\n    CheckoutQuery,\n    {skip: !checkoutId, variables: {id: checkoutId}},\n  )\n\n  const checkoutData = useMemo(() => checkoutId ? data : {}, [checkoutId, data])\n  const [createCheckout] = useMutation(CheckoutCreateMutation)\n  const [updateCheckout] = useMutation(CheckoutUpdateMutation)\n  const [applyDiscountCode] = useMutation(ApplyDiscountCodeMutation)\n  const [removeDiscountCode] = useMutation(RemoveDiscountCodeMutation)\n  const apolloClient = useApolloClient()\n\n  const convertItemsForRead = useCallback(inputData => R.compose(\n    R.pluck('node'),\n    R.pathOr<{node: CartItem}[]>([], ['node', 'lineItems', 'edges']),\n  )(inputData), [])\n\n  const subtotal = parseFloat(R.pathOr('0', ['node', 'subtotalPriceV2', 'amount'], checkoutData))\n\n  const clearCart = useCallback(() => {\n    setCheckoutId('')\n    Cookies.remove('checkoutId')\n  }, [])\n\n  const discount = useMemo(() => R.compose(\n    R.ifElse(\n      Boolean,\n\n      item => ({\n        code    : item.node.code,\n        typename: item.node.value.__typename,\n\n        value: item.node.value.__typename === 'PricingPercentageValue'\n          ? item.node.value.percentage\n          : item.node.value.amount,\n      }),\n\n      () => ({\n        code    : null,\n        typename: 'MoneyV2',\n        value   : '0',\n      }),\n    ),\n\n    R.find<{node: {code?: string, value: any}}>(item => !!item.node.code),\n  )(R.pathOr([], ['node', 'discountApplications', 'edges'], checkoutData)), [checkoutData])\n\n  // The amount left to be paid. This is equal to the cost of the line items, taxes and shipping minus discounts and gift cards.\n  const total = parseFloat(R.pathOr('0', ['node', 'paymentDueV2', 'amount'], checkoutData))\n\n  const tax = parseFloat(R.pathOr('0', ['node', 'totalTaxV2', 'amount'], checkoutData))\n  const cartItems = useMemo(() => convertItemsForRead(checkoutData), [checkoutData, convertItemsForRead])\n  const [inventoryQuantityOfProducts, setInventoryQuantityOfProducts] = useState({})\n\n  const addProduct = useCallback<ContextValue['addProduct']>(async params => {\n    try {\n      // Find a productâ€™s variant based on its selected options.\n      const product = await apolloClient.query({\n        fetchPolicy: 'no-cache',\n        query      : ProductQuery,\n\n        variables: {\n          handle         : params.handle,\n          selectedOptions: R.map(key => ({name: key, value: params.values[key]}), Object.keys(params.values)),\n        },\n      })\n\n      const variantID = product.data.productByHandle.variantBySelectedOptions.id\n\n      // Prevent cart items quantity going over the stock\n      // Consider requested quantity and the quantity of the item that was already added\n      const newInventoryQuantityOfProduct = R.pathOr(\n        1,\n        [product.data.productByHandle.id, variantID],\n        inventoryQuantityOfProducts,\n      ) - params.quantity - R.compose<CartItem[], CartItem, number>(\n        R.propOr(0, 'quantity'),\n\n        R.find(cartItem => cartItem.variant.product.id === product.data.productByHandle.id &&\n          cartItem.variant.id === variantID),\n      )(cartItems)\n\n      if(newInventoryQuantityOfProduct < 0)\n        console.log('Stock is empty!')\n\n      let result = null\n\n      if(checkoutId && newInventoryQuantityOfProduct >= 0) {\n        // Check item variant already in cart\n        const idx = R.findIndex(item => item.variant.id === variantID, cartItems)\n\n        // Prepare items which already in cart\n        const lineItems = R.map(item => ({quantity: item.quantity, variantId: item.variant.id}), cartItems)\n\n        if(~idx)\n          lineItems[idx].quantity += params.quantity\n        else\n          lineItems.push({quantity: params.quantity, variantId: variantID})\n\n        result = await updateCheckout({variables: {\n          checkoutId: checkoutId,\n          lineItems : lineItems,\n        }})\n      }else if(newInventoryQuantityOfProduct >= 0){\n        result = await createCheckout({variables: {input: {\n          lineItems: [{quantity: params.quantity, variantId: variantID}],\n        }}})\n\n        setCheckoutId(result.data.checkoutCreate.checkout.id)\n        Cookies.set('checkoutId', result.data.checkoutCreate.checkout.id, {expires: 30}) // expires in days\n      }\n\n      setAddedProduct({\n        image: R.compose(\n          R.path(['node']),\n          R.head,\n        )(product.data.productByHandle.images.edges),\n\n        title : product.data.productByHandle.title,\n        vendor: product.data.productByHandle.vendor,\n      })\n\n      await refetch()\n      return result\n    } catch(e) {\n      console.error(e)\n    }\n  }, [apolloClient, cartItems, checkoutId, createCheckout, inventoryQuantityOfProducts, refetch, updateCheckout])\n\n  const updateProduct = useCallback(async (params: {variantID: string, quantity: number}) => {\n    const cachedData = apolloClient.readQuery({query: CheckoutQuery, variables: {id: checkoutId}})\n\n    const newSubtotal = R.compose(\n      R.sum,\n\n      R.map<CartItem, number>(\n        cartItem => (\n          cartItem.variant.id === params.variantID ? params.quantity : cartItem.quantity\n        ) * parseFloat(cartItem.variant.priceV2.amount.toString()),\n      ),\n    )(cartItems)\n\n    apolloClient.writeQuery({\n      data: {\n        ...cachedData,\n\n        node: {\n          ...cachedData.node,\n\n          lineItems: {\n            ...cachedData.node.lineItems,\n\n            edges: R.map(\n              (item: {node: CartItem}) => ({\n                ...item,\n\n                node: {\n                  ...item.node,\n                  quantity: item.node.variant.id === params.variantID ? params.quantity : item.node.quantity,\n                },\n              }),\n\n              cachedData.node.lineItems.edges,\n            ),\n          },\n\n          paymentDueV2   : {...cachedData.node.paymentDueV2, amount: newSubtotal},\n          subtotalPriceV2: {...cachedData.node.subtotalPriceV2, amount: newSubtotal},\n        },\n      },\n\n      query    : CheckoutQuery,\n      variables: {id: checkoutId},\n    })\n\n    try {\n      await updateCheckout({\n        variables: {\n          checkoutId: checkoutId,\n\n          lineItems: R.map(item => ({\n            quantity : item.variant.id === params.variantID ? params.quantity : item.quantity,\n            variantId: item.variant.id,\n          }), convertItemsForRead(cachedData)),\n        },\n      })\n    } catch(e) {\n      console.error(e)\n\n      // Refetch only then request failed!\n      await refetch()\n    }\n  }, [checkoutId, apolloClient, cartItems, convertItemsForRead, refetch, updateCheckout])\n\n  const removeProduct = useCallback(async (variantID: string) => {\n    // WARN read/write queries used for \"optimistic\" UI without races\n    const cachedData = apolloClient.readQuery({query: CheckoutQuery, variables: {id: checkoutId}})\n\n    const newSubtotal = R.compose<CartItem[], CartItem[], number[], number>(\n      R.sum,\n      R.map(cartItem => cartItem.quantity * parseFloat(cartItem.variant.priceV2.amount.toString())),\n      R.reject((cartItem: CartItem) => cartItem.variant.id === variantID),\n    )(cartItems)\n\n    apolloClient.writeQuery({\n      data: {\n        ...cachedData,\n\n        node: {\n          ...cachedData.node,\n\n          lineItems: {\n            ...cachedData.node.lineItems,\n\n            edges: R.filter(\n              (i: {node: CartItem}) => i.node.variant.id !== variantID,\n              cachedData.node.lineItems.edges,\n            ),\n          },\n\n          paymentDueV2   : {...cachedData.node.paymentDueV2, amount: newSubtotal},\n          subtotalPriceV2: {...cachedData.node.subtotalPriceV2, amount: newSubtotal},\n        },\n      },\n\n      query    : CheckoutQuery,\n      variables: {id: checkoutId},\n    })\n\n    try {\n      await updateCheckout({\n        variables: {\n          checkoutId: checkoutId,\n\n          lineItems: R.compose<CartItem[], CartItem[], any>(\n            R.map((item: any) => ({quantity: item.quantity, variantId: item.variant.id})),\n            R.filter((item: CartItem) => item.variant.id !== variantID),\n          )(convertItemsForRead(cachedData)),\n        },\n      })\n    } catch(e) {\n      console.error(e)\n\n      // Refetch only then request failed!\n      await refetch()\n    }\n  }, [checkoutId, apolloClient, cartItems, convertItemsForRead, refetch, updateCheckout])\n\n  const addProductWithConfirm = useCallback<ContextValue['addProduct']>(async params => {\n    setIsCartShown(false)\n    setIsConfirmShown(false)\n    const result = await addProduct(params)\n    setIsConfirmShown(true)\n    return result\n  }, [addProduct])\n\n  const fetchInventoryQuantityOfProducts = useCallback(async (ids: string[]) => {\n    // {<product id>: {<variant id>: <quantity>}}\n    setInventoryQuantityOfProducts(R.reduce((acc, product: Product) => R.assoc(\n\n      // Admin API returns decoded ids â€” decode them to base64 in order to match ids returned by Storefront API\n      btoa(product.id),\n\n      R.compose<{node: Variant}[], [string, number][], Record<string, number>>(\n        R.fromPairs,\n\n        R.map<{node: Variant}, [string, number]>(\n          (variant: {node: Variant}) => [btoa(variant.node.id), variant.node.inventoryQuantity || 0],\n        ),\n      )(product.variants.edges),\n\n      acc,\n    ),\n\n    {},\n\n    R.pathOr([], ['data', 'nodes'], await apolloClient.query({\n      context  : {isInternalAPI: true},\n      query    : InventoryQuantityQuery,\n      variables: {ids: ids},\n    }))))\n  }, [apolloClient])\n\n  const applyPromoCode = useCallback(async (code: string) => {\n    try {\n      const r = await applyDiscountCode({variables: {checkoutId: checkoutId, discountCode: code}})\n\n      const errors = R.compose(\n        R.pluck('message'),\n        R.pathOr([], ['checkoutUserErrors']),\n      )(r.data.checkoutDiscountCodeApplyV2)\n\n      if(R.length(errors))\n        return Promise.reject(errors[0])\n    } catch(e) {\n      console.error(e)\n    }\n\n    await refetch()\n  }, [applyDiscountCode, checkoutId, refetch])\n\n  const removePromoCode = useCallback(async () => {\n    try {\n      const r = await removeDiscountCode({variables: {checkoutId: checkoutId}})\n\n      const errors = R.compose(\n        R.pluck('message'),\n        R.pathOr([], ['checkoutUserErrors']),\n      )(r.data.checkoutDiscountCodeRemove)\n\n      if(R.length(errors))\n        return Promise.reject(errors[0])\n    } catch(e) {\n      console.error(e)\n    }\n\n    await refetch()\n  }, [checkoutId, refetch, removeDiscountCode])\n\n  const contextValue = useMemo<ContextValue>(() => ({\n    addProduct           : addProduct,\n    addProductWithConfirm: addProductWithConfirm,\n    applyPromoCode       : applyPromoCode,\n    cartItems            : cartItems,\n    checkoutId           : checkoutId,\n    clearCart            : clearCart,\n    discount             : discount,\n    fetchInventoryQuantityOfProducts,\n    inventoryQuantityOfProducts,\n    itemsCount           : cartItems.length,\n    openCart             : openCart,\n    refetch              : refetch,\n    removeProduct        : removeProduct,\n    removePromoCode      : removePromoCode,\n    shippingAddress      : R.path(['node', 'shippingAddress'], checkoutData),\n    subtotal             : subtotal,\n    tax                  : tax,\n    total                : total,\n    updateProduct        : updateProduct,\n  }), [\n    addProduct, addProductWithConfirm, applyPromoCode, cartItems, checkoutId, clearCart, discount,\n    fetchInventoryQuantityOfProducts, inventoryQuantityOfProducts, openCart, refetch, removeProduct, removePromoCode,\n    checkoutData, subtotal, tax, total, updateProduct,\n  ])\n\n  useEffect(() => {\n    let timeoutId\n\n    if(isConfirmShown)\n      timeoutId = setTimeout(() => setIsConfirmShown(false), 5000)\n\n    return () => clearTimeout(timeoutId)\n  }, [isConfirmShown])\n\n  return <CartContext.Provider value={contextValue}>\n    {props.children}\n\n    {isCartShown && <CartModal\n      removeProduct={removeProduct}\n      updateProduct={updateProduct}\n      close={closeCart}\n      itemsCount={cartItems.length}\n      items={cartItems}\n      subtotal={contextValue.subtotal}\n    />}\n\n    {isConfirmShown && <ConfirmModal\n      subtotal={contextValue.subtotal}\n      itemsCount={cartItems.length}\n      close={closeConfirmation}\n      product={addedProduct}\n    />}\n  </CartContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}