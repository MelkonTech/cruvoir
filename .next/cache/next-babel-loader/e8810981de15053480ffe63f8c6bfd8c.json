{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as R from 'ramda';\nimport * as Yup from 'yup';\nimport { addressFields } from \"./types\";\nimport { Fragment, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { Button } from \"../../common/Button\";\nimport { CartContext } from \"../../common/CartContext\";\nimport cn from 'classnames';\nimport { Field } from \"../../common/form/common/Field\";\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport getConfig from 'next/config';\nimport inputStyles from \"../../common/form/Input/index.css\";\nimport { PayWithCard } from \"./PayWithCard\";\nimport { PriceWithCompareAt } from \"../../common/PriceWithCompareAt\";\nimport ShippingAddressQuery from \"./graphql/checkout.graphql\";\nimport styles from \"./index.css\";\nimport { usePopup } from '@ottofeller/hooks';\nimport { useQuery } from '@apollo/react-hooks';\nimport { UserContext } from \"../../common/UserContext\";\nimport { useTranslation } from \"../../../i18n\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\nexport function Sidebar(props) {\n  const {\n    t\n  } = useTranslation();\n  const applyPromoCode = props.applyPromoCode;\n  const removePromoCode = props.removePromoCode;\n  const {\n    0: promoCode,\n    1: setPromoCode\n  } = useState('');\n  const {\n    0: promoCodeError,\n    1: setPromoCodeError\n  } = useState('');\n  const {\n    0: promoCodeLoading,\n    1: setIsPromoCodeLoading\n  } = useState(false);\n  const applyPromo = useCallback(async event => {\n    event.preventDefault();\n    setIsPromoCodeLoading(true);\n    setPromoCodeError('');\n\n    try {\n      await applyPromoCode(promoCode);\n    } catch (e) {\n      console.log(e);\n      setPromoCodeError(e);\n    } finally {\n      setIsPromoCodeLoading(false);\n    }\n  }, [applyPromoCode, promoCode]);\n  const removePromo = useCallback(async event => {\n    event.preventDefault();\n    setIsPromoCodeLoading(true);\n    setPromoCodeError('');\n\n    try {\n      await removePromoCode();\n    } catch (e) {\n      setPromoCodeError(e);\n    } finally {\n      setIsPromoCodeLoading(false);\n    }\n\n    setPromoCode('');\n  }, [removePromoCode]);\n  /*\n    step = 0 - promo code\n    step = 1 - shipping address\n    step = 2 - shipping method\n    step = 3 - confirm and pay\n  */\n\n  const {\n    0: step,\n    1: setStep\n  } = useState(0);\n  const goBack = useCallback(callback => {\n    callback();\n    const prevStep = step - 1;\n    if (prevStep >= 0) setStep(prevStep);\n  }, [step]);\n  const goNext = useCallback(callback => {\n    callback();\n    const nextStep = step + 1;\n    if (nextStep < 4) setStep(nextStep);\n  }, [step]);\n  const {\n    0: isOrderPaid,\n    1: setIsOrderPaid\n  } = useState(false);\n  const cartCtx = useContext(CartContext);\n  const userCtx = useContext(UserContext);\n  const {\n    data: checkoutData,\n    refetch,\n    startPolling,\n    stopPolling\n  } = useQuery(ShippingAddressQuery, {\n    skip: !cartCtx.checkoutId || !cartCtx.shippingAddress,\n    variables: {\n      id: cartCtx.checkoutId\n    }\n  });\n  const shippingInfo = useMemo(() => ({\n    address: R.path(['node', 'shippingAddress'], checkoutData),\n    availableRates: R.path(['node', 'availableShippingRates'], checkoutData),\n    line: R.path(['node', 'shippingLine'], checkoutData)\n  }), [checkoutData]);\n  const shippingCost = Number(R.pathOr(0, ['priceV2', 'amount'], shippingInfo.line));\n  const initialValues = useMemo(() => _objectSpread(_objectSpread({}, shippingInfo.address && _objectSpread(_objectSpread({}, R.pick(addressFields, shippingInfo.address)), {}, {\n    country: shippingInfo.address.countryCodeV2,\n    province: shippingInfo.address.provinceCode\n  })), {}, {\n    email: R.path(['node', 'email'], checkoutData) || R.path(['user', 'email'], userCtx) || null,\n    predefinedAddress: '',\n    shippingLine: R.pathOr('', ['handle'], shippingInfo.line)\n  }), [checkoutData, shippingInfo.address, shippingInfo.line, userCtx]);\n  const validationSchema = Yup.object().shape({\n    address1: Yup.string().required(),\n    country: Yup.string().required(),\n    email: Yup.string().email().required(),\n    firstName: Yup.string().required(),\n    lastName: Yup.string().required(),\n    zip: Yup.string().required()\n  });\n  const payWithCardPopup = usePopup();\n  const submit = useCallback(async () => {\n    cartCtx.clearCart();\n    window.location.href = checkoutData.node.webUrl; // TODO Enable it back when Stripe checkout is ready\n    // payWithCardPopup.show()\n  }, [cartCtx, checkoutData]);\n  const completeCheckoutWithPaymentSessionId = useCallback(async () => {\n    cartCtx.clearCart();\n    setIsOrderPaid(true);\n  }, [cartCtx]);\n  const {\n    0: countries,\n    1: setCountries\n  } = useState([]);\n  useEffect(() => {\n    (async () => {\n      try {\n        setCountries((await (await fetch(`${publicRuntimeConfig.NEXT_PUBLIC_APP_URL}/api/countries/list`)).json()) || []);\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, []);\n  return __jsx(\"div\", {\n    className: cn(styles.sidebar, props.className)\n  }, __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"div\", {\n    className: \"calculations\"\n  }, __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"div\", {\n    className: \"label\"\n  }, t('subtotal'), \":\"), __jsx(PriceWithCompareAt, {\n    className: \"value\",\n    price: props.subtotal\n  })), __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"div\", {\n    className: \"label\"\n  }, `${t('promo')}:`), props.discount.typename === 'MoneyV2' && __jsx(PriceWithCompareAt, {\n    className: \"value\",\n    price: props.discount.value\n  }), props.discount.typename === 'PricingPercentageValue' && __jsx(\"div\", {\n    className: \"value\"\n  }, props.discount.value, \"%\")), Number(props.discount.value) === 0 && __jsx(\"form\", {\n    className: cn('promo-form', {\n      'is-shown': step === 0\n    }),\n    onSubmit: applyPromo\n  }, __jsx(Field, {\n    className: \"field\",\n    errorMessage: promoCodeError,\n    isInvalid: Boolean(promoCodeError)\n  }, __jsx(\"div\", {\n    className: inputStyles.input\n  }, __jsx(\"input\", {\n    className: \"input\" //eslint-disable-next-line react/jsx-no-bind\n    ,\n    onChange: e => setPromoCode(e.currentTarget.value),\n    type: \"text\",\n    value: promoCode\n  }), __jsx(\"div\", {\n    className: cn('label', {\n      'is-focused': promoCode\n    })\n  }, t('enterYourPromoHere')))), __jsx(Button, {\n    appearance: \"outline\",\n    className: \"button\",\n    disabled: !promoCode,\n    isLoading: promoCodeLoading,\n    isSubmit: true,\n    width: \"narrow\"\n  }, t('ok'))), Number(props.discount.value) !== 0 && __jsx(\"form\", {\n    className: cn('promo-form', {\n      'is-shown': step === 0\n    }),\n    onSubmit: removePromo\n  }, __jsx(Field, {\n    className: \"field\",\n    errorMessage: promoCodeError,\n    isInvalid: Boolean(promoCodeError)\n  }, __jsx(\"div\", {\n    className: inputStyles.input\n  }, __jsx(\"input\", {\n    className: \"input\",\n    disabled: true,\n    type: \"text\",\n    value: props.discount.code\n  }), __jsx(\"div\", {\n    className: cn('label', {\n      'is-focused': props.discount.code\n    })\n  }, t('enterYourPromoHere')))), __jsx(Button, {\n    appearance: \"outline\",\n    className: \"button\",\n    icon: \"cross\",\n    isLoading: promoCodeLoading,\n    isSubmit: true,\n    width: \"narrow\"\n  }))), __jsx(Formik, {\n    enableReinitialize: true,\n    validateOnMount: true,\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: submit\n  }, __jsx(Fragment, null, !isOrderPaid && __jsx(Fragment, null, __jsx(Form, {\n    availableShippingRates: shippingInfo.availableRates,\n    checkoutId: cartCtx.checkoutId,\n    className: \"form-wrapper\",\n    countries: countries,\n    gender: props.gender,\n    goBack: goBack,\n    goNext: goNext,\n    promoCodeLoading: promoCodeLoading,\n    refetch: refetch,\n    shippingCost: shippingCost,\n    startPolling: startPolling,\n    step: step,\n    stopPolling: stopPolling,\n    total: props.total,\n    userToken: props.userToken\n  })), isOrderPaid && __jsx(\"p\", {\n    style: {\n      display: 'block',\n      fontSize: 14,\n      marginTop: 16\n    }\n  }, t('yourOrderIsAboutToBeFulfilled'))))), checkoutData && __jsx(PayWithCard, {\n    checkoutId: checkoutData.node.id,\n    onSuccess: completeCheckoutWithPaymentSessionId,\n    popup: payWithCardPopup,\n    shippingAddress: shippingInfo.address,\n    total: props.total\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}