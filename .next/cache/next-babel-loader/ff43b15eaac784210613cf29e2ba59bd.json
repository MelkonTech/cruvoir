{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { appendURLQueryParams, getUrlAs, getUrlHref, objectToFetchPostParams } from \"../../../../common/helpers\";\nimport { Fragment, useMemo } from 'react';\nimport { camelToDash } from \"../../../../common/helpers\";\nimport { catalogHierarchy } from \"../../../../../settings\";\nimport { CheckboxGroup } from \"../common/CheckboxGroup\";\nimport cn from 'classnames';\nimport { CollapsableSection } from \"../common/CollapsableSection\";\nimport { Link } from \"../../../../common/Link\";\nimport { useTranslation } from \"../../../../../i18n\";\nexport function Category(props) {\n  const {\n    t\n  } = useTranslation();\n  const subcategories = useMemo(() => R.compose(R.pathOr([], ['subcategories']), R.find(R.propEq('title', props.query.category)))(catalogHierarchy[props.query.gender].categories), [props.query]);\n  const tags = useMemo(() => R.compose(R.pathOr([], ['tags']), R.find(R.propEq('title', props.query.subcategory)))(subcategories), [props.query.subcategory, subcategories]);\n  const queryParamsString = R.compose(objectToFetchPostParams, R.reject(R.anyPass([R.isEmpty, R.isNil])))({\n    search: props.query.search\n  });\n  if (props.query.subcategory !== 'all' && !R.isEmpty(tags)) return __jsx(CheckboxGroup, {\n    className: props.className,\n    name: \"tags\",\n    title: t('categories'),\n    variants: R.map(tag => ({\n      title: tag,\n      value: camelToDash(tag)\n    }), tags)\n  });\n  return __jsx(CollapsableSection, {\n    className: props.className,\n    title: t('categories')\n  }, (props.query.category === 'all' || R.isEmpty(subcategories)) && __jsx(Fragment, null, R.map(category => {\n    const linkParams = {\n      category: camelToDash(category.title),\n      collection: props.query.collection,\n      gender: props.query.gender,\n      isWishListRequested: props.isWishListRequested\n    };\n    return __jsx(Link, {\n      as: appendURLQueryParams(getUrlAs(linkParams), queryParamsString),\n      className: cn('link', {\n        'is-selected': camelToDash(category.title) === props.query.category\n      }),\n      href: appendURLQueryParams(getUrlHref(linkParams), queryParamsString),\n      key: category.title\n    }, t(category.title));\n  }, catalogHierarchy[props.query.gender].categories)), props.query.category !== 'all' && (props.query.subcategory === 'all' || R.isEmpty(tags)) && __jsx(Fragment, null, R.map(subcategory => {\n    const linkParams = {\n      category: camelToDash(props.query.category),\n      collection: props.query.collection,\n      gender: props.query.gender,\n      isWishListRequested: props.isWishListRequested,\n      subcategory: camelToDash(subcategory.title)\n    };\n    return __jsx(Link, {\n      as: appendURLQueryParams(getUrlAs(linkParams), queryParamsString),\n      className: cn('link', {\n        'is-selected': camelToDash(subcategory.title) === props.query.subcategory\n      }),\n      href: appendURLQueryParams(getUrlHref(linkParams), queryParamsString),\n      key: subcategory.title\n    }, t(subcategory.title));\n  }, subcategories)));\n}","map":null,"metadata":{},"sourceType":"module"}