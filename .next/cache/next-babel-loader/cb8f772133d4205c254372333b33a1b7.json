{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useCallback, useEffect, useMemo, useState } from 'react';\nimport Cookies from 'js-cookie';\nimport moment from 'moment';\nconst ratesUpdatesMinutesInterval = 10;\nexport const CurrencyContext = /*#__PURE__*/createContext({\n  active: null,\n  convert: () => null,\n  rates: null,\n  ratesLastUpdatedAt: null,\n  setActive: () => null,\n  setActivePersistent: () => null,\n  setRates: () => null,\n  setRatesLastUpdatedAt: () => null\n});\nexport function CurrencyContextProvider(props) {\n  const {\n    0: active,\n    1: setActive\n  } = useState(props.initialCurrency);\n  const {\n    0: rates,\n    1: setRates\n  } = useState(props.initialCurrency === 'USD' && !props.initialRates ? {\n    CAD: 1,\n    EUR: 1,\n    GBP: 1,\n    USD: 1\n  } : props.initialRates);\n  const {\n    0: ratesLastUpdatedAt,\n    1: setRatesLastUpdatedAt\n  } = useState(props.initialRatesLastUpdatedAt);\n  const setActivePersistent = useCallback(value => {\n    setActive(value);\n    Cookies.set('currency', value);\n  }, [setActive]); // Fetch rates if N minutes were passed since the last update\n\n  useEffect(() => {\n    if (!ratesLastUpdatedAt || moment(ratesLastUpdatedAt, moment.ISO_8601).add(ratesUpdatesMinutesInterval, 'minutes').isBefore(moment())) fetch('https://api.exchangeratesapi.io/latest?base=USD').then(async response => {\n      var _json$rates;\n\n      console.log('Fetching currency rates');\n      const json = await response.json();\n      const newRates = (_json$rates = json.rates) !== null && _json$rates !== void 0 ? _json$rates : {};\n      const newRatesLastUpdatedAt = moment().format();\n      setRates(newRates);\n      setRatesLastUpdatedAt(newRatesLastUpdatedAt); // There is no way the request will be finished during SSR â€” thus use browser cookies\n\n      Cookies.set('currencyRates', JSON.stringify(newRates));\n      Cookies.set('currencyRatesLastUpdatedAt', newRatesLastUpdatedAt);\n    }).catch(console.error);\n  }, [ratesLastUpdatedAt]);\n  const convert = useCallback(params => params.value / rates[params.from] * rates[params.to], [rates]);\n  const contextObj = useMemo(() => ({\n    active,\n    convert,\n    rates,\n    ratesLastUpdatedAt,\n    setActive,\n    setActivePersistent,\n    setRates,\n    setRatesLastUpdatedAt\n  }), [active, convert, rates, ratesLastUpdatedAt, setActive, setActivePersistent, setRates, setRatesLastUpdatedAt]);\n  return __jsx(CurrencyContext.Provider, {\n    value: contextObj\n  }, props.children);\n}","map":null,"metadata":{},"sourceType":"module"}