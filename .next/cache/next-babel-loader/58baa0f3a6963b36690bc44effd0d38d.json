{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nexport function useViewport(props = {\n  initial: false\n}) {\n  _s();\n\n  const {\n    0: viewportWidth,\n    1: setViewportWidth\n  } = useState();\n  const {\n    0: isLoaded,\n    1: setIsLoaded\n  } = useState(props.initial);\n  useEffect(() => {\n    setIsLoaded(true);\n    setViewportWidth(window.innerWidth);\n\n    const handleResize = () => {\n      setViewportWidth(window.innerWidth);\n      if (props.onResize) props.onResize(window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [props]);\n  return useMemo(() => ({\n    isLoaded,\n    width: viewportWidth\n  }), [isLoaded, viewportWidth]);\n}\n\n_s(useViewport, \"Ho+NmbEKNHlnQznT3PqSpj5J69U=\");","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/hooks/use-viewport.tsx"],"names":["useEffect","useMemo","useState","useViewport","props","initial","viewportWidth","setViewportWidth","isLoaded","setIsLoaded","window","innerWidth","handleResize","onResize","addEventListener","removeEventListener","width"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,OAAnB,EAA4BC,QAA5B,QAA2C,OAA3C;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAG3B,GAAG;AAACC,EAAAA,OAAO,EAAE;AAAV,CAHG,EAGe;AAAA;;AACpB,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCL,QAAQ,EAAlD;AACA,QAAM;AAAA,OAACM,QAAD;AAAA,OAAWC;AAAX,MAA0BP,QAAQ,CAACE,KAAK,CAACC,OAAP,CAAxC;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,IAAAA,gBAAgB,CAACG,MAAM,CAACC,UAAR,CAAhB;;AAEA,UAAMC,YAAY,GAAG,MAAM;AACzBL,MAAAA,gBAAgB,CAACG,MAAM,CAACC,UAAR,CAAhB;AAEA,UAAGP,KAAK,CAACS,QAAT,EACET,KAAK,CAACS,QAAN,CAAeH,MAAM,CAACC,UAAtB;AACH,KALD;;AAOAD,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AACA,WAAO,MAAMF,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC,CAAb;AACD,GAbQ,EAaN,CAACR,KAAD,CAbM,CAAT;AAeA,SAAOH,OAAO,CAAC,OAAO;AACpBO,IAAAA,QADoB;AAEpBQ,IAAAA,KAAK,EAAEV;AAFa,GAAP,CAAD,EAGV,CAACE,QAAD,EAAWF,aAAX,CAHU,CAAd;AAID;;GA1BeH,W","sourcesContent":["import {useEffect, useMemo, useState} from 'react'\n\nexport function useViewport(props: {\n  initial?: boolean\n  onResize?: (_: Number) => void\n} = {initial: false}) {\n  const [viewportWidth, setViewportWidth] = useState<number>()\n  const [isLoaded, setIsLoaded] = useState(props.initial)\n\n  useEffect(() => {\n    setIsLoaded(true)\n    setViewportWidth(window.innerWidth)\n\n    const handleResize = () => {\n      setViewportWidth(window.innerWidth)\n\n      if(props.onResize)\n        props.onResize(window.innerWidth)\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [props])\n\n  return useMemo(() => ({\n    isLoaded,\n    width: viewportWidth,\n  }), [isLoaded, viewportWidth])\n}\n"]},"metadata":{},"sourceType":"module"}