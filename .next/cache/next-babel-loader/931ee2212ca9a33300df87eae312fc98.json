{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as R from 'ramda';\nimport { Fragment, useContext, useMemo, useState } from 'react';\nimport { Add } from \"./Add\";\nimport AddressesQuery from \"./graphql/addresses.graphql\";\nimport cn from 'classnames';\nimport { Edit } from \"./Edit\";\nimport { EmptyMessage } from \"../../common/EmptyMessage\";\nimport { Item } from \"./Item\";\nimport { Paginator } from \"../../common/Paginator\";\nimport { ProfileLayout } from \"../common/ProfileLayout\";\nimport styles from \"./index.css\";\nimport { UnderlineWrapper } from \"../../common/UnderlineWrapper\";\nimport { usePopup } from \"../../common/hooks\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { UserContext } from \"../../common/UserContext\";\nimport { useTranslation } from \"../../../i18n\";\nexport function Addresses(props) {\n  const {\n    t\n  } = useTranslation();\n  const userCtx = useContext(UserContext);\n  const perPage = 10;\n  const {\n    data: addressesData,\n    loading,\n    refetch: addressesRefetch\n  } = useQuery(AddressesQuery, {\n    variables: _objectSpread(_objectSpread(_objectSpread({\n      customerAccessToken: userCtx.accessToken\n    }, props.query.after ? {\n      after: props.query.after\n    } : {}), props.query.before ? {\n      before: props.query.before\n    } : {}), props.query.before ? {\n      last: perPage\n    } : {\n      first: perPage\n    })\n  });\n  const urlBaseAs = '/profile/addresses';\n  const urlBaseHref = '/profile/addresses';\n  const addresses = useMemo(() => R.pathOr([], ['addresses', 'edges'], addressesData), [addressesData]);\n  const firstCursor = useMemo(() => R.compose(R.path(['cursor']), R.head)(addresses), [addresses]);\n  const lastCursor = useMemo(() => R.compose(R.path(['cursor']), R.last)(addresses), [addresses]);\n  const pageInfo = R.path(['addresses', 'pageInfo'], addressesData);\n  const previousLinkAs = R.prop('hasPreviousPage', pageInfo) ? `${urlBaseAs}?before=${firstCursor}` : null;\n  const previousLinkHref = R.prop('hasPreviousPage', pageInfo) ? `${urlBaseHref}&before=${firstCursor}` : null;\n  const nextLinkAs = R.prop('hasNextPage', pageInfo) ? `${urlBaseAs}?after=${lastCursor}` : null;\n  const nextLinkHref = R.prop('hasNextPage', pageInfo) ? `${urlBaseHref}&after=${lastCursor}` : null;\n  const listData = useMemo(() => R.pathOr([], ['customer', 'addresses', 'edges'], addressesData), [addressesData]);\n  const isEmpty = R.isEmpty(listData);\n  const addFormPopup = usePopup();\n  const editFormPopup = usePopup();\n  const {\n    0: shownItemId,\n    1: setShownItemId\n  } = useState(null);\n  const editableAddress = useMemo(() => R.path(['0', 'node'], listData.filter(address => shownItemId === address.node.id)), [listData, shownItemId]);\n  if (loading) return __jsx(\"div\", null, \"Loading...\");\n  return __jsx(ProfileLayout, {\n    className: cn(styles.addresses, props.className)\n  }, __jsx(\"div\", {\n    className: \"content\"\n  }, !editFormPopup.isShown && !addFormPopup.isShown && __jsx(Fragment, null, __jsx(UnderlineWrapper, {\n    className: \"button-wrapper\",\n    isPermanent: true\n  }, __jsx(\"button\", {\n    className: \"button\",\n    onClick: addFormPopup.show\n  }, t('addNewAddress'))), isEmpty && __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('noAddressesYet')), !isEmpty && __jsx(Fragment, null, __jsx(\"div\", {\n    className: \"list\"\n  }, R.map(address => __jsx(Item, {\n    address: address.node,\n    addressesRefetch: addressesRefetch,\n    className: \"item\",\n    key: address.node.id,\n    setShownItemId: setShownItemId,\n    editFormPopup: editFormPopup\n  }), listData)), __jsx(Paginator, {\n    className: \"paginator\",\n    nextLinkAs: nextLinkAs,\n    nextLinkHref: nextLinkHref,\n    previousLinkAs: previousLinkAs,\n    previousLinkHref: previousLinkHref\n  }))), addFormPopup.isShown && __jsx(Add, {\n    addressesRefetch: addressesRefetch,\n    cancel: addFormPopup.close,\n    className: \"form\"\n  }), editFormPopup.isShown && __jsx(Edit, {\n    address: editableAddress,\n    addressesRefetch: addressesRefetch,\n    cancel: editFormPopup.close,\n    className: \"form\"\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}