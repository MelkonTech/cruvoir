{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as R from 'ramda';\nimport { createContext, useCallback, useMemo, useState } from 'react';\nimport Cookies from 'js-cookie';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useRouter } from 'next/router';\nimport UserQuery from \"./graphql/user.graphql\";\nexport const UserContext = /*#__PURE__*/createContext({\n  saveToken: () => null,\n  signOut: () => null,\n  user: null\n});\nexport function UserContextProvider(props) {\n  const {\n    0: token,\n    1: setToken\n  } = useState(props.initialValue.token);\n  const client = useApolloClient();\n  const {\n    data\n  } = useQuery(UserQuery, {\n    fetchPolicy: 'network-only',\n    skip: !token,\n    variables: {\n      token: token\n    }\n  });\n  const router = useRouter();\n  const saveToken = useCallback(params => {\n    Cookies.set('token', params.token, _objectSpread({}, params.expiresAt ? {\n      expires: params.expiresAt\n    } : {})); // Save token expiration date for refresh token ability\n\n    if (params.expiresAt) Cookies.set('tokenExpiresAt', params.expiresAt.toISOString(), {\n      expires: params.expiresAt\n    });\n    setToken(params.token);\n  }, []);\n  const signOut = useCallback(async () => {\n    Cookies.remove('token');\n    Cookies.remove('tokenExpiresAt');\n    setToken(null);\n    client.resetStore();\n    if (R.any(pathname => window.location.pathname.indexOf(pathname) === 0, ['/profile', '/wish'])) router.push('/');\n  }, [client, router]);\n  const value = useMemo(() => ({\n    accessToken: token,\n    saveToken,\n    signOut,\n    user: data ? data.customer : null\n  }), [data, saveToken, signOut, token]);\n  return __jsx(UserContext.Provider, {\n    value: value\n  }, props.children);\n}","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/UserContext/index.tsx"],"names":["R","createContext","useCallback","useMemo","useState","Cookies","useApolloClient","useQuery","useRouter","UserQuery","UserContext","saveToken","signOut","user","UserContextProvider","props","token","setToken","initialValue","client","data","fetchPolicy","skip","variables","router","params","set","expiresAt","expires","toISOString","remove","resetStore","any","pathname","window","location","indexOf","push","value","accessToken","customer","children"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,CAAZ,MAAmB,OAAnB;AACA,SAAQC,aAAR,EAAkCC,WAAlC,EAA+CC,OAA/C,EAAwDC,QAAxD,QAAuE,OAAvE;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,eAAR,QAA8B,qBAA9B;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AACA,OAAOC,SAAP;AAiBA,OAAO,MAAMC,WAAW,gBAAGT,aAAa,CAAe;AACrDU,EAAAA,SAAS,EAAE,MAAM,IADoC;AAErDC,EAAAA,OAAO,EAAI,MAAM,IAFoC;AAGrDC,EAAAA,IAAI,EAAO;AAH0C,CAAf,CAAjC;AAMP,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAGJ;AACD,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBb,QAAQ,CAACW,KAAK,CAACG,YAAN,CAAmBF,KAApB,CAAlC;AACA,QAAMG,MAAM,GAAGb,eAAe,EAA9B;AACA,QAAM;AAACc,IAAAA;AAAD,MAASb,QAAQ,CAACE,SAAD,EAAY;AAACY,IAAAA,WAAW,EAAE,cAAd;AAA8BC,IAAAA,IAAI,EAAE,CAACN,KAArC;AAA4CO,IAAAA,SAAS,EAAE;AAACP,MAAAA,KAAK,EAAEA;AAAR;AAAvD,GAAZ,CAAvB;AACA,QAAMQ,MAAM,GAAGhB,SAAS,EAAxB;AAEA,QAAMG,SAAS,GAAGT,WAAW,CAAEuB,MAAD,IAAqD;AACjFpB,IAAAA,OAAO,CAACqB,GAAR,CAAY,OAAZ,EAAqBD,MAAM,CAACT,KAA5B,oBAAuCS,MAAM,CAACE,SAAP,GAAmB;AAACC,MAAAA,OAAO,EAAEH,MAAM,CAACE;AAAjB,KAAnB,GAAiD,EAAxF,GADiF,CAGjF;;AACA,QAAGF,MAAM,CAACE,SAAV,EACEtB,OAAO,CAACqB,GAAR,CAAY,gBAAZ,EAA8BD,MAAM,CAACE,SAAP,CAAiBE,WAAjB,EAA9B,EAA8D;AAACD,MAAAA,OAAO,EAAEH,MAAM,CAACE;AAAjB,KAA9D;AAEFV,IAAAA,QAAQ,CAACQ,MAAM,CAACT,KAAR,CAAR;AACD,GAR4B,EAQ1B,EAR0B,CAA7B;AAUA,QAAMJ,OAAO,GAAGV,WAAW,CAAC,YAAY;AACtCG,IAAAA,OAAO,CAACyB,MAAR,CAAe,OAAf;AACAzB,IAAAA,OAAO,CAACyB,MAAR,CAAe,gBAAf;AACAb,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,MAAM,CAACY,UAAP;AAEA,QAAG/B,CAAC,CAACgC,GAAF,CAAMC,QAAQ,IAAIC,MAAM,CAACC,QAAP,CAAgBF,QAAhB,CAAyBG,OAAzB,CAAiCH,QAAjC,MAA+C,CAAjE,EAAoE,CAAC,UAAD,EAAa,OAAb,CAApE,CAAH,EACET,MAAM,CAACa,IAAP,CAAY,GAAZ;AACH,GAR0B,EAQxB,CAAClB,MAAD,EAASK,MAAT,CARwB,CAA3B;AAUA,QAAMc,KAAK,GAAGnC,OAAO,CAAC,OAAO;AAC3BoC,IAAAA,WAAW,EAAEvB,KADc;AAE3BL,IAAAA,SAF2B;AAG3BC,IAAAA,OAH2B;AAI3BC,IAAAA,IAAI,EAASO,IAAI,GAAGA,IAAI,CAACoB,QAAR,GAAmB;AAJT,GAAP,CAAD,EAKjB,CAACpB,IAAD,EAAOT,SAAP,EAAkBC,OAAlB,EAA2BI,KAA3B,CALiB,CAArB;AAOA,SAAO,MAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEsB;AAA7B,KACJvB,KAAK,CAAC0B,QADF,CAAP;AAGD","sourcesContent":["import * as R from 'ramda'\nimport {createContext, ReactNode, useCallback, useMemo, useState} from 'react'\nimport Cookies from 'js-cookie'\nimport {useApolloClient} from '@apollo/react-hooks'\nimport {useQuery} from '@apollo/react-hooks'\nimport {useRouter} from 'next/router'\nimport UserQuery from './graphql/user.graphql'\n\ntype ContextValue = {\n  accessToken?: string\n  saveToken: (params: {token: string, expiresAt: Date | null}) => void\n  signOut: () => void\n\n  user?: {\n    acceptsMarketing: boolean\n    email: string\n    firstName?: string\n    id: string\n    lastName?: string\n    phone?: string\n  }\n}\n\nexport const UserContext = createContext<ContextValue>({\n  saveToken: () => null,\n  signOut  : () => null,\n  user     : null,\n})\n\nexport function UserContextProvider(props: {\n  children: ReactNode\n  initialValue: {token?: string}\n}) {\n  const [token, setToken] = useState(props.initialValue.token)\n  const client = useApolloClient()\n  const {data} = useQuery(UserQuery, {fetchPolicy: 'network-only', skip: !token, variables: {token: token}})\n  const router = useRouter()\n\n  const saveToken = useCallback((params: {token: string, expiresAt: Date | null}) => {\n    Cookies.set('token', params.token, {...params.expiresAt ? {expires: params.expiresAt} : {}})\n\n    // Save token expiration date for refresh token ability\n    if(params.expiresAt)\n      Cookies.set('tokenExpiresAt', params.expiresAt.toISOString(), {expires: params.expiresAt})\n\n    setToken(params.token)\n  }, [])\n\n  const signOut = useCallback(async () => {\n    Cookies.remove('token')\n    Cookies.remove('tokenExpiresAt')\n    setToken(null)\n    client.resetStore()\n\n    if(R.any(pathname => window.location.pathname.indexOf(pathname) === 0, ['/profile', '/wish']))\n      router.push('/')\n  }, [client, router])\n\n  const value = useMemo(() => ({\n    accessToken: token,\n    saveToken,\n    signOut,\n    user       : data ? data.customer : null,\n  }), [data, saveToken, signOut, token])\n\n  return <UserContext.Provider value={value}>\n    {props.children}\n  </UserContext.Provider>\n}\n"]},"metadata":{},"sourceType":"module"}