{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport * as Yup from 'yup';\nimport { Fragment, useCallback, useContext, useState } from 'react';\nimport { AuthModal } from \"../common/AuthModal\";\nimport { AuthModalContext } from \"../../common/AuthModalContext\";\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport RecoverMutation from \"./graphql/recover.graphql\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { useTranslation } from \"../../../i18n\";\nexport function ForgotPassword() {\n  const {\n    0: isFormSubmitDone,\n    1: setIsFormSubmitDone\n  } = useState(false);\n  const {\n    0: submitErrors,\n    1: setSubmitErrors\n  } = useState([]);\n  const [recover] = useMutation(RecoverMutation);\n  const {\n    t\n  } = useTranslation();\n  const authModalCtx = useContext(AuthModalContext);\n  const close = useCallback(() => authModalCtx.setActive(null), [authModalCtx]);\n  const showSignUp = useCallback(() => authModalCtx.setActive('signup'), [authModalCtx]);\n  const submit = useCallback(async (values, actions) => {\n    try {\n      const r = await recover({\n        variables: values\n      });\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['customerUserErrors']))(r.data.customerRecover);\n      if (R.length(errors)) return setSubmitErrors(errors);\n      actions.resetForm();\n      setIsFormSubmitDone(true);\n    } catch (e) {\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['graphQLErrors']))(e);\n      setSubmitErrors(errors || [t('recoverFailed')]);\n    }\n  }, [recover, t]);\n  const initialValues = {\n    'email': ''\n  };\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email().required()\n  });\n  return __jsx(AuthModal, {\n    close: close\n  }, __jsx(\"div\", {\n    className: \"header\"\n  }, __jsx(\"h2\", {\n    className: \"title\"\n  }, t('forgotYourPassword'))), __jsx(\"div\", {\n    className: \"content\"\n  }, isFormSubmitDone ? __jsx(\"div\", {\n    className: \"form\"\n  }, __jsx(\"div\", {\n    className: \"note span--2\"\n  }, t('recoverPasswordEmailSent')), __jsx(\"button\", {\n    className: \"button span--2\",\n    onClick: close,\n    type: \"button\"\n  }, t('close'))) : __jsx(Fragment, null, __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: submit\n  }, __jsx(Form, {\n    showSignUp: showSignUp,\n    errorMessages: submitErrors\n  })), __jsx(\"button\", {\n    className: \"close-button\",\n    onClick: close,\n    type: \"button\"\n  }, t('cancel')))));\n}","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/auth/ForgotPassword/index.tsx"],"names":["R","Yup","Fragment","useCallback","useContext","useState","AuthModal","AuthModalContext","Form","Formik","RecoverMutation","useMutation","useTranslation","ForgotPassword","isFormSubmitDone","setIsFormSubmitDone","submitErrors","setSubmitErrors","recover","t","authModalCtx","close","setActive","showSignUp","submit","values","actions","r","variables","errors","compose","pluck","pathOr","data","customerRecover","length","resetForm","e","initialValues","validationSchema","object","shape","email","string","required"],"mappings":"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","sourcesContent":["import * as R from 'ramda'\nimport * as Yup from 'yup'\nimport {Fragment, useCallback, useContext, useState} from 'react'\nimport {AuthModal} from 'components/auth/common/AuthModal'\nimport {AuthModalContext} from 'components/common/AuthModalContext'\nimport {Form} from './Form'\nimport {Formik} from 'formik'\nimport RecoverMutation from './graphql/recover.graphql'\nimport {useMutation} from '@apollo/react-hooks'\nimport {useTranslation} from 'i18n'\n\nexport function ForgotPassword() {\n  const [isFormSubmitDone, setIsFormSubmitDone] = useState(false)\n  const [submitErrors, setSubmitErrors] = useState([])\n  const [recover] = useMutation(RecoverMutation)\n\n  const {t} = useTranslation()\n  const authModalCtx = useContext(AuthModalContext)\n  const close = useCallback(() => authModalCtx.setActive(null), [authModalCtx])\n  const showSignUp = useCallback(() => authModalCtx.setActive('signup'), [authModalCtx])\n\n  const submit = useCallback(async (values, actions) => {\n    try {\n      const r = await recover({variables: values})\n\n      const errors = R.compose(\n        R.pluck('message'),\n        R.pathOr([], ['customerUserErrors']),\n      )(r.data.customerRecover)\n\n      if(R.length(errors))\n        return setSubmitErrors(errors)\n\n      actions.resetForm()\n      setIsFormSubmitDone(true)\n    } catch(e) {\n      const errors = R.compose(\n        R.pluck('message'),\n        R.pathOr([], ['graphQLErrors']),\n      )(e)\n\n      setSubmitErrors(errors || [t('recoverFailed')])\n    }\n  }, [recover, t])\n\n  const initialValues = {'email': ''}\n  const validationSchema = Yup.object().shape({email: Yup.string().email().required()})\n\n  return <AuthModal close={close}>\n    <div className=\"header\">\n      <h2 className=\"title\">{t('forgotYourPassword')}</h2>\n    </div>\n\n    <div className=\"content\">\n      {isFormSubmitDone\n        ? <div className=\"form\">\n          <div className=\"note span--2\">{t('recoverPasswordEmailSent')}</div>\n          <button className=\"button span--2\" onClick={close} type=\"button\">{t('close')}</button>\n        </div>\n\n        : <Fragment>\n          <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={submit}\n          >\n            <Form showSignUp={showSignUp} errorMessages={submitErrors} />\n          </Formik>\n\n          <button className=\"close-button\" onClick={close} type=\"button\">\n            {t('cancel')}\n          </button>\n        </Fragment>\n      }\n    </div>\n  </AuthModal>\n}\n"]},"metadata":{},"sourceType":"module"}