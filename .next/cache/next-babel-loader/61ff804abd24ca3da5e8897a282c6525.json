{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as R from 'ramda';\nimport { createContext, useCallback, useMemo, useState } from 'react';\nimport Cookies from 'js-cookie';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useRouter } from 'next/router';\nimport UserQuery from \"./graphql/user.graphql\";\nexport const UserContext = /*#__PURE__*/createContext({\n  saveToken: () => null,\n  signOut: () => null,\n  user: null\n});\nexport function UserContextProvider(props) {\n  const {\n    0: token,\n    1: setToken\n  } = useState(props.initialValue.token);\n  const client = useApolloClient();\n  const {\n    data\n  } = useQuery(UserQuery, {\n    fetchPolicy: 'network-only',\n    skip: !token,\n    variables: {\n      token: token\n    }\n  });\n  const router = useRouter();\n  const saveToken = useCallback(params => {\n    Cookies.set('token', params.token, _objectSpread({}, params.expiresAt ? {\n      expires: params.expiresAt\n    } : {})); // Save token expiration date for refresh token ability\n\n    if (params.expiresAt) Cookies.set('tokenExpiresAt', params.expiresAt.toISOString(), {\n      expires: params.expiresAt\n    });\n    setToken(params.token);\n  }, []);\n  const signOut = useCallback(async () => {\n    Cookies.remove('token');\n    Cookies.remove('tokenExpiresAt');\n    setToken(null);\n    client.resetStore();\n    if (R.any(pathname => window.location.pathname.indexOf(pathname) === 0, ['/profile', '/wish'])) router.push('/');\n  }, [client, router]);\n  const value = useMemo(() => ({\n    accessToken: token,\n    saveToken,\n    signOut,\n    user: data ? data.customer : null\n  }), [data, saveToken, signOut, token]);\n  return __jsx(UserContext.Provider, {\n    value: value\n  }, props.children);\n}","map":null,"metadata":{},"sourceType":"module"}