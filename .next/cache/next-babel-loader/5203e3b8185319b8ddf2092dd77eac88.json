{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport * as Yup from 'yup';\nimport { useCallback, useContext, useState } from 'react';\nimport { AuthModal } from \"../common/AuthModal\";\nimport { AuthModalContext } from \"../../common/AuthModalContext\";\nimport cn from 'classnames';\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport SignIpMutation from \"./graphql/signin.graphql\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { UserContext } from \"../../common/UserContext\";\nimport { useTranslation } from \"../../../i18n\";\nexport function SignIn() {\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: signInErrors,\n    1: setSignInErrors\n  } = useState([]);\n  const authModalCtx = useContext(AuthModalContext);\n  const close = useCallback(() => authModalCtx.setActive(null), [authModalCtx]);\n  const showSignUp = useCallback(() => authModalCtx.setActive('signup'), [authModalCtx]);\n  const showForgot = useCallback(() => authModalCtx.setActive('forgot'), [authModalCtx]);\n  const [signin] = useMutation(SignIpMutation);\n  const userCtx = useContext(UserContext);\n  const submit = useCallback(async (values, actions) => {\n    try {\n      const r = await signin({\n        variables: {\n          input: R.omit(['rememberMe'], values)\n        }\n      });\n      const errors = R.compose(R.pluck('message'), R.pathOr([], ['customerUserErrors']))(r.data.customerAccessTokenCreate);\n      if (R.length(errors)) return setSignInErrors(errors);\n      const expiresAt = new Date(r.data.customerAccessTokenCreate.customerAccessToken.expiresAt);\n      const token = r.data.customerAccessTokenCreate.customerAccessToken.accessToken;\n      userCtx.saveToken({\n        expiresAt: values.rememberMe ? expiresAt : null,\n        token: token\n      });\n      actions.resetForm();\n      close();\n    } catch (e) {\n      return setSignInErrors([t('signInFailed')]);\n    }\n  }, [close, signin, t, userCtx]);\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email().required(),\n    password: Yup.string().required()\n  });\n  const initialValues = {\n    email: '',\n    password: '',\n    rememberMe: false\n  };\n  return __jsx(AuthModal, {\n    close: close\n  }, __jsx(\"div\", {\n    className: \"header\"\n  }, __jsx(\"button\", {\n    className: cn('button', 'is-selected')\n  }, t('signIn')), __jsx(\"button\", {\n    onClick: showSignUp,\n    className: \"button\"\n  }, t('signUp'))), __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: submit\n  }, __jsx(Form, {\n    errorMessages: signInErrors,\n    showForgot: showForgot\n  })), __jsx(\"button\", {\n    className: \"close-button\",\n    onClick: close,\n    type: \"button\"\n  }, t('cancel'))));\n}","map":null,"metadata":{},"sourceType":"module"}