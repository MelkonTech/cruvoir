{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useClickOutside, usePopup } from \"../../../../hooks\";\nimport cn from 'classnames';\nimport { Item } from \"./Item\";\nimport { useRef } from 'react';\nexport function Dropdown(props) {\n  _s();\n\n  const popup = usePopup();\n  const popupRef = useRef(null);\n  useClickOutside({\n    callback: popup.close,\n    intactId: props.intactId,\n    reference: popupRef\n  });\n  return __jsx(\"div\", {\n    className: props.className\n  }, __jsx(\"button\", {\n    className: \"button\",\n    \"data-intact-id\": props.intactId,\n    onClick: popup.toggle\n  }, props.translations[props.currentItem] && props.translations[props.currentItem].short), __jsx(\"div\", {\n    className: cn('list', {\n      'is-shown': popup.isShown\n    }),\n    ref: popupRef\n  }, props.list.sort().map(item => __jsx(Item, {\n    action: props.onChange,\n    className: cn('item', {\n      'is-selected': item === props.currentItem\n    }),\n    isShown: popup.isShown,\n    key: item,\n    onClick: popup.toggle,\n    value: item\n  }, props.translations[item].full))));\n}\n\n_s(Dropdown, \"OMMkpFBijjc7nnwMJ+ZhyTW12OM=\", false, function () {\n  return [usePopup, useClickOutside];\n});\n\n_c = Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/Layout/Header/Menu/Dropdown/index.tsx"],"names":["useClickOutside","usePopup","cn","Item","useRef","Dropdown","props","popup","popupRef","callback","close","intactId","reference","className","toggle","translations","currentItem","short","isShown","list","sort","map","item","onChange","full"],"mappings":";;;;AAAA,SAAQA,eAAR,EAAyBC,QAAzB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAAQC,IAAR;AACA,SAAQC,MAAR,QAAqB,OAArB;AAEA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAOJ;AAAA;;AACD,QAAMC,KAAK,GAAGN,QAAQ,EAAtB;AACA,QAAMO,QAAQ,GAAGJ,MAAM,CAAC,IAAD,CAAvB;AACAJ,EAAAA,eAAe,CAAC;AAACS,IAAAA,QAAQ,EAAEF,KAAK,CAACG,KAAjB;AAAwBC,IAAAA,QAAQ,EAAEL,KAAK,CAACK,QAAxC;AAAkDC,IAAAA,SAAS,EAAEJ;AAA7D,GAAD,CAAf;AAEA,SAAO;AAAK,IAAA,SAAS,EAAEF,KAAK,CAACO;AAAtB,KACL;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,sBAAgBP,KAAK,CAACK,QAAjD;AAA2D,IAAA,OAAO,EAAEJ,KAAK,CAACO;AAA1E,KACGR,KAAK,CAACS,YAAN,CAAmBT,KAAK,CAACU,WAAzB,KAAyCV,KAAK,CAACS,YAAN,CAAmBT,KAAK,CAACU,WAAzB,EAAsCC,KADlF,CADK,EAKL;AAAK,IAAA,SAAS,EAAEf,EAAE,CAAC,MAAD,EAAS;AAAC,kBAAYK,KAAK,CAACW;AAAnB,KAAT,CAAlB;AAAyD,IAAA,GAAG,EAAEV;AAA9D,KACGF,KAAK,CAACa,IAAN,CAAWC,IAAX,GAAkBC,GAAlB,CAAsBC,IAAI,IAAI,MAAC,IAAD;AAC7B,IAAA,MAAM,EAAEhB,KAAK,CAACiB,QADe;AAE7B,IAAA,SAAS,EAAErB,EAAE,CAAC,MAAD,EAAS;AAAC,qBAAeoB,IAAI,KAAKhB,KAAK,CAACU;AAA/B,KAAT,CAFgB;AAG7B,IAAA,OAAO,EAAET,KAAK,CAACW,OAHc;AAI7B,IAAA,GAAG,EAAEI,IAJwB;AAK7B,IAAA,OAAO,EAAEf,KAAK,CAACO,MALc;AAM7B,IAAA,KAAK,EAAEQ;AANsB,KAQ5BhB,KAAK,CAACS,YAAN,CAAmBO,IAAnB,EAAyBE,IARG,CAA9B,CADH,CALK,CAAP;AAkBD;;GA9BenB,Q;UAQAJ,Q,EAEdD,e;;;KAVcK,Q","sourcesContent":["import {useClickOutside, usePopup} from 'components/common/hooks'\nimport cn from 'classnames'\nimport {Item} from './Item'\nimport {useRef} from 'react'\n\nexport function Dropdown(props: {\n  className?: string\n  currentItem: string\n  intactId: string\n  list: string[]\n  onChange: (item: string) => void\n  translations: Record<string, {full: string, short: string}>\n}) {\n  const popup = usePopup()\n  const popupRef = useRef(null)\n  useClickOutside({callback: popup.close, intactId: props.intactId, reference: popupRef})\n\n  return <div className={props.className}>\n    <button className=\"button\" data-intact-id={props.intactId} onClick={popup.toggle}>\n      {props.translations[props.currentItem] && props.translations[props.currentItem].short}\n    </button>\n\n    <div className={cn('list', {'is-shown': popup.isShown})} ref={popupRef}>\n      {props.list.sort().map(item => <Item\n        action={props.onChange}\n        className={cn('item', {'is-selected': item === props.currentItem})}\n        isShown={popup.isShown}\n        key={item}\n        onClick={popup.toggle}\n        value={item}\n      >\n        {props.translations[item].full}\n      </Item>)}\n    </div>\n  </div>\n}\n"]},"metadata":{},"sourceType":"module"}