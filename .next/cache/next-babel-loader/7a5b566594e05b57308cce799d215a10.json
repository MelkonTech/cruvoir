{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { config as i18nConfig, useTranslation } from \"../../../../../i18n\";\nimport { useCallback, useContext, useMemo, useRef } from 'react';\nimport { addTranslationsFromPO } from \"../../../helpers\";\nimport { CartContext } from \"../../../CartContext\";\nimport { CategoryItem } from \"./CategoryItem\";\nimport cn from 'classnames';\nimport { CurrencyContext } from \"../../../CurrencyContext\";\nimport { Dropdown } from \"./Dropdown\";\nimport { FeaturedMenuContext } from \"../../../FeaturedMenuContext\";\nimport { GenderLinks } from \"./GenderLinks\";\nimport getConfig from 'next/config';\nimport { Icon } from \"../../../Icon\";\nimport { Link } from \"../../../Link\";\nimport { useClickOutside } from \"../../../hooks\";\nimport { UserContext } from \"../../../UserContext\";\nimport { UserMenu } from \"./UserMenu\";\nimport { WishListContext } from \"../../../WishListContext\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\nconst currenciesMap = {\n  CAD: {\n    full: 'CAD (C$)',\n    short: 'CAD (C$)'\n  },\n  EUR: {\n    full: 'EUR (€)',\n    short: 'EUR (€)'\n  },\n  GBP: {\n    full: 'GBP (£)',\n    short: 'GBP (£)'\n  },\n  USD: {\n    full: 'USD ($)',\n    short: 'USD ($)'\n  }\n};\nconst languagesMap = {\n  de: {\n    full: 'Deutsch',\n    short: 'De'\n  },\n  en: {\n    full: 'English',\n    short: 'En'\n  },\n  es: {\n    full: 'Espanol',\n    short: 'Es'\n  },\n  fr: {\n    full: 'Français',\n    short: 'Fr'\n  }\n};\n\nconst processMenuItemLabel = label => {\n  return label.split(' ').join('\\u00A0');\n};\n\nexport function Menu(props) {\n  const {\n    i18n,\n    t\n  } = useTranslation();\n  const close = props.close;\n  const cartCtx = useContext(CartContext);\n  const currencyContext = useContext(CurrencyContext);\n  const userCtx = useContext(UserContext);\n  const wishListCtx = useContext(WishListContext);\n  const featuredMenuCtx = useContext(FeaturedMenuContext);\n  const changeCurrency = useCallback(currency => {\n    currencyContext.setActivePersistent(currency);\n    close();\n  }, [close, currencyContext]);\n  const changeLanguage = useCallback(async newLanguage => {\n    // English translations are already loaded from Shopify, no need in requesting translations service\n    i18n.changeLanguage(newLanguage);\n    close();\n    if (newLanguage === 'en') return;\n\n    try {\n      addTranslationsFromPO({\n        i18n,\n        lang: newLanguage,\n        translations: await (await fetch(`${publicRuntimeConfig.NEXT_PUBLIC_APP_URL}/api/translations/${newLanguage}/products`)).json()\n      }); // The order of i18n.addResources() and i18n.changeLanguage() calls is important\n\n      i18n.changeLanguage(newLanguage);\n    } catch (error) {\n      console.error(error);\n    }\n  }, [close, i18n]);\n  const welcomeMessage = useMemo(() => {\n    if (!userCtx.user) return;\n    return userCtx.user.firstName ? t('helloUsername', {\n      userName: userCtx.user.firstName\n    }) : userCtx.user.email;\n  }, [t, userCtx.user]);\n  const featuredMenuItemsWithNewAndViewAll = useMemo(() => [{\n    category: 'all',\n    collection: 'all',\n    list: [],\n    subcategory: 'all',\n    title: 'view all'\n  }, {\n    category: 'all',\n    collection: `${props.gender}s-new`,\n    list: [],\n    subcategory: 'all',\n    title: 'New'\n  }, ...featuredMenuCtx[props.gender]], [featuredMenuCtx, props.gender]);\n  const popupRef = useRef(null);\n  useClickOutside({\n    callback: close,\n    intactId: props.intactId,\n    reference: popupRef\n  });\n  return __jsx(\"div\", {\n    className: props.className,\n    ref: popupRef\n  }, __jsx(\"button\", {\n    className: \"button\",\n    onClick: close\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"cross\"\n  })), __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"div\", {\n    className: \"scroll\"\n  }, userCtx.user && __jsx(\"div\", {\n    className: \"welcome\"\n  }, __jsx(\"div\", {\n    className: \"message\"\n  }, welcomeMessage), __jsx(\"hr\", {\n    className: \"divider\"\n  })), __jsx(\"div\", {\n    className: \"navigation\"\n  }, __jsx(GenderLinks, {\n    className: \"gender\",\n    close: close,\n    gender: props.gender,\n    isBlogDomain: props.isBlogDomain\n  }), __jsx(\"div\", {\n    className: \"list\"\n  }, featuredMenuItemsWithNewAndViewAll.map(item => __jsx(CategoryItem\n  /* eslint-disable-next-line max-len */\n  , {\n    as: `/${props.gender}/shop/collection/${item.collection}/category/${item.category}/subcategory/${item.subcategory}${item.tag ? `?tags=${item.tag}` : ''}`,\n    close: close,\n    hasAppDomain: props.isBlogDomain\n    /* eslint-disable-next-line max-len */\n    ,\n    href: \"/[gender]/shop/collection/[collection]/category/[category]/subcategory/[subcategory]\",\n    intactId: props.intactId,\n    items: item.list,\n    key: item.title,\n    popupRef: popupRef\n  }, processMenuItemLabel(t(item.title)))))), __jsx(\"div\", {\n    className: \"actions\"\n  }, __jsx(\"hr\", {\n    className: \"divider\"\n  }), __jsx(Link, {\n    className: \"link type--cart\",\n    href: \"/cart\",\n    onClick: close\n  }, __jsx(Icon, {\n    className: \"icon type--cart\",\n    name: \"cart\"\n  }), processMenuItemLabel(t('myBag')), __jsx(\"span\", {\n    className: cn('counter', {\n      'is-active': cartCtx.itemsCount > 0\n    })\n  }, cartCtx.itemsCount > 99 ? ':)' : cartCtx.itemsCount)), __jsx(Link, {\n    as: `/wish/${props.gender}/category/all/subcategory/all`,\n    className: \"link type--wish\",\n    href: \"/wish/[gender]/category/[category]/subcategory/[subcategory]\",\n    onClick: close\n  }, __jsx(Icon, {\n    className: \"icon type--wish\",\n    name: wishListCtx.list.length > 0 ? 'wish-fill' : 'wish'\n  }), processMenuItemLabel(t('myWishList'))), __jsx(\"hr\", {\n    className: \"divider\"\n  }), __jsx(Dropdown, {\n    className: \"dropdown type--language\",\n    currentItem: i18n.language,\n    intactId: \"languages-menu\",\n    list: i18nConfig.allLanguages,\n    onChange: changeLanguage,\n    translations: languagesMap\n  }), __jsx(\"hr\", {\n    className: \"divider\"\n  }), __jsx(Dropdown, {\n    className: \"dropdown type--currency\",\n    currentItem: currencyContext.active,\n    intactId: \"currencies-menu\",\n    list: Object.keys(currenciesMap),\n    onChange: changeCurrency,\n    translations: currenciesMap\n  }), __jsx(\"hr\", {\n    className: \"divider\"\n  }), __jsx(UserMenu, {\n    className: \"user-menu-wrapper type--user\",\n    closeMenu: close,\n    welcomeMessage: welcomeMessage\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}