{"ast":null,"code":"var __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { Elements, RichText } from 'prismic-reactjs';\nimport { FacebookShareButton, PinterestShareButton, TwitterShareButton } from 'react-share';\nimport { getCookie, prismicClient } from \"../../common/helpers\";\nimport React, { useCallback, useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport Error from 'next/error';\nimport { Gallery } from \"./Gallery\";\nimport getConfig from 'next/config';\nimport { getHeroImagePath } from \"../../common/helpers\";\nimport Head from 'next/head';\nimport { Icon } from \"../../common/Icon\";\nimport { ImagePreview } from \"../../common/ImagePreview\";\nimport { Layout } from \"../../common/Layout\";\nimport { Link } from \"../../common/Link\";\nimport moment from 'moment';\nimport Prismic from 'prismic-javascript';\nimport { ProductSliderByCollection } from \"../../common/ProductSliderByCollection\";\nimport styles from \"./index.css\";\nimport { usePopup } from '@ottofeller/hooks';\nimport { useTranslation } from \"../../../i18n\";\nimport { VideoPlayer } from \"../../common/VideoPlayer\";\nconst {\n  publicRuntimeConfig\n} = getConfig();\n\nconst propsWithUniqueKey = (props, key) => Object.assign(props || {}, {\n  key\n}); // https://prismic.io/docs/reactjs/beyond-the-api/html-serializer\n\n\nconst blogHtmlSerializer = (type, element, content, children, key) => {\n  if (type === Elements.paragraph) return /*#__PURE__*/React.createElement('p', propsWithUniqueKey({\n    className: 'paragraph'\n  }, key), children);\n  if (type === Elements.image) return /*#__PURE__*/React.createElement('img', propsWithUniqueKey({\n    alt: element.alt || '',\n    className: 'image',\n    src: element.url\n  }, key));\n  return null;\n};\n\nfunction Details(props) {\n  var _props$post, _props$post$video;\n\n  const relatedCollectionSlug = useMemo(() => {\n    if (!props.post.related_collection) return 'women';\n    return props.post.related_collection.split('/collections/')[1] || props.post.related_collection;\n  }, [props.post.related_collection]);\n  const {\n    t,\n    i18n\n  } = useTranslation();\n  const previewPopup = usePopup();\n  const {\n    0: initialPreviewSlideNumber,\n    1: setInitialPreviewSlideNumber\n  } = useState(0);\n  const images = useMemo(() => R.map(R.applySpec({\n    image: galleryImage => R.pathOr(galleryImage.image.url, ['image', 'large', 'url'], galleryImage),\n    thumbnail: R.path(['image', 'url'])\n  }), R.propOr([], 'gallery', props.post)), [props.post]);\n  const showPreviewPopup = useCallback(i => {\n    previewPopup.show();\n    setInitialPreviewSlideNumber(i);\n  }, [previewPopup]);\n  if (!props.post) return __jsx(Error, {\n    statusCode: 404\n  });\n  const title = RichText.asText(props.post.title);\n  const excerpt = RichText.asText(props.post.excerpt || []);\n  const introImagePath = getHeroImagePath(props.post.content);\n  const videoPath = (_props$post = props.post) === null || _props$post === void 0 ? void 0 : (_props$post$video = _props$post.video) === null || _props$post$video === void 0 ? void 0 : _props$post$video.url;\n  return __jsx(Layout, {\n    className: styles.list,\n    isBlogDomain: true\n  }, __jsx(Head, null, __jsx(\"meta\", {\n    key: \"og:type\",\n    property: \"og:type\",\n    content: \"website\"\n  }), __jsx(\"meta\", {\n    key: \"og:title\",\n    property: \"og:title\",\n    content: title\n  }), __jsx(\"meta\", {\n    key: \"og:url\",\n    property: \"og:url\",\n    content: `${publicRuntimeConfig.NEXT_PUBLIC_BLOG_URL}/${props.post.uid}`\n  }), introImagePath && !videoPath && __jsx(\"meta\", {\n    key: \"og:image\",\n    property: \"og:image\",\n    content: introImagePath\n  }), videoPath && __jsx(\"meta\", {\n    key: \"og:video\",\n    property: \"og:video\",\n    content: videoPath\n  }), __jsx(\"meta\", {\n    key: \"og:description\",\n    property: \"og:description\",\n    content: excerpt\n  })), __jsx(\"div\", {\n    className: cn('header', {\n      'has-image-or-video': introImagePath || videoPath\n    })\n  }, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(\"h1\", {\n    className: \"title\"\n  }, title), __jsx(\"p\", {\n    className: \"intro\"\n  }, excerpt), __jsx(\"time\", {\n    className: \"date\",\n    dateTime: props.post.date\n  }, moment(props.post.date).locale(i18n.language || i18n.options['defaultLanguage']).format('MMMM D, YYYY')), props.post.author && __jsx(\"div\", {\n    className: \"author\"\n  }, \"By \", props.post.author), __jsx(\"hr\", {\n    className: \"divider\"\n  }), __jsx(\"div\", {\n    className: \"footer\"\n  }, props.post.tags.length > 0 && __jsx(\"div\", {\n    className: \"tags\"\n  }, __jsx(\"div\", {\n    className: \"title\"\n  }, t('tags'), \":\"), __jsx(\"div\", {\n    className: \"list\"\n  }, props.post.tags.map(tag => __jsx(Link, {\n    as: `/t/${tag}`,\n    className: \"tag\",\n    href: `/t/[tagslug]?tagslug=${tag}`,\n    key: tag\n  }, tag)))), __jsx(\"div\", {\n    className: \"socials\"\n  }, __jsx(FacebookShareButton, {\n    className: \"link\",\n    quote: title,\n    url: `${publicRuntimeConfig.NEXT_PUBLIC_BLOG_URL}/${props.post.uid}`\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"facebook\"\n  })), __jsx(PinterestShareButton, {\n    className: \"link\",\n    description: title,\n    media: introImagePath,\n    url: `${publicRuntimeConfig.NEXT_PUBLIC_BLOG_URL}/${props.post.uid}`\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"pinterest\"\n  })), __jsx(TwitterShareButton, {\n    className: \"link\",\n    title: title,\n    url: `${publicRuntimeConfig.NEXT_PUBLIC_BLOG_URL}/${props.post.uid}`\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"twitter\"\n  }))))), introImagePath && !videoPath && __jsx(\"img\", {\n    alt: title,\n    className: \"image\",\n    src: introImagePath\n  }), videoPath && __jsx(VideoPlayer, {\n    className: \"video\",\n    isVideoAutoplayable: props.post.is_video_autoplayable,\n    videoUrl: videoPath\n  })), __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(RichText, {\n    render: props.post.content,\n    htmlSerializer: blogHtmlSerializer\n  })), !R.isEmpty(images) && __jsx(Gallery, {\n    className: \"gallery\",\n    images: images,\n    showPreviewPopup: showPreviewPopup\n  }), __jsx(ImagePreview, {\n    className: cn('preview', {\n      'is-shown': previewPopup.isShown\n    }),\n    closePreview: previewPopup.hide,\n    initialSlideNumber: initialPreviewSlideNumber,\n    images: R.compose(R.map(R.applySpec({\n      altText: props.post.title,\n      id: R.identity,\n      originalSrc: R.identity\n    })), R.pluck('image'))(images),\n    title: props.post.title\n  }), __jsx(\"div\", {\n    className: \"collections\"\n  }, __jsx(\"h2\", {\n    className: \"title\"\n  }, t('shopNow')), __jsx(ProductSliderByCollection, {\n    className: \"slider\",\n    handle: relatedCollectionSlug\n  })));\n}\n\nDetails.getServerSideProps = async params => {\n  const isPreview = params.query.slug === 'preview';\n  let post;\n  const postReponse = (await prismicClient(params.req).query([isPreview ? Prismic.Predicates.at('document.type', 'post') : Prismic.Predicates.at('my.post.uid', params.query.slug)], isPreview ? {\n    ref: getCookie({\n      ctx: {\n        req: params.req\n      },\n      name: Prismic.previewCookie\n    })\n  } : {})).results[0];\n  if (postReponse) post = R.merge({\n    tags: postReponse.tags,\n    uid: postReponse.uid\n  }, postReponse.data);\n\n  if (!post) {\n    post = {\n      props: {}\n    };\n    params.res.statusCode = 404;\n    return post;\n  }\n\n  return {\n    props: {\n      hasPageTransition: true,\n      post\n    }\n  };\n};\n\nexport { Details };","map":null,"metadata":{},"sourceType":"module"}