{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { appendURLQueryParams, getUrlAs, getUrlHref, objectToFetchPostParams } from \"../../../helpers\";\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport fieldStyles from \"../../../form/Input/index.css\";\nimport { getGender } from \"../../../helpers\";\nimport { Icon } from \"../../../Icon\";\nimport styles from \"./index.css\";\nimport { useClickOutside } from \"../../../hooks\";\nimport { useRouter } from 'next/router';\nimport { useTranslation } from \"../../../../../i18n\";\nexport function Search(props) {\n  const {\n    t\n  } = useTranslation();\n  const close = props.close;\n  const router = useRouter();\n  const searchFieldRef = useRef(null); // Here and down below query check is required for tests\n\n  const {\n    0: searchValue,\n    1: setSearchValue\n  } = useState(decodeURI(R.pathOr('', ['query', 'search'], router).toString()));\n  const urlBaseParams = useMemo(() => ({\n    category: R.pathOr(null, ['query', 'category'], router),\n    collection: R.pathOr(null, ['query', 'collection'], router),\n    gender: getGender(router, props.isBlogDomain),\n    subcategory: R.pathOr(null, ['query', 'subcategory'], router)\n  }), [router, props.isBlogDomain]);\n  const submit = useCallback(() => {\n    if (!R.isEmpty(searchFieldRef.current.value)) {\n      setSearchValue(searchFieldRef.current.value);\n      const queryParamsString = R.compose(objectToFetchPostParams, R.reject(R.anyPass([R.isEmpty, R.isNil])))({\n        search: searchFieldRef.current.value,\n        tags: R.pathOr(null, ['query', 'tags'], router),\n        vendors: R.pathOr(null, ['query', 'vendors'], router)\n      });\n      router.push(appendURLQueryParams(getUrlHref(urlBaseParams), queryParamsString), appendURLQueryParams(getUrlAs(urlBaseParams), queryParamsString)).then(() => window.scrollTo(0, 0));\n    }\n  }, [router, urlBaseParams]);\n  const submitSearchField = useCallback(e => {\n    if (e.key === 'Enter') submit();\n  }, [submit]);\n  const closeSearchField = useCallback(e => {\n    if (e.key === 'Escape') close();\n  }, [close]);\n  const clearSearchField = useCallback(() => {\n    if (!R.isNil(R.pathOr(null, ['query', 'search'], router))) {\n      const queryParamsString = R.compose(objectToFetchPostParams, R.reject(R.anyPass([R.isEmpty, R.isNil])))({\n        maxPrice: R.pathOr(null, ['query', 'maxPrice'], router),\n        minPrice: R.pathOr(null, ['query', 'minPrice'], router),\n        tags: R.pathOr(null, ['query', 'tags'], router),\n        vendors: R.pathOr(null, ['query', 'vendors'], router)\n      });\n      router.push(appendURLQueryParams(getUrlHref(urlBaseParams), queryParamsString), appendURLQueryParams(getUrlAs(urlBaseParams), queryParamsString)).then(searchFieldRef.current.focus());\n    }\n\n    setSearchValue('');\n  }, [router, urlBaseParams]);\n  const showClearSearchFieldButton = useCallback(event => {\n    setSearchValue(event.currentTarget.value);\n  }, []);\n  const popupRef = useRef(null);\n  useClickOutside({\n    callback: close,\n    intactId: props.intactId,\n    reference: popupRef\n  });\n  useEffect(() => {\n    if (props.isShown) setTimeout(() => {\n      searchFieldRef.current.focus();\n    }, 100);\n  }, [props.isShown, searchFieldRef]);\n  return __jsx(\"div\", {\n    className: cn(styles.search, props.className),\n    ref: popupRef\n  }, __jsx(\"div\", {\n    className: cn('button type--search'),\n    onClick: submit\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"search\"\n  })), __jsx(\"div\", {\n    className: cn('field', fieldStyles.input)\n  }, __jsx(\"input\", {\n    className: \"input\",\n    onChange: showClearSearchFieldButton,\n    onKeyPress: submitSearchField,\n    onKeyUp: closeSearchField,\n    ref: searchFieldRef,\n    type: \"search\",\n    value: searchValue\n  }), __jsx(\"div\", {\n    className: cn('label', {\n      'is-focused': searchValue\n    })\n  }, t('whatAreYouLookingFor'))), __jsx(\"button\", {\n    className: cn('button type--clear', {\n      'is-shown': searchValue\n    }),\n    onClick: clearSearchField\n  }, __jsx(Icon, {\n    className: \"icon\",\n    name: \"cross-thin\"\n  })));\n}","map":null,"metadata":{},"sourceType":"module"}