{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as Yup from 'yup';\nimport { useCallback, useMemo, useState } from 'react';\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport getConfig from 'next/config';\nconst {\n  publicRuntimeConfig\n} = getConfig();\nimport { useTranslation } from \"../../../../../i18n\";\nexport function Newsletter(props) {\n  const initialValues = useMemo(() => ({\n    email: ''\n  }), []);\n  const {\n    0: isErrorShown,\n    1: setIsErrorShown\n  } = useState(false);\n  const {\n    0: isThankYouShown,\n    1: setIsThankYouShown\n  } = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const subscribeToNewsletter = useCallback(async values => {\n    try {\n      setIsErrorShown(false);\n      await (await fetch(`${publicRuntimeConfig.NEXT_PUBLIC_APP_URL}/api/newsletter/subscribe`, {\n        body: JSON.stringify({\n          email: values.email,\n          name: values.name\n        }),\n        headers: {\n          accept: 'application/json'\n        },\n        method: 'POST'\n      })).json();\n      setIsThankYouShown(true);\n      setTimeout(() => setIsThankYouShown(false), 3000);\n    } catch (error) {\n      console.error(error);\n      setIsErrorShown(true);\n    }\n  }, []);\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email().required()\n  });\n  return __jsx(\"div\", null, isThankYouShown && __jsx(\"p\", {\n    style: {\n      fontSize: 10,\n      letterSpacing: '.32px'\n    }\n  }, t('thankYouForSubscribing')), isErrorShown && __jsx(\"p\", {\n    style: {\n      color: '#bc1b1b',\n      fontSize: 10,\n      letterSpacing: '.32px'\n    }\n  }, t('errorWhileSubscribingPleaseTryAgain')), !isThankYouShown && __jsx(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: subscribeToNewsletter\n  }, __jsx(Form, {\n    className: props.className\n  })));\n}","map":{"version":3,"sources":["D:/Work/web/direlli/frontend/components/common/Layout/Footer/Newsletter/index.tsx"],"names":["Yup","useCallback","useMemo","useState","Form","Formik","getConfig","publicRuntimeConfig","useTranslation","Newsletter","props","initialValues","email","isErrorShown","setIsErrorShown","isThankYouShown","setIsThankYouShown","t","subscribeToNewsletter","values","fetch","NEXT_PUBLIC_APP_URL","body","JSON","stringify","name","headers","accept","method","json","setTimeout","error","console","validationSchema","object","shape","string","required","fontSize","letterSpacing","color","className"],"mappings":";;AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,SAAQC,WAAR,EAAqBC,OAArB,EAA8BC,QAA9B,QAA6C,OAA7C;AACA,SAAQC,IAAR;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,MAAM;AAACC,EAAAA;AAAD,IAAwBD,SAAS,EAAvC;AACA,SAAQE,cAAR;AAEA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAEJ;AACD,QAAMC,aAAa,GAAGT,OAAO,CAAC,OAAO;AAACU,IAAAA,KAAK,EAAE;AAAR,GAAP,CAAD,EAAsB,EAAtB,CAA7B;AACA,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCX,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM;AAAA,OAACY,eAAD;AAAA,OAAkBC;AAAlB,MAAwCb,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM;AAACc,IAAAA;AAAD,MAAMT,cAAc,EAA1B;AAEA,QAAMU,qBAAqB,GAAGjB,WAAW,CAAC,MAAMkB,MAAN,IAAgB;AACxD,QAAI;AACFL,MAAAA,eAAe,CAAC,KAAD,CAAf;AAEA,YAAM,CAAC,MAAMM,KAAK,CAAE,GAAEb,mBAAmB,CAACc,mBAAoB,2BAA5C,EAAwE;AACxFC,QAAAA,IAAI,EAAKC,IAAI,CAACC,SAAL,CAAe;AAACZ,UAAAA,KAAK,EAAEO,MAAM,CAACP,KAAf;AAAsBa,UAAAA,IAAI,EAAEN,MAAM,CAACM;AAAnC,SAAf,CAD+E;AAExFC,QAAAA,OAAO,EAAE;AAACC,UAAAA,MAAM,EAAE;AAAT,SAF+E;AAGxFC,QAAAA,MAAM,EAAG;AAH+E,OAAxE,CAAZ,EAIFC,IAJE,EAAN;AAMAb,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACAc,MAAAA,UAAU,CAAC,MAAMd,kBAAkB,CAAC,KAAD,CAAzB,EAAkC,IAAlC,CAAV;AACD,KAXD,CAWE,OAAMe,KAAN,EAAY;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAjB,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAhBwC,EAgBtC,EAhBsC,CAAzC;AAkBA,QAAMmB,gBAAgB,GAAGjC,GAAG,CAACkC,MAAJ,GAAaC,KAAb,CAAmB;AAC1CvB,IAAAA,KAAK,EAAEZ,GAAG,CAACoC,MAAJ,GAAaxB,KAAb,GAAqByB,QAArB;AADmC,GAAnB,CAAzB;AAIA,SAAO,mBACJtB,eAAe,IAAI;AAAG,IAAA,KAAK,EAAE;AAACuB,MAAAA,QAAQ,EAAE,EAAX;AAAeC,MAAAA,aAAa,EAAE;AAA9B;AAAV,KAAmDtB,CAAC,CAAC,wBAAD,CAApD,CADf,EAGJJ,YAAY,IAAI;AAAG,IAAA,KAAK,EAAE;AACzB2B,MAAAA,KAAK,EAAU,SADU;AAEzBF,MAAAA,QAAQ,EAAO,EAFU;AAGzBC,MAAAA,aAAa,EAAE;AAHU;AAAV,KAIbtB,CAAC,CAAC,qCAAD,CAJY,CAHZ,EASJ,CAACF,eAAD,IAAoB,MAAC,MAAD;AACnB,IAAA,aAAa,EAAEJ,aADI;AAEnB,IAAA,gBAAgB,EAAEsB,gBAFC;AAGnB,IAAA,QAAQ,EAAEf;AAHS,KAKnB,MAAC,IAAD;AAAM,IAAA,SAAS,EAAER,KAAK,CAAC+B;AAAvB,IALmB,CAThB,CAAP;AAiBD","sourcesContent":["import * as Yup from 'yup'\nimport {useCallback, useMemo, useState} from 'react'\nimport {Form} from './Form'\nimport {Formik} from 'formik'\nimport getConfig from 'next/config'\nconst {publicRuntimeConfig} = getConfig()\nimport {useTranslation} from 'i18n'\n\nexport function Newsletter(props: {\n  className: string\n}) {\n  const initialValues = useMemo(() => ({email: ''}), [])\n  const [isErrorShown, setIsErrorShown] = useState(false)\n  const [isThankYouShown, setIsThankYouShown] = useState(false)\n  const {t} = useTranslation()\n\n  const subscribeToNewsletter = useCallback(async values => {\n    try {\n      setIsErrorShown(false)\n\n      await (await fetch(`${publicRuntimeConfig.NEXT_PUBLIC_APP_URL}/api/newsletter/subscribe`, {\n        body   : JSON.stringify({email: values.email, name: values.name}),\n        headers: {accept: 'application/json'},\n        method : 'POST',\n      })).json()\n\n      setIsThankYouShown(true)\n      setTimeout(() => setIsThankYouShown(false), 3000)\n    } catch(error){\n      console.error(error)\n      setIsErrorShown(true)\n    }\n  }, [])\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email().required(),\n  })\n\n  return <div>\n    {isThankYouShown && <p style={{fontSize: 10, letterSpacing: '.32px'}}>{t('thankYouForSubscribing')}</p>}\n\n    {isErrorShown && <p style={{\n      color        : '#bc1b1b',\n      fontSize     : 10,\n      letterSpacing: '.32px',\n    }}>{t('errorWhileSubscribingPleaseTryAgain')}</p>}\n\n    {!isThankYouShown && <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={subscribeToNewsletter}\n    >\n      <Form className={props.className} />\n    </Formik>}\n  </div>\n}\n"]},"metadata":{},"sourceType":"module"}