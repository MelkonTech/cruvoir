{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { Fragment, useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { getFirstVariantPrice, getInitialVariantOptions, getUnavailableOptions, getVariantOptionByName } from \"../../common/helpers\";\nimport { Breadcrumbs } from \"../../common/Breadcrumbs\";\nimport cn from 'classnames';\nimport { Designers } from \"../../common/Designers\";\nimport { EmptyMessage } from \"../../common/EmptyMessage\";\nimport { Form } from \"./Form\";\nimport { Formik } from 'formik';\nimport { ImagePreview } from \"../../common/ImagePreview\";\nimport { Layout } from \"../../common/Layout\";\nimport { Placeholder } from \"./Placeholder\";\nimport { productPath } from \"../../common/helpers\";\nimport ProductQuery from \"./graphql/product.graphql\";\nimport { RecentContext } from \"../../common/RecentContext\";\nimport { Slider } from \"./Slider\";\nimport styles from \"./index.css\";\nimport { Suggestions } from \"../../common/Suggestions\";\nimport { usePopup } from \"../../common/hooks\";\nimport { useQuery } from '@apollo/react-hooks';\nimport { useTranslation } from \"../../../i18n\";\n\nconst isFirstVariantAvailable = variants => R.pathOr(null, ['node', 'availableForSale'], variants[0]);\n\nexport function Details(props) {\n  const {\n    data: productData,\n    loading: productLoading\n  } = useQuery(ProductQuery, {\n    variables: {\n      handle: props.query.handle\n    }\n  });\n  const product = useMemo(() => R.pathOr({}, ['productByHandle'], productData), [productData]);\n  const recentCtx = useContext(RecentContext);\n  const path = useMemo(() => productPath(R.pathOr([], ['tags'], product)), [product]);\n  const options = useMemo(() => R.pathOr([], ['options'], product), [product]);\n  const images = useMemo(() => R.map(image => image.node, R.pathOr([], ['images', 'edges'], product)), [product]);\n  const variants = useMemo(() => R.sort((a, b) => +b.node.availableForSale - +a.node.availableForSale, R.pathOr([], ['variants', 'edges'], product)), [product]);\n  const findMatchingVariantByOptions = useCallback(variantOptions => R.compose(R.propOr(null, 'node'), R.find(variant => {\n    for (let key in variantOptions) if (!getVariantOptionByName(key, variant.node) || getVariantOptionByName(key, variant.node) !== variantOptions[key]) return false;\n\n    return true;\n  }))(variants), [variants]);\n  const {\n    0: price,\n    1: setPrice\n  } = useState(getFirstVariantPrice(variants, 'priceV2'));\n  const {\n    0: compareAtPrice,\n    1: setCompareAtPrice\n  } = useState(getFirstVariantPrice(variants, 'compareAtPriceV2'));\n  const {\n    0: isAvailableForSale,\n    1: setIsAvailableForSale\n  } = useState(isFirstVariantAvailable(variants));\n  const initialVariantOptions = useMemo(() => getInitialVariantOptions(variants), [variants]);\n  const {\n    0: selectedVariant,\n    1: setSelectedVariant\n  } = useState(findMatchingVariantByOptions(initialVariantOptions));\n  const {\n    0: unavailableOptions,\n    1: setUnavailableOptions\n  } = useState(getUnavailableOptions(initialVariantOptions, options, variants));\n  const updatePriceAndAvailability = useCallback(values => {\n    const matchingVariant = findMatchingVariantByOptions(values);\n    setSelectedVariant(matchingVariant);\n    setPrice(matchingVariant.priceV2);\n    setCompareAtPrice(matchingVariant.compareAtPriceV2);\n    setIsAvailableForSale(matchingVariant.availableForSale);\n    setUnavailableOptions(getUnavailableOptions(values, options, variants));\n  }, [findMatchingVariantByOptions, options, setSelectedVariant, variants]);\n  const {\n    t\n  } = useTranslation();\n  const submit = useCallback(() => {}, []);\n  useEffect(() => {\n    if (recentCtx.isReady && !R.isEmpty(product) && R.map(item => item.id, recentCtx.products).indexOf(product.id) === -1) recentCtx.saveToRecent(product);\n  }, [recentCtx, product]);\n  useEffect(() => {\n    setSelectedVariant(findMatchingVariantByOptions(initialVariantOptions));\n    setPrice(getFirstVariantPrice(variants, 'priceV2'));\n    setCompareAtPrice(getFirstVariantPrice(variants, 'compareAtPriceV2'));\n    setUnavailableOptions(getUnavailableOptions(initialVariantOptions, options, variants));\n  }, [findMatchingVariantByOptions, initialVariantOptions, options, product, setSelectedVariant, variants]); // Set up the availability of the variant on the initial load\n  // This function is only called during client side rendering\n\n  useEffect(() => setIsAvailableForSale(isFirstVariantAvailable(variants)), [variants]);\n  const breadcrumbs = useMemo(() => {\n    const result = [];\n    if (path.gender) result.push({\n      as: `/${path.gender.toLowerCase()}/shop/collection/all/category/all/subcategory/all`,\n      // eslint-disable-next-line max-len\n      href: `/[gender]/shop/collection/[collection]/category/[category]/subcategory/[subcategory]?category=all&collection=all&gender=${path.gender.toLowerCase()}&subcategory=all`,\n      title: path.gender\n    });\n    if (path.category) result.push({\n      as: `/${path.gender.toLowerCase()}/shop/collection/all/category/${path.category.toLowerCase()}/subcategory/all`,\n      // eslint-disable-next-line max-len\n      href: `/[gender]/shop/collection/[collection]/category/[category]/subcategory/[subcategory]?category=${path.category.toLowerCase()}&collection=all&gender=${path.gender.toLowerCase()}&subcategory=all`,\n      title: path.category\n    });\n    return result;\n  }, [path]);\n  const previewPopup = usePopup();\n  const {\n    0: initialPreviewSlideNumber,\n    1: setInitialPreviewSlideNumber\n  } = useState(0);\n  const showPreviewPopup = useCallback(i => {\n    previewPopup.show();\n    setInitialPreviewSlideNumber(i);\n  }, [previewPopup]);\n  return __jsx(Layout, null, productLoading && __jsx(Placeholder, null), !productLoading && __jsx(Formik, {\n    initialValues: initialVariantOptions,\n    onSubmit: submit,\n    validate: updatePriceAndAvailability\n  }, __jsx(Fragment, null, R.isEmpty(product) && __jsx(EmptyMessage, {\n    className: styles.emptyMessage\n  }, t('thisProductDoesnTExist')), !R.isEmpty(product) && __jsx(\"div\", {\n    className: styles.details\n  }, __jsx(Breadcrumbs, {\n    className: \"breadcrumbs\",\n    items: breadcrumbs\n  }), __jsx(\"div\", {\n    className: \"section\"\n  }, images.length === 0 ? __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('noImage')) : __jsx(Slider, {\n    className: \"gallery\",\n    images: images,\n    showPreview: showPreviewPopup,\n    title: product.title\n  }), __jsx(Form, {\n    className: \"content\",\n    compareAtPrice: compareAtPrice,\n    featuredImage: images[0],\n    gender: path.gender || 'women',\n    isAvailableForSale: isAvailableForSale,\n    options: options,\n    price: price,\n    product: product,\n    selectedVariant: selectedVariant,\n    unavailableOptions: unavailableOptions\n  })), __jsx(Suggestions, {\n    className: \"suggestions\",\n    productId: product.id\n  }), __jsx(Designers, {\n    className: \"designers\",\n    isBlogDomain: props.isBlogDomain\n  }), __jsx(ImagePreview, {\n    className: cn('preview', {\n      'is-shown': previewPopup.isShown\n    }),\n    closePreview: previewPopup.close,\n    initialSlideNumber: initialPreviewSlideNumber,\n    images: images,\n    title: product.title\n  })))));\n}","map":null,"metadata":{},"sourceType":"module"}