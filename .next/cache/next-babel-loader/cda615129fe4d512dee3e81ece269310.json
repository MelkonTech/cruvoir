{"ast":null,"code":"import * as R from 'ramda';\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { createHttpLink } from 'apollo-link-http';\nimport fetch from 'node-fetch';\nimport getConfig from 'next/config';\nconst {\n  serverRuntimeConfig\n} = getConfig();\nimport LocationsQuery from \"../../../components/common/graphql/locations.graphql\";\nimport LRU from 'lru-cache';\nconst cache = new LRU({\n  maxAge: 1000 * 60 * 60\n}); // maxAge in ms\n\nconst cacheKey = 'countries';\n\nasync function getCountries() {\n  const cachedData = cache.get(cacheKey);\n  if (cachedData) return cachedData;\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: createHttpLink({\n      credentials: 'same-origin',\n      fetch: fetch,\n      headers: {\n        // Accept and Content-Type headers are required by Storefront API\n        accept: 'application/json',\n        'content-type': 'application/json',\n        'x-shopify-access-token': serverRuntimeConfig.NEXT_SERVER_SHOPIFY_ADMIN_API_TOKEN\n      },\n      uri: serverRuntimeConfig.NEXT_SERVER_SHOPIFY_ADMIN_API_URL\n    })\n  });\n  const {\n    data\n  } = await client.query({\n    query: LocationsQuery\n  });\n  const countries = R.compose(R.map(c => ({\n    code: c.country.code.countryCode,\n    name: c.country.name,\n    provinces: R.map(R.pick(['name', 'code']), c.country.provinces)\n  })), R.flatten, R.map(node => R.map(group => group.countriesInAnyZone, node.profileLocationGroups)), R.pluck('node'))(R.pathOr([], ['deliveryProfiles', 'edges'], data));\n  cache.set(cacheKey, countries);\n  return countries;\n}\n\nexport default (async (req, res) => {\n  try {\n    const countries = await getCountries();\n    res.status(200).json(countries);\n  } catch (error) {\n    console.log(error);\n    res.status(500).json({\n      error: true\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"module"}