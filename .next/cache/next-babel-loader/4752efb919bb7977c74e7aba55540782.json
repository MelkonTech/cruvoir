{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport { CartContext } from \"../common/CartContext\";\nimport { EmptyMessage } from \"../common/EmptyMessage\";\nimport { findGenderInProductTags } from \"../common/helpers\";\nimport { Layout } from \"../common/Layout\";\nimport { Row } from \"./Row\";\nimport { Sidebar } from \"./Sidebar\";\nimport styles from \"./index.css\";\nimport { Suggestions } from \"../common/Suggestions\";\nimport { useTranslation } from \"../../i18n\";\nexport function Cart(props) {\n  const {\n    t\n  } = useTranslation();\n  const cartCtx = useContext(CartContext);\n  const {\n    0: randomProductID,\n    1: setRandomProductID\n  } = useState(''); // Generate random product id only on the client-side, as there is no simple way to share it between client and server\n\n  useEffect(() => {\n    if (!randomProductID) setRandomProductID(R.compose(R.nth(Math.floor(Math.random() * cartCtx.cartItems.length)), R.map(i => i.variant.product.id))(cartCtx.cartItems));\n  }, [cartCtx.cartItems, randomProductID]);\n  const isEmpty = useMemo(() => R.length(cartCtx.cartItems) === 0, [cartCtx.cartItems]);\n  useEffect(() => {\n    cartCtx.fetchInventoryQuantityOfProducts(R.map(R.path(['variant', 'product', 'id']), cartCtx.cartItems));\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cartCtx.cartItems]);\n  return __jsx(Layout, {\n    className: styles.cart\n  }, __jsx(\"h1\", {\n    className: \"title\"\n  }, t('myShoppingBag')), isEmpty && __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('emptyCartMessage')), !isEmpty && __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"div\", {\n    className: \"list styled-scrollbar\"\n  }, __jsx(\"table\", {\n    className: \"table\"\n  }, __jsx(\"tbody\", {\n    className: \"body\"\n  }, R.map(item => __jsx(Row, {\n    key: item.id,\n    className: \"row\",\n    data: item\n  }), cartCtx.cartItems)))), __jsx(Sidebar, {\n    applyPromoCode: cartCtx.applyPromoCode,\n    discount: cartCtx.discount,\n    removePromoCode: cartCtx.removePromoCode,\n    className: \"sidebar\",\n    gender: findGenderInProductTags(cartCtx.cartItems[0].variant.product.tags),\n    subtotal: cartCtx.subtotal,\n    total: cartCtx.total,\n    userToken: props.userToken\n  })), __jsx(Suggestions, {\n    className: \"suggestions\",\n    productId: randomProductID\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}