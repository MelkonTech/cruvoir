{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { useCallback, useContext, useState } from 'react';\nimport cn from 'classnames';\nimport DeleteCustomerAddressMutation from \"./graphql/delete-customer-address.graphql\";\nimport { Loading } from \"../../../common/Loading\";\nimport styles from \"./index.css\";\nimport { UnderlineWrapper } from \"../../../common/UnderlineWrapper\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { UserContext } from \"../../../common/UserContext\";\nimport { useTranslation } from \"../../../../i18n\";\nexport function Item(props) {\n  const {\n    t\n  } = useTranslation();\n  const userCtx = useContext(UserContext);\n  const [deleteAddressMutation] = useMutation(DeleteCustomerAddressMutation);\n  const addressId = props.address.id;\n  const {\n    0: submitErrors,\n    1: setSubmitErrors\n  } = useState([]);\n  const {\n    0: isLoadingLayerShown,\n    1: setLoadingLayerShown\n  } = useState(false);\n  const addressesRefetch = props.addressesRefetch;\n  const setShownItemId = props.setShownItemId;\n  const editFormPopup = props.editFormPopup;\n  const showUpdateForm = useCallback(() => {\n    setShownItemId(props.address.id);\n    editFormPopup.show();\n  }, [props.address.id, setShownItemId, editFormPopup]);\n  const deleteAddress = useCallback(async () => {\n    let errors = [];\n    setLoadingLayerShown(true);\n\n    try {\n      const r = await deleteAddressMutation({\n        variables: {\n          customerAccessToken: userCtx.accessToken,\n          id: addressId\n        }\n      });\n      errors = R.compose(R.pluck('message'), R.pathOr([], ['customerUserErrors']))(r.data.customerAddressDelete);\n    } catch (e) {\n      errors = R.compose(R.pluck('message'), R.pathOr([], ['graphQLErrors']))(e) || [t('deletingAShippingAddressFailed')];\n    }\n\n    if (R.isEmpty(errors)) await addressesRefetch();else {\n      setSubmitErrors(errors);\n      setLoadingLayerShown(false);\n    }\n  }, [addressesRefetch, addressId, deleteAddressMutation, t, userCtx.accessToken]);\n  return __jsx(\"div\", {\n    className: cn(styles.item, props.className)\n  }, __jsx(\"div\", {\n    className: \"section\"\n  }, __jsx(\"h3\", {\n    className: \"name\"\n  }, props.address.name), __jsx(\"div\", {\n    className: \"phone\"\n  }, props.address.phone), __jsx(\"div\", {\n    className: \"address\"\n  }, props.address.formatted.join(', '))), __jsx(\"div\", {\n    className: \"buttons\"\n  }, __jsx(UnderlineWrapper, {\n    className: \"wrapper\",\n    isPermanent: true\n  }, __jsx(\"button\", {\n    className: \"button type--delete\",\n    onClick: deleteAddress\n  }, t('remove'))), __jsx(UnderlineWrapper, {\n    className: \"wrapper\",\n    isPermanent: true\n  }, __jsx(\"button\", {\n    className: \"button type--edit\",\n    onClick: showUpdateForm\n  }, t('edit')))), __jsx(Loading, {\n    className: cn('loading-layer', {\n      'is-shown': isLoadingLayerShown\n    })\n  }), !R.isEmpty(submitErrors) && __jsx(\"div\", {\n    className: \"error-message\"\n  }, R.map(message => __jsx(\"div\", {\n    className: \"row\",\n    key: message\n  }, message), submitErrors)));\n}","map":null,"metadata":{},"sourceType":"module"}