{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nimport { useContext, useEffect } from 'react';\nimport { CartContext } from \"./..\";\nimport { EmptyMessage } from \"../../EmptyMessage\";\nimport { Item } from \"./Item\";\nimport { PopupCart } from \"../common/PopupCart\";\nimport { useTranslation } from \"../../../../i18n\";\nexport function CartModal(props) {\n  const cartCtx = useContext(CartContext);\n  const {\n    t\n  } = useTranslation();\n  useEffect(() => {\n    cartCtx.fetchInventoryQuantityOfProducts(R.map(R.path(['variant', 'product', 'id']), props.items));\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [props.items]);\n  return __jsx(PopupCart, {\n    subtotal: props.subtotal,\n    close: props.close,\n    counterValue: props.itemsCount,\n    title: t('yourShoppingCart')\n  }, R.length(props.items) > 0 && __jsx(\"div\", {\n    className: \"content\"\n  }, R.map(item => __jsx(Item, {\n    className: \"item\",\n    removeProduct: props.removeProduct,\n    updateProduct: props.updateProduct,\n    key: item.id,\n    cartItem: item // Do not allow quantity going over the stock\n    ,\n    maxQuantity: R.pathOr(1, [item.variant.product.id, item.variant.id], cartCtx.inventoryQuantityOfProducts)\n  }), props.items)), R.length(props.items) === 0 && __jsx(EmptyMessage, {\n    className: \"empty-message\"\n  }, t('emptyCartMessage')));\n}","map":null,"metadata":{},"sourceType":"module"}